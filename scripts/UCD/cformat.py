import UCD_config, sys, time, re
import os.path, shutil
from datetime import date

header_template = r"""#ifndef %s
#define %s
/*
 *  Copyright (c) %s International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by %s - manual edits may be lost.
 */

"""

cpp_template = r"""
/*
 *  Copyright (c) %s International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by %s - manual edits may be lost.
 *  %s
 */

"""

def open_output_directory():
    if os.path.exists(UCD_config.UCD_output_dir + ".bak"):
        shutil.rmtree(UCD_config.UCD_output_dir + ".bak")
    if os.path.exists(UCD_config.UCD_output_dir):
        shutil.move(UCD_config.UCD_output_dir, UCD_config.UCD_output_dir + ".bak")
    os.mkdir(UCD_config.UCD_output_dir)
    os.mkdir(UCD_config.UCD_output_dir + "/include")
    os.mkdir(UCD_config.UCD_output_dir + "/lib")


def open_header_file_for_write(filename):
    generator_name = sys.argv[0]
    f = open(UCD_config.UCD_output_dir + '/include/' + filename + '.h', 'w')
    substitute_name_char_re = re.compile('[-\s]')
    hname = substitute_name_char_re.sub('_', filename.upper()) + '_H'
    f.write(header_template % (hname, hname, date.today().year, generator_name))
    return f

def open_cpp_file_for_write(filename):
   generator_name = sys.argv[0]

   f = open(UCD_config.UCD_output_dir + '/lib/' + filename + '.cpp', 'w')
   hname = filename.upper() + '_H'
   f.write(cpp_template % (date.today().year, generator_name, filename))
   return f




def close_header_file(f):
   f.write("\n#endif\n")
   f.close()

def close_cpp_file(f):
   f.close()

def write_imports(f, import_list):
   for i in sorted(import_list): f.write("#include %s\n" % i)

def multiline_fill(item_list, separator = ",", indent = 4, max_line_length = 75):
  lines = ""
  sep_with_space = separator + " "
  while len(item_list) > 0:
    items_this_line = item_list[:1]
    length_this_line = len(item_list[0])
    item_list = item_list[1:]
    while (len(item_list) > 0) and (length_this_line + len(item_list[0]) + len(sep_with_space) <= max_line_length-indent):
      items_this_line.append(item_list[0])
      length_this_line += len(item_list[0]) + len(sep_with_space)
      item_list = item_list[1:]
    lines += sep_with_space.join(items_this_line)
    if len(item_list) > 0: lines += separator + "\n" + (" " * indent)
  return lines


