#ifndef PROPERTYVALUEALIASES_H
#define PROPERTYVALUEALIASES_H
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 */

#include <string>
#include <unicode/data/PropertyAliases.h>
#include <unordered_map>
#include <vector>
namespace UCD {

    namespace Binary_ns {
        enum value_t {
            N, Y};
        const static std::vector<std::string> enum_names = {
            "N", "Y"};
        const static std::vector<std::string> value_names = {
            "No", "Yes"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"n", N}, {"y", Y}, {"no", N}, {"yes", Y}, {"f", N}, {"t", Y},
            {"false", N}, {"true", Y}}};
    }

    namespace AGE_ns {
        enum value_t {
            Unassigned, V1_1, V2_0, V2_1, V3_0, V3_1, V3_2, V4_0, V4_1,
            V5_0, V5_1, V5_2, V6_0, V6_1, V6_2, V6_3, V7_0, V8_0, V9_0,
            V10_0, V11_0, V12_0, V12_1, V13_0};
        const static std::vector<std::string> enum_names = {
            "Unassigned", "V1_1", "V2_0", "V2_1", "V3_0", "V3_1", "V3_2",
            "V4_0", "V4_1", "V5_0", "V5_1", "V5_2", "V6_0", "V6_1", "V6_2",
            "V6_3", "V7_0", "V8_0", "V9_0", "V10_0", "V11_0", "V12_0",
            "V12_1", "V13_0"};
        const static std::vector<std::string> value_names = {
            "Unassigned", "V1_1", "V2_0", "V2_1", "V3_0", "V3_1", "V3_2",
            "V4_0", "V4_1", "V5_0", "V5_1", "V5_2", "V6_0", "V6_1", "V6_2",
            "V6_3", "V7_0", "V8_0", "V9_0", "V10_0", "V11_0", "V12_0",
            "V12_1", "V13_0"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"1.1", AGE_ns::V1_1}, {"10.0", AGE_ns::V10_0},
            {"11.0", AGE_ns::V11_0}, {"12.0", AGE_ns::V12_0},
            {"12.1", AGE_ns::V12_1}, {"13.0", AGE_ns::V13_0},
            {"2.0", AGE_ns::V2_0}, {"2.1", AGE_ns::V2_1},
            {"3.0", AGE_ns::V3_0}, {"3.1", AGE_ns::V3_1},
            {"3.2", AGE_ns::V3_2}, {"4.0", AGE_ns::V4_0},
            {"4.1", AGE_ns::V4_1}, {"5.0", AGE_ns::V5_0},
            {"5.1", AGE_ns::V5_1}, {"5.2", AGE_ns::V5_2},
            {"6.0", AGE_ns::V6_0}, {"6.1", AGE_ns::V6_1},
            {"6.2", AGE_ns::V6_2}, {"6.3", AGE_ns::V6_3},
            {"7.0", AGE_ns::V7_0}, {"8.0", AGE_ns::V8_0},
            {"9.0", AGE_ns::V9_0}, {"na", AGE_ns::Unassigned}}};
    }

    namespace BLK_ns {
        enum value_t {
            NB, ASCII, Latin_1_Sup, Latin_Ext_A, Latin_Ext_B, IPA_Ext,
            Modifier_Letters, Diacriticals, Greek, Cyrillic, Cyrillic_Sup,
            Armenian, Hebrew, Arabic, Syriac, Arabic_Sup, Thaana, NKo,
            Samaritan, Mandaic, Syriac_Sup, Arabic_Ext_A, Devanagari,
            Bengali, Gurmukhi, Gujarati, Oriya, Tamil, Telugu, Kannada,
            Malayalam, Sinhala, Thai, Lao, Tibetan, Myanmar, Georgian, Jamo,
            Ethiopic, Ethiopic_Sup, Cherokee, UCAS, Ogham, Runic, Tagalog,
            Hanunoo, Buhid, Tagbanwa, Khmer, Mongolian, UCAS_Ext, Limbu,
            Tai_Le, New_Tai_Lue, Khmer_Symbols, Buginese, Tai_Tham,
            Diacriticals_Ext, Balinese, Sundanese, Batak, Lepcha, Ol_Chiki,
            Cyrillic_Ext_C, Georgian_Ext, Sundanese_Sup, Vedic_Ext,
            Phonetic_Ext, Phonetic_Ext_Sup, Diacriticals_Sup,
            Latin_Ext_Additional, Greek_Ext, Punctuation, Super_And_Sub,
            Currency_Symbols, Diacriticals_For_Symbols, Letterlike_Symbols,
            Number_Forms, Arrows, Math_Operators, Misc_Technical,
            Control_Pictures, OCR, Enclosed_Alphanum, Box_Drawing,
            Block_Elements, Geometric_Shapes, Misc_Symbols, Dingbats,
            Misc_Math_Symbols_A, Sup_Arrows_A, Braille, Sup_Arrows_B,
            Misc_Math_Symbols_B, Sup_Math_Operators, Misc_Arrows,
            Glagolitic, Latin_Ext_C, Coptic, Georgian_Sup, Tifinagh,
            Ethiopic_Ext, Cyrillic_Ext_A, Sup_Punctuation, CJK_Radicals_Sup,
            Kangxi, IDC, CJK_Symbols, Hiragana, Katakana, Bopomofo,
            Compat_Jamo, Kanbun, Bopomofo_Ext, CJK_Strokes, Katakana_Ext,
            Enclosed_CJK, CJK_Compat, CJK_Ext_A, Yijing, CJK, Yi_Syllables,
            Yi_Radicals, Lisu, Vai, Cyrillic_Ext_B, Bamum,
            Modifier_Tone_Letters, Latin_Ext_D, Syloti_Nagri,
            Indic_Number_Forms, Phags_Pa, Saurashtra, Devanagari_Ext,
            Kayah_Li, Rejang, Jamo_Ext_A, Javanese, Myanmar_Ext_B, Cham,
            Myanmar_Ext_A, Tai_Viet, Meetei_Mayek_Ext, Ethiopic_Ext_A,
            Latin_Ext_E, Cherokee_Sup, Meetei_Mayek, Hangul, Jamo_Ext_B,
            High_Surrogates, High_PU_Surrogates, Low_Surrogates, PUA,
            CJK_Compat_Ideographs, Alphabetic_PF, Arabic_PF_A, VS,
            Vertical_Forms, Half_Marks, CJK_Compat_Forms, Small_Forms,
            Arabic_PF_B, Half_And_Full_Forms, Specials, Linear_B_Syllabary,
            Linear_B_Ideograms, Aegean_Numbers, Ancient_Greek_Numbers,
            Ancient_Symbols, Phaistos, Lycian, Carian, Coptic_Epact_Numbers,
            Old_Italic, Gothic, Old_Permic, Ugaritic, Old_Persian, Deseret,
            Shavian, Osmanya, Osage, Elbasan, Caucasian_Albanian, Linear_A,
            Cypriot_Syllabary, Imperial_Aramaic, Palmyrene, Nabataean,
            Hatran, Phoenician, Lydian, Meroitic_Hieroglyphs,
            Meroitic_Cursive, Kharoshthi, Old_South_Arabian,
            Old_North_Arabian, Manichaean, Avestan, Inscriptional_Parthian,
            Inscriptional_Pahlavi, Psalter_Pahlavi, Old_Turkic,
            Old_Hungarian, Hanifi_Rohingya, Rumi, Yezidi, Old_Sogdian,
            Sogdian, Chorasmian, Elymaic, Brahmi, Kaithi, Sora_Sompeng,
            Chakma, Mahajani, Sharada, Sinhala_Archaic_Numbers, Khojki,
            Multani, Khudawadi, Grantha, Newa, Tirhuta, Siddham, Modi,
            Mongolian_Sup, Takri, Ahom, Dogra, Warang_Citi, Dives_Akuru,
            Nandinagari, Zanabazar_Square, Soyombo, Pau_Cin_Hau, Bhaiksuki,
            Marchen, Masaram_Gondi, Gunjala_Gondi, Makasar, Lisu_Sup,
            Tamil_Sup, Cuneiform, Cuneiform_Numbers,
            Early_Dynastic_Cuneiform, Egyptian_Hieroglyphs,
            Egyptian_Hieroglyph_Format_Controls, Anatolian_Hieroglyphs,
            Bamum_Sup, Mro, Bassa_Vah, Pahawh_Hmong, Medefaidrin, Miao,
            Ideographic_Symbols, Tangut, Tangut_Components,
            Khitan_Small_Script, Tangut_Sup, Kana_Sup, Kana_Ext_A,
            Small_Kana_Ext, Nushu, Duployan, Shorthand_Format_Controls,
            Byzantine_Music, Music, Ancient_Greek_Music, Mayan_Numerals,
            Tai_Xuan_Jing, Counting_Rod, Math_Alphanum, Sutton_SignWriting,
            Glagolitic_Sup, Nyiakeng_Puachue_Hmong, Wancho, Mende_Kikakui,
            Adlam, Indic_Siyaq_Numbers, Ottoman_Siyaq_Numbers, Arabic_Math,
            Mahjong, Domino, Playing_Cards, Enclosed_Alphanum_Sup,
            Enclosed_Ideographic_Sup, Misc_Pictographs, Emoticons,
            Ornamental_Dingbats, Transport_And_Map, Alchemical,
            Geometric_Shapes_Ext, Sup_Arrows_C, Sup_Symbols_And_Pictographs,
            Chess_Symbols, Symbols_And_Pictographs_Ext_A,
            Symbols_For_Legacy_Computing, CJK_Ext_B, CJK_Ext_C, CJK_Ext_D,
            CJK_Ext_E, CJK_Ext_F, CJK_Compat_Ideographs_Sup, CJK_Ext_G,
            Tags, VS_Sup, Sup_PUA_A, Sup_PUA_B};
        const static std::vector<std::string> enum_names = {
            "NB", "ASCII", "Latin_1_Sup", "Latin_Ext_A", "Latin_Ext_B",
            "IPA_Ext", "Modifier_Letters", "Diacriticals", "Greek",
            "Cyrillic", "Cyrillic_Sup", "Armenian", "Hebrew", "Arabic",
            "Syriac", "Arabic_Sup", "Thaana", "NKo", "Samaritan", "Mandaic",
            "Syriac_Sup", "Arabic_Ext_A", "Devanagari", "Bengali",
            "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada",
            "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar",
            "Georgian", "Jamo", "Ethiopic", "Ethiopic_Sup", "Cherokee",
            "UCAS", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid",
            "Tagbanwa", "Khmer", "Mongolian", "UCAS_Ext", "Limbu", "Tai_Le",
            "New_Tai_Lue", "Khmer_Symbols", "Buginese", "Tai_Tham",
            "Diacriticals_Ext", "Balinese", "Sundanese", "Batak", "Lepcha",
            "Ol_Chiki", "Cyrillic_Ext_C", "Georgian_Ext", "Sundanese_Sup",
            "Vedic_Ext", "Phonetic_Ext", "Phonetic_Ext_Sup",
            "Diacriticals_Sup", "Latin_Ext_Additional", "Greek_Ext",
            "Punctuation", "Super_And_Sub", "Currency_Symbols",
            "Diacriticals_For_Symbols", "Letterlike_Symbols",
            "Number_Forms", "Arrows", "Math_Operators", "Misc_Technical",
            "Control_Pictures", "OCR", "Enclosed_Alphanum", "Box_Drawing",
            "Block_Elements", "Geometric_Shapes", "Misc_Symbols",
            "Dingbats", "Misc_Math_Symbols_A", "Sup_Arrows_A", "Braille",
            "Sup_Arrows_B", "Misc_Math_Symbols_B", "Sup_Math_Operators",
            "Misc_Arrows", "Glagolitic", "Latin_Ext_C", "Coptic",
            "Georgian_Sup", "Tifinagh", "Ethiopic_Ext", "Cyrillic_Ext_A",
            "Sup_Punctuation", "CJK_Radicals_Sup", "Kangxi", "IDC",
            "CJK_Symbols", "Hiragana", "Katakana", "Bopomofo",
            "Compat_Jamo", "Kanbun", "Bopomofo_Ext", "CJK_Strokes",
            "Katakana_Ext", "Enclosed_CJK", "CJK_Compat", "CJK_Ext_A",
            "Yijing", "CJK", "Yi_Syllables", "Yi_Radicals", "Lisu", "Vai",
            "Cyrillic_Ext_B", "Bamum", "Modifier_Tone_Letters",
            "Latin_Ext_D", "Syloti_Nagri", "Indic_Number_Forms", "Phags_Pa",
            "Saurashtra", "Devanagari_Ext", "Kayah_Li", "Rejang",
            "Jamo_Ext_A", "Javanese", "Myanmar_Ext_B", "Cham",
            "Myanmar_Ext_A", "Tai_Viet", "Meetei_Mayek_Ext",
            "Ethiopic_Ext_A", "Latin_Ext_E", "Cherokee_Sup", "Meetei_Mayek",
            "Hangul", "Jamo_Ext_B", "High_Surrogates", "High_PU_Surrogates",
            "Low_Surrogates", "PUA", "CJK_Compat_Ideographs",
            "Alphabetic_PF", "Arabic_PF_A", "VS", "Vertical_Forms",
            "Half_Marks", "CJK_Compat_Forms", "Small_Forms", "Arabic_PF_B",
            "Half_And_Full_Forms", "Specials", "Linear_B_Syllabary",
            "Linear_B_Ideograms", "Aegean_Numbers", "Ancient_Greek_Numbers",
            "Ancient_Symbols", "Phaistos", "Lycian", "Carian",
            "Coptic_Epact_Numbers", "Old_Italic", "Gothic", "Old_Permic",
            "Ugaritic", "Old_Persian", "Deseret", "Shavian", "Osmanya",
            "Osage", "Elbasan", "Caucasian_Albanian", "Linear_A",
            "Cypriot_Syllabary", "Imperial_Aramaic", "Palmyrene",
            "Nabataean", "Hatran", "Phoenician", "Lydian",
            "Meroitic_Hieroglyphs", "Meroitic_Cursive", "Kharoshthi",
            "Old_South_Arabian", "Old_North_Arabian", "Manichaean",
            "Avestan", "Inscriptional_Parthian", "Inscriptional_Pahlavi",
            "Psalter_Pahlavi", "Old_Turkic", "Old_Hungarian",
            "Hanifi_Rohingya", "Rumi", "Yezidi", "Old_Sogdian", "Sogdian",
            "Chorasmian", "Elymaic", "Brahmi", "Kaithi", "Sora_Sompeng",
            "Chakma", "Mahajani", "Sharada", "Sinhala_Archaic_Numbers",
            "Khojki", "Multani", "Khudawadi", "Grantha", "Newa", "Tirhuta",
            "Siddham", "Modi", "Mongolian_Sup", "Takri", "Ahom", "Dogra",
            "Warang_Citi", "Dives_Akuru", "Nandinagari", "Zanabazar_Square",
            "Soyombo", "Pau_Cin_Hau", "Bhaiksuki", "Marchen",
            "Masaram_Gondi", "Gunjala_Gondi", "Makasar", "Lisu_Sup",
            "Tamil_Sup", "Cuneiform", "Cuneiform_Numbers",
            "Early_Dynastic_Cuneiform", "Egyptian_Hieroglyphs",
            "Egyptian_Hieroglyph_Format_Controls", "Anatolian_Hieroglyphs",
            "Bamum_Sup", "Mro", "Bassa_Vah", "Pahawh_Hmong", "Medefaidrin",
            "Miao", "Ideographic_Symbols", "Tangut", "Tangut_Components",
            "Khitan_Small_Script", "Tangut_Sup", "Kana_Sup", "Kana_Ext_A",
            "Small_Kana_Ext", "Nushu", "Duployan",
            "Shorthand_Format_Controls", "Byzantine_Music", "Music",
            "Ancient_Greek_Music", "Mayan_Numerals", "Tai_Xuan_Jing",
            "Counting_Rod", "Math_Alphanum", "Sutton_SignWriting",
            "Glagolitic_Sup", "Nyiakeng_Puachue_Hmong", "Wancho",
            "Mende_Kikakui", "Adlam", "Indic_Siyaq_Numbers",
            "Ottoman_Siyaq_Numbers", "Arabic_Math", "Mahjong", "Domino",
            "Playing_Cards", "Enclosed_Alphanum_Sup",
            "Enclosed_Ideographic_Sup", "Misc_Pictographs", "Emoticons",
            "Ornamental_Dingbats", "Transport_And_Map", "Alchemical",
            "Geometric_Shapes_Ext", "Sup_Arrows_C",
            "Sup_Symbols_And_Pictographs", "Chess_Symbols",
            "Symbols_And_Pictographs_Ext_A", "Symbols_For_Legacy_Computing",
            "CJK_Ext_B", "CJK_Ext_C", "CJK_Ext_D", "CJK_Ext_E", "CJK_Ext_F",
            "CJK_Compat_Ideographs_Sup", "CJK_Ext_G", "Tags", "VS_Sup",
            "Sup_PUA_A", "Sup_PUA_B"};
        const static std::vector<std::string> value_names = {
            "No_Block", "Basic_Latin", "Latin_1_Supplement",
            "Latin_Extended_A", "Latin_Extended_B", "IPA_Extensions",
            "Spacing_Modifier_Letters", "Combining_Diacritical_Marks",
            "Greek_And_Coptic", "Cyrillic", "Cyrillic_Supplement",
            "Armenian", "Hebrew", "Arabic", "Syriac", "Arabic_Supplement",
            "Thaana", "NKo", "Samaritan", "Mandaic", "Syriac_Supplement",
            "Arabic_Extended_A", "Devanagari", "Bengali", "Gurmukhi",
            "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam",
            "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian",
            "Hangul_Jamo", "Ethiopic", "Ethiopic_Supplement", "Cherokee",
            "Unified_Canadian_Aboriginal_Syllabics", "Ogham", "Runic",
            "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian",
            "Unified_Canadian_Aboriginal_Syllabics_Extended", "Limbu",
            "Tai_Le", "New_Tai_Lue", "Khmer_Symbols", "Buginese",
            "Tai_Tham", "Combining_Diacritical_Marks_Extended", "Balinese",
            "Sundanese", "Batak", "Lepcha", "Ol_Chiki",
            "Cyrillic_Extended_C", "Georgian_Extended",
            "Sundanese_Supplement", "Vedic_Extensions",
            "Phonetic_Extensions", "Phonetic_Extensions_Supplement",
            "Combining_Diacritical_Marks_Supplement",
            "Latin_Extended_Additional", "Greek_Extended",
            "General_Punctuation", "Superscripts_And_Subscripts",
            "Currency_Symbols", "Combining_Diacritical_Marks_For_Symbols",
            "Letterlike_Symbols", "Number_Forms", "Arrows",
            "Mathematical_Operators", "Miscellaneous_Technical",
            "Control_Pictures", "Optical_Character_Recognition",
            "Enclosed_Alphanumerics", "Box_Drawing", "Block_Elements",
            "Geometric_Shapes", "Miscellaneous_Symbols", "Dingbats",
            "Miscellaneous_Mathematical_Symbols_A", "Supplemental_Arrows_A",
            "Braille_Patterns", "Supplemental_Arrows_B",
            "Miscellaneous_Mathematical_Symbols_B",
            "Supplemental_Mathematical_Operators",
            "Miscellaneous_Symbols_And_Arrows", "Glagolitic",
            "Latin_Extended_C", "Coptic", "Georgian_Supplement", "Tifinagh",
            "Ethiopic_Extended", "Cyrillic_Extended_A",
            "Supplemental_Punctuation", "CJK_Radicals_Supplement",
            "Kangxi_Radicals", "Ideographic_Description_Characters",
            "CJK_Symbols_And_Punctuation", "Hiragana", "Katakana",
            "Bopomofo", "Hangul_Compatibility_Jamo", "Kanbun",
            "Bopomofo_Extended", "CJK_Strokes",
            "Katakana_Phonetic_Extensions",
            "Enclosed_CJK_Letters_And_Months", "CJK_Compatibility",
            "CJK_Unified_Ideographs_Extension_A", "Yijing_Hexagram_Symbols",
            "CJK_Unified_Ideographs", "Yi_Syllables", "Yi_Radicals", "Lisu",
            "Vai", "Cyrillic_Extended_B", "Bamum", "Modifier_Tone_Letters",
            "Latin_Extended_D", "Syloti_Nagri", "Common_Indic_Number_Forms",
            "Phags_Pa", "Saurashtra", "Devanagari_Extended", "Kayah_Li",
            "Rejang", "Hangul_Jamo_Extended_A", "Javanese",
            "Myanmar_Extended_B", "Cham", "Myanmar_Extended_A", "Tai_Viet",
            "Meetei_Mayek_Extensions", "Ethiopic_Extended_A",
            "Latin_Extended_E", "Cherokee_Supplement", "Meetei_Mayek",
            "Hangul_Syllables", "Hangul_Jamo_Extended_B", "High_Surrogates",
            "High_Private_Use_Surrogates", "Low_Surrogates",
            "Private_Use_Area", "CJK_Compatibility_Ideographs",
            "Alphabetic_Presentation_Forms", "Arabic_Presentation_Forms_A",
            "Variation_Selectors", "Vertical_Forms", "Combining_Half_Marks",
            "CJK_Compatibility_Forms", "Small_Form_Variants",
            "Arabic_Presentation_Forms_B", "Halfwidth_And_Fullwidth_Forms",
            "Specials", "Linear_B_Syllabary", "Linear_B_Ideograms",
            "Aegean_Numbers", "Ancient_Greek_Numbers", "Ancient_Symbols",
            "Phaistos_Disc", "Lycian", "Carian", "Coptic_Epact_Numbers",
            "Old_Italic", "Gothic", "Old_Permic", "Ugaritic", "Old_Persian",
            "Deseret", "Shavian", "Osmanya", "Osage", "Elbasan",
            "Caucasian_Albanian", "Linear_A", "Cypriot_Syllabary",
            "Imperial_Aramaic", "Palmyrene", "Nabataean", "Hatran",
            "Phoenician", "Lydian", "Meroitic_Hieroglyphs",
            "Meroitic_Cursive", "Kharoshthi", "Old_South_Arabian",
            "Old_North_Arabian", "Manichaean", "Avestan",
            "Inscriptional_Parthian", "Inscriptional_Pahlavi",
            "Psalter_Pahlavi", "Old_Turkic", "Old_Hungarian",
            "Hanifi_Rohingya", "Rumi_Numeral_Symbols", "Yezidi",
            "Old_Sogdian", "Sogdian", "Chorasmian", "Elymaic", "Brahmi",
            "Kaithi", "Sora_Sompeng", "Chakma", "Mahajani", "Sharada",
            "Sinhala_Archaic_Numbers", "Khojki", "Multani", "Khudawadi",
            "Grantha", "Newa", "Tirhuta", "Siddham", "Modi",
            "Mongolian_Supplement", "Takri", "Ahom", "Dogra", "Warang_Citi",
            "Dives_Akuru", "Nandinagari", "Zanabazar_Square", "Soyombo",
            "Pau_Cin_Hau", "Bhaiksuki", "Marchen", "Masaram_Gondi",
            "Gunjala_Gondi", "Makasar", "Lisu_Supplement",
            "Tamil_Supplement", "Cuneiform",
            "Cuneiform_Numbers_And_Punctuation", "Early_Dynastic_Cuneiform",
            "Egyptian_Hieroglyphs", "Egyptian_Hieroglyph_Format_Controls",
            "Anatolian_Hieroglyphs", "Bamum_Supplement", "Mro", "Bassa_Vah",
            "Pahawh_Hmong", "Medefaidrin", "Miao",
            "Ideographic_Symbols_And_Punctuation", "Tangut",
            "Tangut_Components", "Khitan_Small_Script", "Tangut_Supplement",
            "Kana_Supplement", "Kana_Extended_A", "Small_Kana_Extension",
            "Nushu", "Duployan", "Shorthand_Format_Controls",
            "Byzantine_Musical_Symbols", "Musical_Symbols",
            "Ancient_Greek_Musical_Notation", "Mayan_Numerals",
            "Tai_Xuan_Jing_Symbols", "Counting_Rod_Numerals",
            "Mathematical_Alphanumeric_Symbols", "Sutton_SignWriting",
            "Glagolitic_Supplement", "Nyiakeng_Puachue_Hmong", "Wancho",
            "Mende_Kikakui", "Adlam", "Indic_Siyaq_Numbers",
            "Ottoman_Siyaq_Numbers",
            "Arabic_Mathematical_Alphabetic_Symbols", "Mahjong_Tiles",
            "Domino_Tiles", "Playing_Cards",
            "Enclosed_Alphanumeric_Supplement",
            "Enclosed_Ideographic_Supplement",
            "Miscellaneous_Symbols_And_Pictographs", "Emoticons",
            "Ornamental_Dingbats", "Transport_And_Map_Symbols",
            "Alchemical_Symbols", "Geometric_Shapes_Extended",
            "Supplemental_Arrows_C", "Supplemental_Symbols_And_Pictographs",
            "Chess_Symbols", "Symbols_And_Pictographs_Extended_A",
            "Symbols_For_Legacy_Computing",
            "CJK_Unified_Ideographs_Extension_B",
            "CJK_Unified_Ideographs_Extension_C",
            "CJK_Unified_Ideographs_Extension_D",
            "CJK_Unified_Ideographs_Extension_E",
            "CJK_Unified_Ideographs_Extension_F",
            "CJK_Compatibility_Ideographs_Supplement",
            "CJK_Unified_Ideographs_Extension_G", "Tags",
            "Variation_Selectors_Supplement",
            "Supplementary_Private_Use_Area_A",
            "Supplementary_Private_Use_Area_B"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"canadiansyllabics", BLK_ns::UCAS},
            {"combiningmarksforsymbols", BLK_ns::Diacriticals_For_Symbols},
            {"cyrillicsupplementary", BLK_ns::Cyrillic_Sup},
            {"latin1", BLK_ns::Latin_1_Sup}, {"privateuse", BLK_ns::PUA}}};
    }

    namespace SC_ns {
        enum value_t {
            Zzzz, Zyyy, Latn, Grek, Cyrl, Armn, Hebr, Arab, Syrc, Thaa,
            Deva, Beng, Guru, Gujr, Orya, Taml, Telu, Knda, Mlym, Sinh,
            Thai, Laoo, Tibt, Mymr, Geor, Hang, Ethi, Cher, Cans, Ogam,
            Runr, Khmr, Mong, Hira, Kana, Bopo, Hani, Yiii, Ital, Goth,
            Dsrt, Zinh, Tglg, Hano, Buhd, Tagb, Limb, Tale, Linb, Ugar,
            Shaw, Osma, Cprt, Brai, Bugi, Copt, Talu, Glag, Tfng, Sylo,
            Xpeo, Khar, Bali, Xsux, Phnx, Phag, Nkoo, Sund, Lepc, Olck,
            Vaii, Saur, Kali, Rjng, Lyci, Cari, Lydi, Cham, Lana, Tavt,
            Avst, Egyp, Samr, Lisu, Bamu, Java, Mtei, Armi, Sarb, Prti,
            Phli, Orkh, Kthi, Batk, Brah, Mand, Cakm, Merc, Mero, Plrd,
            Shrd, Sora, Takr, Aghb, Bass, Dupl, Elba, Gran, Hmng, Khoj,
            Lina, Mahj, Mani, Mend, Modi, Mroo, Narb, Nbat, Palm, Pauc,
            Perm, Phlp, Sidd, Sind, Tirh, Wara, Ahom, Hluw, Hatr, Mult,
            Hung, Sgnw, Adlm, Bhks, Marc, Newa, Osge, Tang, Gonm, Nshu,
            Soyo, Zanb, Dogr, Gong, Maka, Medf, Rohg, Sogd, Sogo, Elym,
            Nand, Hmnp, Wcho, Chrs, Diak, Kits, Yezi, Hrkt};
        const static std::vector<std::string> enum_names = {
            "Zzzz", "Zyyy", "Latn", "Grek", "Cyrl", "Armn", "Hebr", "Arab",
            "Syrc", "Thaa", "Deva", "Beng", "Guru", "Gujr", "Orya", "Taml",
            "Telu", "Knda", "Mlym", "Sinh", "Thai", "Laoo", "Tibt", "Mymr",
            "Geor", "Hang", "Ethi", "Cher", "Cans", "Ogam", "Runr", "Khmr",
            "Mong", "Hira", "Kana", "Bopo", "Hani", "Yiii", "Ital", "Goth",
            "Dsrt", "Zinh", "Tglg", "Hano", "Buhd", "Tagb", "Limb", "Tale",
            "Linb", "Ugar", "Shaw", "Osma", "Cprt", "Brai", "Bugi", "Copt",
            "Talu", "Glag", "Tfng", "Sylo", "Xpeo", "Khar", "Bali", "Xsux",
            "Phnx", "Phag", "Nkoo", "Sund", "Lepc", "Olck", "Vaii", "Saur",
            "Kali", "Rjng", "Lyci", "Cari", "Lydi", "Cham", "Lana", "Tavt",
            "Avst", "Egyp", "Samr", "Lisu", "Bamu", "Java", "Mtei", "Armi",
            "Sarb", "Prti", "Phli", "Orkh", "Kthi", "Batk", "Brah", "Mand",
            "Cakm", "Merc", "Mero", "Plrd", "Shrd", "Sora", "Takr", "Aghb",
            "Bass", "Dupl", "Elba", "Gran", "Hmng", "Khoj", "Lina", "Mahj",
            "Mani", "Mend", "Modi", "Mroo", "Narb", "Nbat", "Palm", "Pauc",
            "Perm", "Phlp", "Sidd", "Sind", "Tirh", "Wara", "Ahom", "Hluw",
            "Hatr", "Mult", "Hung", "Sgnw", "Adlm", "Bhks", "Marc", "Newa",
            "Osge", "Tang", "Gonm", "Nshu", "Soyo", "Zanb", "Dogr", "Gong",
            "Maka", "Medf", "Rohg", "Sogd", "Sogo", "Elym", "Nand", "Hmnp",
            "Wcho", "Chrs", "Diak", "Kits", "Yezi", "Hrkt"};
        const static std::vector<std::string> value_names = {
            "Unknown", "Common", "Latin", "Greek", "Cyrillic", "Armenian",
            "Hebrew", "Arabic", "Syriac", "Thaana", "Devanagari", "Bengali",
            "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada",
            "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar",
            "Georgian", "Hangul", "Ethiopic", "Cherokee",
            "Canadian_Aboriginal", "Ogham", "Runic", "Khmer", "Mongolian",
            "Hiragana", "Katakana", "Bopomofo", "Han", "Yi", "Old_Italic",
            "Gothic", "Deseret", "Inherited", "Tagalog", "Hanunoo", "Buhid",
            "Tagbanwa", "Limbu", "Tai_Le", "Linear_B", "Ugaritic",
            "Shavian", "Osmanya", "Cypriot", "Braille", "Buginese",
            "Coptic", "New_Tai_Lue", "Glagolitic", "Tifinagh",
            "Syloti_Nagri", "Old_Persian", "Kharoshthi", "Balinese",
            "Cuneiform", "Phoenician", "Phags_Pa", "Nko", "Sundanese",
            "Lepcha", "Ol_Chiki", "Vai", "Saurashtra", "Kayah_Li", "Rejang",
            "Lycian", "Carian", "Lydian", "Cham", "Tai_Tham", "Tai_Viet",
            "Avestan", "Egyptian_Hieroglyphs", "Samaritan", "Lisu", "Bamum",
            "Javanese", "Meetei_Mayek", "Imperial_Aramaic",
            "Old_South_Arabian", "Inscriptional_Parthian",
            "Inscriptional_Pahlavi", "Old_Turkic", "Kaithi", "Batak",
            "Brahmi", "Mandaic", "Chakma", "Meroitic_Cursive",
            "Meroitic_Hieroglyphs", "Miao", "Sharada", "Sora_Sompeng",
            "Takri", "Caucasian_Albanian", "Bassa_Vah", "Duployan",
            "Elbasan", "Grantha", "Pahawh_Hmong", "Khojki", "Linear_A",
            "Mahajani", "Manichaean", "Mende_Kikakui", "Modi", "Mro",
            "Old_North_Arabian", "Nabataean", "Palmyrene", "Pau_Cin_Hau",
            "Old_Permic", "Psalter_Pahlavi", "Siddham", "Khudawadi",
            "Tirhuta", "Warang_Citi", "Ahom", "Anatolian_Hieroglyphs",
            "Hatran", "Multani", "Old_Hungarian", "SignWriting", "Adlam",
            "Bhaiksuki", "Marchen", "Newa", "Osage", "Tangut",
            "Masaram_Gondi", "Nushu", "Soyombo", "Zanabazar_Square",
            "Dogra", "Gunjala_Gondi", "Makasar", "Medefaidrin",
            "Hanifi_Rohingya", "Sogdian", "Old_Sogdian", "Elymaic",
            "Nandinagari", "Nyiakeng_Puachue_Hmong", "Wancho", "Chorasmian",
            "Dives_Akuru", "Khitan_Small_Script", "Yezidi",
            "Katakana_Or_Hiragana"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"qaac", SC_ns::Copt}, {"qaai", SC_ns::Zinh}}};
    }

    namespace BC_ns {
        enum value_t {
            L, R, EN, ES, ET, AN, CS, B, S, WS, ON, BN, NSM, AL, LRO, RLO,
            LRE, RLE, PDF, LRI, RLI, FSI, PDI};
        const static std::vector<std::string> enum_names = {
            "L", "R", "EN", "ES", "ET", "AN", "CS", "B", "S", "WS", "ON",
            "BN", "NSM", "AL", "LRO", "RLO", "LRE", "RLE", "PDF", "LRI",
            "RLI", "FSI", "PDI"};
        const static std::vector<std::string> value_names = {
            "Left_To_Right", "Right_To_Left", "European_Number",
            "European_Separator", "European_Terminator", "Arabic_Number",
            "Common_Separator", "Paragraph_Separator", "Segment_Separator",
            "White_Space", "Other_Neutral", "Boundary_Neutral",
            "Nonspacing_Mark", "Arabic_Letter", "Left_To_Right_Override",
            "Right_To_Left_Override", "Left_To_Right_Embedding",
            "Right_To_Left_Embedding", "Pop_Directional_Format",
            "Left_To_Right_Isolate", "Right_To_Left_Isolate",
            "First_Strong_Isolate", "Pop_Directional_Isolate"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace BPT_ns {
        enum value_t {
            n, o, c};
        const static std::vector<std::string> enum_names = {
            "n", "o", "c"};
        const static std::vector<std::string> value_names = {
            "None", "Open", "Close"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace CCC_ns {
        enum value_t {
            NR, OV, HANR, NK, KV, VR, CCC10, CCC11, CCC12, CCC13, CCC14,
            CCC15, CCC16, CCC17, CCC18, CCC19, CCC20, CCC21, CCC22, CCC23,
            CCC24, CCC25, CCC26, CCC27, CCC28, CCC29, CCC30, CCC31, CCC32,
            CCC33, CCC34, CCC35, CCC36, CCC84, CCC91, CCC103, CCC107,
            CCC118, CCC122, CCC129, CCC130, CCC132, ATB, ATA, ATAR, BL, B,
            BR, L, R, AL, A, AR, DB, DA, IS, CCC133, ATBL
        };
        const uint16_t enum_val[] = {
              0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
            84, 91, 103, 107, 118, 122, 129, 130, 132, 202, 214, 216, 218,
            220, 222, 224, 226, 228, 230, 232, 233, 234, 240, 133, 200};
        const static std::vector<std::string> enum_names = {
            "NR", "OV", "HANR", "NK", "KV", "VR", "CCC10", "CCC11", "CCC12",
            "CCC13", "CCC14", "CCC15", "CCC16", "CCC17", "CCC18", "CCC19",
            "CCC20", "CCC21", "CCC22", "CCC23", "CCC24", "CCC25", "CCC26",
            "CCC27", "CCC28", "CCC29", "CCC30", "CCC31", "CCC32", "CCC33",
            "CCC34", "CCC35", "CCC36", "CCC84", "CCC91", "CCC103", "CCC107",
            "CCC118", "CCC122", "CCC129", "CCC130", "CCC132", "ATB", "ATA",
            "ATAR", "BL", "B", "BR", "L", "R", "AL", "A", "AR", "DB", "DA",
            "IS", "CCC133", "ATBL"};
        const static std::vector<std::string> value_names = {
            "Not_Reordered", "Overlay", "Han_Reading", "Nukta",
            "Kana_Voicing", "Virama", "CCC10", "CCC11", "CCC12", "CCC13",
            "CCC14", "CCC15", "CCC16", "CCC17", "CCC18", "CCC19", "CCC20",
            "CCC21", "CCC22", "CCC23", "CCC24", "CCC25", "CCC26", "CCC27",
            "CCC28", "CCC29", "CCC30", "CCC31", "CCC32", "CCC33", "CCC34",
            "CCC35", "CCC36", "CCC84", "CCC91", "CCC103", "CCC107",
            "CCC118", "CCC122", "CCC129", "CCC130", "CCC132",
            "Attached_Below", "Attached_Above", "Attached_Above_Right",
            "Below_Left", "Below", "Below_Right", "Left", "Right",
            "Above_Left", "Above", "Above_Right", "Double_Below",
            "Double_Above", "Iota_Subscript", "CCC133",
            "Attached_Below_Left"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"0", CCC_ns::NR}, {"1", CCC_ns::OV}, {"10", CCC_ns::CCC10},
            {"103", CCC_ns::CCC103}, {"107", CCC_ns::CCC107},
            {"11", CCC_ns::CCC11}, {"118", CCC_ns::CCC118},
            {"12", CCC_ns::CCC12}, {"122", CCC_ns::CCC122},
            {"129", CCC_ns::CCC129}, {"13", CCC_ns::CCC13},
            {"130", CCC_ns::CCC130}, {"132", CCC_ns::CCC132},
            {"133", CCC_ns::CCC133}, {"14", CCC_ns::CCC14},
            {"15", CCC_ns::CCC15}, {"16", CCC_ns::CCC16},
            {"17", CCC_ns::CCC17}, {"18", CCC_ns::CCC18},
            {"19", CCC_ns::CCC19}, {"20", CCC_ns::CCC20},
            {"200", CCC_ns::ATBL}, {"202", CCC_ns::ATB},
            {"21", CCC_ns::CCC21}, {"214", CCC_ns::ATA},
            {"216", CCC_ns::ATAR}, {"218", CCC_ns::BL},
            {"22", CCC_ns::CCC22}, {"220", CCC_ns::B}, {"222", CCC_ns::BR},
            {"224", CCC_ns::L}, {"226", CCC_ns::R}, {"228", CCC_ns::AL},
            {"23", CCC_ns::CCC23}, {"230", CCC_ns::A}, {"232", CCC_ns::AR},
            {"233", CCC_ns::DB}, {"234", CCC_ns::DA}, {"24", CCC_ns::CCC24},
            {"240", CCC_ns::IS}, {"25", CCC_ns::CCC25},
            {"26", CCC_ns::CCC26}, {"27", CCC_ns::CCC27},
            {"28", CCC_ns::CCC28}, {"29", CCC_ns::CCC29},
            {"30", CCC_ns::CCC30}, {"31", CCC_ns::CCC31},
            {"32", CCC_ns::CCC32}, {"33", CCC_ns::CCC33},
            {"34", CCC_ns::CCC34}, {"35", CCC_ns::CCC35},
            {"36", CCC_ns::CCC36}, {"6", CCC_ns::HANR}, {"7", CCC_ns::NK},
            {"8", CCC_ns::KV}, {"84", CCC_ns::CCC84}, {"9", CCC_ns::VR},
            {"91", CCC_ns::CCC91}}};
    }

    namespace DT_ns {
        enum value_t {
            None, Can, Com, Font, Nb, Init, Med, Fin, Iso, Enc, Sup, Sub,
            Vert, Wide, Nar, Sml, Sqr, Fra};
        const static std::vector<std::string> enum_names = {
            "None", "Can", "Com", "Font", "Nb", "Init", "Med", "Fin", "Iso",
            "Enc", "Sup", "Sub", "Vert", "Wide", "Nar", "Sml", "Sqr", "Fra"};
        const static std::vector<std::string> value_names = {
            "None", "Canonical", "Compat", "Font", "Nobreak", "Initial",
            "Medial", "Final", "Isolated", "Circle", "Super", "Sub",
            "Vertical", "Wide", "Narrow", "Small", "Square", "Fraction"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace EA_ns {
        enum value_t {
            N, Na, A, W, H, F};
        const static std::vector<std::string> enum_names = {
            "N", "Na", "A", "W", "H", "F"};
        const static std::vector<std::string> value_names = {
            "Neutral", "Narrow", "Ambiguous", "Wide", "Halfwidth",
            "Fullwidth"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace GC_ns {
        enum value_t {
            Cn, Lu, Ll, Lt, Lm, Lo, Mn, Me, Mc, Nd, Nl, No, Zs, Zl, Zp, Cc,
            Cf, Co, Cs, Pd, Ps, Pe, Pc, Po, Sm, Sc, Sk, So, Pi, Pf, C, L,
            LC, M, N, P, S, Z};
        const static std::vector<std::string> enum_names = {
            "Cn", "Lu", "Ll", "Lt", "Lm", "Lo", "Mn", "Me", "Mc", "Nd",
            "Nl", "No", "Zs", "Zl", "Zp", "Cc", "Cf", "Co", "Cs", "Pd",
            "Ps", "Pe", "Pc", "Po", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "C",
            "L", "LC", "M", "N", "P", "S", "Z"};
        const static std::vector<std::string> value_names = {
            "Unassigned", "Uppercase_Letter", "Lowercase_Letter",
            "Titlecase_Letter", "Modifier_Letter", "Other_Letter",
            "Nonspacing_Mark", "Enclosing_Mark", "Spacing_Mark",
            "Decimal_Number", "Letter_Number", "Other_Number",
            "Space_Separator", "Line_Separator", "Paragraph_Separator",
            "Control", "Format", "Private_Use", "Surrogate",
            "Dash_Punctuation", "Open_Punctuation", "Close_Punctuation",
            "Connector_Punctuation", "Other_Punctuation", "Math_Symbol",
            "Currency_Symbol", "Modifier_Symbol", "Other_Symbol",
            "Initial_Punctuation", "Final_Punctuation", "Other", "Letter",
            "Cased_Letter", "Mark", "Number", "Punctuation", "Symbol",
            "Separator"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"cntrl", GC_ns::Cc}, {"combiningmark", GC_ns::M},
            {"digit", GC_ns::Nd}, {"punct", GC_ns::P}}};
    }

    namespace GCB_ns {
        enum value_t {
            XX, PP, CR, LF, CN, EX, RI, SM, L, V, T, LV, LVT, ZWJ, EB, EBG,
            EM, GAZ};
        const static std::vector<std::string> enum_names = {
            "XX", "PP", "CR", "LF", "CN", "EX", "RI", "SM", "L", "V", "T",
            "LV", "LVT", "ZWJ", "EB", "EBG", "EM", "GAZ"};
        const static std::vector<std::string> value_names = {
            "Other", "Prepend", "CR", "LF", "Control", "Extend",
            "Regional_Indicator", "SpacingMark", "L", "V", "T", "LV", "LVT",
            "ZWJ", "E_Base", "E_Base_GAZ", "E_Modifier", "Glue_After_Zwj"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace HST_ns {
        enum value_t {
            NA, L, V, T, LV, LVT};
        const static std::vector<std::string> enum_names = {
            "NA", "L", "V", "T", "LV", "LVT"};
        const static std::vector<std::string> value_names = {
            "Not_Applicable", "Leading_Jamo", "Vowel_Jamo", "Trailing_Jamo",
            "LV_Syllable", "LVT_Syllable"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace INPC_ns {
        enum value_t {
            NA, Right, Left, Visual_Order_Left, Left_And_Right, Top, Bottom,
            Top_And_Bottom, Top_And_Right, Top_And_Left,
            Top_And_Left_And_Right, Bottom_And_Right, Bottom_And_Left,
            Top_And_Bottom_And_Right, Top_And_Bottom_And_Left, Overstruck};
        const static std::vector<std::string> enum_names = {
            "NA", "Right", "Left", "Visual_Order_Left", "Left_And_Right",
            "Top", "Bottom", "Top_And_Bottom", "Top_And_Right",
            "Top_And_Left", "Top_And_Left_And_Right", "Bottom_And_Right",
            "Bottom_And_Left", "Top_And_Bottom_And_Right",
            "Top_And_Bottom_And_Left", "Overstruck"};
        const static std::vector<std::string> value_names = {
            "NA", "Right", "Left", "Visual_Order_Left", "Left_And_Right",
            "Top", "Bottom", "Top_And_Bottom", "Top_And_Right",
            "Top_And_Left", "Top_And_Left_And_Right", "Bottom_And_Right",
            "Bottom_And_Left", "Top_And_Bottom_And_Right",
            "Top_And_Bottom_And_Left", "Overstruck"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace INSC_ns {
        enum value_t {
            Other, Bindu, Visarga, Avagraha, Nukta, Virama, Pure_Killer,
            Invisible_Stacker, Vowel_Independent, Vowel_Dependent, Vowel,
            Consonant_Placeholder, Consonant, Consonant_Dead,
            Consonant_With_Stacker, Consonant_Prefixed,
            Consonant_Preceding_Repha, Consonant_Initial_Postfixed,
            Consonant_Succeeding_Repha, Consonant_Subjoined,
            Consonant_Medial, Consonant_Final, Consonant_Head_Letter,
            Modifying_Letter, Tone_Letter, Tone_Mark, Gemination_Mark,
            Cantillation_Mark, Register_Shifter, Syllable_Modifier,
            Consonant_Killer, Non_Joiner, Joiner, Number_Joiner, Number,
            Brahmi_Joining_Number};
        const static std::vector<std::string> enum_names = {
            "Other", "Bindu", "Visarga", "Avagraha", "Nukta", "Virama",
            "Pure_Killer", "Invisible_Stacker", "Vowel_Independent",
            "Vowel_Dependent", "Vowel", "Consonant_Placeholder",
            "Consonant", "Consonant_Dead", "Consonant_With_Stacker",
            "Consonant_Prefixed", "Consonant_Preceding_Repha",
            "Consonant_Initial_Postfixed", "Consonant_Succeeding_Repha",
            "Consonant_Subjoined", "Consonant_Medial", "Consonant_Final",
            "Consonant_Head_Letter", "Modifying_Letter", "Tone_Letter",
            "Tone_Mark", "Gemination_Mark", "Cantillation_Mark",
            "Register_Shifter", "Syllable_Modifier", "Consonant_Killer",
            "Non_Joiner", "Joiner", "Number_Joiner", "Number",
            "Brahmi_Joining_Number"};
        const static std::vector<std::string> value_names = {
            "Other", "Bindu", "Visarga", "Avagraha", "Nukta", "Virama",
            "Pure_Killer", "Invisible_Stacker", "Vowel_Independent",
            "Vowel_Dependent", "Vowel", "Consonant_Placeholder",
            "Consonant", "Consonant_Dead", "Consonant_With_Stacker",
            "Consonant_Prefixed", "Consonant_Preceding_Repha",
            "Consonant_Initial_Postfixed", "Consonant_Succeeding_Repha",
            "Consonant_Subjoined", "Consonant_Medial", "Consonant_Final",
            "Consonant_Head_Letter", "Modifying_Letter", "Tone_Letter",
            "Tone_Mark", "Gemination_Mark", "Cantillation_Mark",
            "Register_Shifter", "Syllable_Modifier", "Consonant_Killer",
            "Non_Joiner", "Joiner", "Number_Joiner", "Number",
            "Brahmi_Joining_Number"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace JG_ns {
        enum value_t {
            No_Joining_Group, Ain, Alaph, Alef, Beh, Beth, Dal, Dalath_Rish,
            E, Feh, Final_Semkath, Gaf, Gamal, Hah, Teh_Marbuta_Goal, He,
            Heh, Heh_Goal, Heth, Kaf, Kaph, Knotted_Heh, Lam, Lamadh, Meem,
            Mim, Noon, Nun, Pe, Qaf, Qaph, Reh, Reversed_Pe, Sad, Sadhe,
            Seen, Semkath, Shin, Swash_Kaf, Tah, Taw, Teh_Marbuta, Teth,
            Waw, Syriac_Waw, Yeh, Yeh_Barree, Yeh_With_Tail, Yudh, Yudh_He,
            Zain, Zhain, Khaph, Fe, Burushaski_Yeh_Barree, Farsi_Yeh, Nya,
            Rohingya_Yeh, Straight_Waw, Manichaean_Aleph, Manichaean_Ayin,
            Manichaean_Beth, Manichaean_Daleth, Manichaean_Dhamedh,
            Manichaean_Five, Manichaean_Gimel, Manichaean_Heth,
            Manichaean_Hundred, Manichaean_Kaph, Manichaean_Lamedh,
            Manichaean_Mem, Manichaean_Nun, Manichaean_One, Manichaean_Pe,
            Manichaean_Qoph, Manichaean_Resh, Manichaean_Sadhe,
            Manichaean_Samekh, Manichaean_Taw, Manichaean_Ten,
            Manichaean_Teth, Manichaean_Thamedh, Manichaean_Twenty,
            Manichaean_Waw, Manichaean_Yodh, Manichaean_Zayin, African_Feh,
            African_Qaf, African_Noon, Malayalam_Nga, Malayalam_Ja,
            Malayalam_Nya, Malayalam_Tta, Malayalam_Nna, Malayalam_Nnna,
            Malayalam_Bha, Malayalam_Ra, Malayalam_Lla, Malayalam_Llla,
            Malayalam_Ssa, Hanifi_Rohingya_Pa, Hanifi_Rohingya_Kinna_Ya};
        const static std::vector<std::string> enum_names = {
            "No_Joining_Group", "Ain", "Alaph", "Alef", "Beh", "Beth",
            "Dal", "Dalath_Rish", "E", "Feh", "Final_Semkath", "Gaf",
            "Gamal", "Hah", "Teh_Marbuta_Goal", "He", "Heh", "Heh_Goal",
            "Heth", "Kaf", "Kaph", "Knotted_Heh", "Lam", "Lamadh", "Meem",
            "Mim", "Noon", "Nun", "Pe", "Qaf", "Qaph", "Reh", "Reversed_Pe",
            "Sad", "Sadhe", "Seen", "Semkath", "Shin", "Swash_Kaf", "Tah",
            "Taw", "Teh_Marbuta", "Teth", "Waw", "Syriac_Waw", "Yeh",
            "Yeh_Barree", "Yeh_With_Tail", "Yudh", "Yudh_He", "Zain",
            "Zhain", "Khaph", "Fe", "Burushaski_Yeh_Barree", "Farsi_Yeh",
            "Nya", "Rohingya_Yeh", "Straight_Waw", "Manichaean_Aleph",
            "Manichaean_Ayin", "Manichaean_Beth", "Manichaean_Daleth",
            "Manichaean_Dhamedh", "Manichaean_Five", "Manichaean_Gimel",
            "Manichaean_Heth", "Manichaean_Hundred", "Manichaean_Kaph",
            "Manichaean_Lamedh", "Manichaean_Mem", "Manichaean_Nun",
            "Manichaean_One", "Manichaean_Pe", "Manichaean_Qoph",
            "Manichaean_Resh", "Manichaean_Sadhe", "Manichaean_Samekh",
            "Manichaean_Taw", "Manichaean_Ten", "Manichaean_Teth",
            "Manichaean_Thamedh", "Manichaean_Twenty", "Manichaean_Waw",
            "Manichaean_Yodh", "Manichaean_Zayin", "African_Feh",
            "African_Qaf", "African_Noon", "Malayalam_Nga", "Malayalam_Ja",
            "Malayalam_Nya", "Malayalam_Tta", "Malayalam_Nna",
            "Malayalam_Nnna", "Malayalam_Bha", "Malayalam_Ra",
            "Malayalam_Lla", "Malayalam_Llla", "Malayalam_Ssa",
            "Hanifi_Rohingya_Pa", "Hanifi_Rohingya_Kinna_Ya"};
        const static std::vector<std::string> value_names = {
            "No_Joining_Group", "Ain", "Alaph", "Alef", "Beh", "Beth",
            "Dal", "Dalath_Rish", "E", "Feh", "Final_Semkath", "Gaf",
            "Gamal", "Hah", "Hamza_On_Heh_Goal", "He", "Heh", "Heh_Goal",
            "Heth", "Kaf", "Kaph", "Knotted_Heh", "Lam", "Lamadh", "Meem",
            "Mim", "Noon", "Nun", "Pe", "Qaf", "Qaph", "Reh", "Reversed_Pe",
            "Sad", "Sadhe", "Seen", "Semkath", "Shin", "Swash_Kaf", "Tah",
            "Taw", "Teh_Marbuta", "Teth", "Waw", "Syriac_Waw", "Yeh",
            "Yeh_Barree", "Yeh_With_Tail", "Yudh", "Yudh_He", "Zain",
            "Zhain", "Khaph", "Fe", "Burushaski_Yeh_Barree", "Farsi_Yeh",
            "Nya", "Rohingya_Yeh", "Straight_Waw", "Manichaean_Aleph",
            "Manichaean_Ayin", "Manichaean_Beth", "Manichaean_Daleth",
            "Manichaean_Dhamedh", "Manichaean_Five", "Manichaean_Gimel",
            "Manichaean_Heth", "Manichaean_Hundred", "Manichaean_Kaph",
            "Manichaean_Lamedh", "Manichaean_Mem", "Manichaean_Nun",
            "Manichaean_One", "Manichaean_Pe", "Manichaean_Qoph",
            "Manichaean_Resh", "Manichaean_Sadhe", "Manichaean_Samekh",
            "Manichaean_Taw", "Manichaean_Ten", "Manichaean_Teth",
            "Manichaean_Thamedh", "Manichaean_Twenty", "Manichaean_Waw",
            "Manichaean_Yodh", "Manichaean_Zayin", "African_Feh",
            "African_Qaf", "African_Noon", "Malayalam_Nga", "Malayalam_Ja",
            "Malayalam_Nya", "Malayalam_Tta", "Malayalam_Nna",
            "Malayalam_Nnna", "Malayalam_Bha", "Malayalam_Ra",
            "Malayalam_Lla", "Malayalam_Llla", "Malayalam_Ssa",
            "Hanifi_Rohingya_Pa", "Hanifi_Rohingya_Kinna_Ya"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace JT_ns {
        enum value_t {
            U, C, D, R, L, T};
        const static std::vector<std::string> enum_names = {
            "U", "C", "D", "R", "L", "T"};
        const static std::vector<std::string> value_names = {
            "Non_Joining", "Join_Causing", "Dual_Joining", "Right_Joining",
            "Left_Joining", "Transparent"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace LB_ns {
        enum value_t {
            XX, CM, BA, LF, BK, CR, SP, EX, QU, AL, PR, PO, OP, CP, IS, HY,
            SY, NU, CL, NL, GL, AI, BB, HL, SA, JL, JV, JT, NS, ZW, ZWJ, B2,
            IN, WJ, ID, EB, CJ, H2, H3, SG, CB, RI, EM};
        const static std::vector<std::string> enum_names = {
            "XX", "CM", "BA", "LF", "BK", "CR", "SP", "EX", "QU", "AL",
            "PR", "PO", "OP", "CP", "IS", "HY", "SY", "NU", "CL", "NL",
            "GL", "AI", "BB", "HL", "SA", "JL", "JV", "JT", "NS", "ZW",
            "ZWJ", "B2", "IN", "WJ", "ID", "EB", "CJ", "H2", "H3", "SG",
            "CB", "RI", "EM"};
        const static std::vector<std::string> value_names = {
            "Unknown", "Combining_Mark", "Break_After", "Line_Feed",
            "Mandatory_Break", "Carriage_Return", "Space", "Exclamation",
            "Quotation", "Alphabetic", "Prefix_Numeric", "Postfix_Numeric",
            "Open_Punctuation", "Close_Parenthesis", "Infix_Numeric",
            "Hyphen", "Break_Symbols", "Numeric", "Close_Punctuation",
            "Next_Line", "Glue", "Ambiguous", "Break_Before",
            "Hebrew_Letter", "Complex_Context", "JL", "JV", "JT",
            "Nonstarter", "ZWSpace", "ZWJ", "Break_Both", "Inseparable",
            "Word_Joiner", "Ideographic", "E_Base",
            "Conditional_Japanese_Starter", "H2", "H3", "Surrogate",
            "Contingent_Break", "Regional_Indicator", "E_Modifier"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"inseperable", LB_ns::IN}}};
    }

    namespace NFC_QC_ns {
        enum value_t {
            Y, N, M};
        const static std::vector<std::string> enum_names = {
            "Y", "N", "M"};
        const static std::vector<std::string> value_names = {
            "Yes", "No", "Maybe"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NFD_QC_ns {
        enum value_t {
            Y, N};
        const static std::vector<std::string> enum_names = {
            "Y", "N"};
        const static std::vector<std::string> value_names = {
            "Yes", "No"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NFKC_QC_ns {
        enum value_t {
            Y, N, M};
        const static std::vector<std::string> enum_names = {
            "Y", "N", "M"};
        const static std::vector<std::string> value_names = {
            "Yes", "No", "Maybe"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NFKD_QC_ns {
        enum value_t {
            Y, N};
        const static std::vector<std::string> enum_names = {
            "Y", "N"};
        const static std::vector<std::string> value_names = {
            "Yes", "No"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NT_ns {
        enum value_t {
            None, Nu, Di, De};
        const static std::vector<std::string> enum_names = {
            "None", "Nu", "Di", "De"};
        const static std::vector<std::string> value_names = {
            "None", "Numeric", "Digit", "Decimal"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace SB_ns {
        enum value_t {
            XX, CR, LF, EX, SE, FO, SP, LO, UP, LE, NU, AT, ST, CL, SC};
        const static std::vector<std::string> enum_names = {
            "XX", "CR", "LF", "EX", "SE", "FO", "SP", "LO", "UP", "LE",
            "NU", "AT", "ST", "CL", "SC"};
        const static std::vector<std::string> value_names = {
            "Other", "CR", "LF", "Extend", "Sep", "Format", "Sp", "Lower",
            "Upper", "OLetter", "Numeric", "ATerm", "STerm", "Close",
            "SContinue"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace VO_ns {
        enum value_t {
            R, U, Tr, Tu};
        const static std::vector<std::string> enum_names = {
            "R", "U", "Tr", "Tu"};
        const static std::vector<std::string> value_names = {
            "Rotated", "Upright", "Transformed_Rotated",
            "Transformed_Upright"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace WB_ns {
        enum value_t {
            XX, DQ, SQ, HL, CR, LF, NL, Extend, RI, FO, KA, LE, ML, MN, MB,
            NU, EX, ZWJ, WSegSpace, EB, EBG, EM, GAZ};
        const static std::vector<std::string> enum_names = {
            "XX", "DQ", "SQ", "HL", "CR", "LF", "NL", "Extend", "RI", "FO",
            "KA", "LE", "ML", "MN", "MB", "NU", "EX", "ZWJ", "WSegSpace",
            "EB", "EBG", "EM", "GAZ"};
        const static std::vector<std::string> value_names = {
            "Other", "Double_Quote", "Single_Quote", "Hebrew_Letter", "CR",
            "LF", "Newline", "Extend", "Regional_Indicator", "Format",
            "Katakana", "ALetter", "MidLetter", "MidNum", "MidNumLet",
            "Numeric", "ExtendNumLet", "ZWJ", "WSegSpace", "E_Base",
            "E_Base_GAZ", "E_Modifier", "Glue_After_Zwj"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }
}

#endif
