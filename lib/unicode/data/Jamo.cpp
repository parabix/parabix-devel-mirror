
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  Jamo
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
    namespace JSN_ns {
        /** Code Point Ranges for JSN mapping to <none>
        [0000, 10ff], [110b, 110b], [1113, 1160], [1176, 11a7],
        [11c3, 10ffff]**/

        
        namespace {
        const static UnicodeSet::run_t __null_codepoint_set_runs[] = {
        {Full, 136}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 1},
        {Mixed, 2}, {Full, 34673}};
        const static UnicodeSet::bitquad_t  __null_codepoint_set_quads[] = {
        0xfff80800, 0xffc00001, 0x000000ff, 0xfffffff8};
        }

        const static UnicodeSet null_codepoint_set{const_cast<UnicodeSet::run_t *>(__null_codepoint_set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__null_codepoint_set_quads), 4, 0};



        /** Code Point Ranges for JSN mapping to <codepoint>
        **/

        
        namespace {
        const static UnicodeSet::run_t __reflexive_set_runs[] = {
        {Empty, 34816}};
        const static UnicodeSet::bitquad_t * const __reflexive_set_quads = nullptr;
        }

        const static UnicodeSet reflexive_set{const_cast<UnicodeSet::run_t *>(__reflexive_set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__reflexive_set_quads), 0, 0};



        const static std::vector<unsigned> buffer_offsets = {
        0, 2, 5, 7, 9, 12, 14, 16, 18, 21, 23, 26, 28, 31, 33, 35, 37, 39,
        41, 43, 46, 49, 53, 56, 58, 62, 65, 67, 70, 74, 77, 80, 82, 86, 89,
        92, 95, 98, 101, 103, 105, 108, 111, 113, 116, 119, 121, 123, 126,
        129, 132, 135, 138, 141, 144, 146, 148, 151, 153, 156, 159, 161,
        163, 165, 167, 169, 171};
        const static char string_buffer alignas(64) [256] = u8R"__(G
GG
N
D
DD
R
M
B
BB
S
SS
J
JJ
C
K
T
P
H
A
AE
YA
YAE
EO
E
YEO
YE
O
WA
WAE
OE
YO
U
WEO
WE
WI
YU
EU
YI
I
G
GG
GS
N
NJ
NH
D
L
LG
LM
LB
LS
LT
LP
LH
M
B
BS
S
SS
NG
J
C
K
T
P
H
)__";

        const static std::vector<codepoint_t> defined_cps{
        0x1100, 0x1101, 0x1102, 0x1103, 0x1104, 0x1105, 0x1106, 0x1107,
        0x1108, 0x1109, 0x110a, 0x110c, 0x110d, 0x110e, 0x110f, 0x1110,
        0x1111, 0x1112, 0x1161, 0x1162, 0x1163, 0x1164, 0x1165, 0x1166,
        0x1167, 0x1168, 0x1169, 0x116a, 0x116b, 0x116c, 0x116d, 0x116e,
        0x116f, 0x1170, 0x1171, 0x1172, 0x1173, 0x1174, 0x1175, 0x11a8,
        0x11a9, 0x11aa, 0x11ab, 0x11ac, 0x11ad, 0x11ae, 0x11af, 0x11b0,
        0x11b1, 0x11b2, 0x11b3, 0x11b4, 0x11b5, 0x11b6, 0x11b7, 0x11b8,
        0x11b9, 0x11ba, 0x11bb, 0x11bc, 0x11bd, 0x11be, 0x11bf, 0x11c0,
        0x11c1, 0x11c2};
        static StringPropertyObject property_object(JSN,
                                                    std::move(null_codepoint_set),
                                                    std::move(reflexive_set),
                                                    static_cast<const char *>(string_buffer),
                                                    std::move(buffer_offsets),
                                                    std::move(defined_cps));
    }
PropertyObject * get_JSN_PropertyObject() {  return & JSN_ns::property_object; }
}
