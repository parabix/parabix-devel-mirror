
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  BidiMirroring
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
    namespace BMG_ns {
        /** Code Point Ranges for bmg mapping to <none>
        [0000, 0027], [002a, 003b], [003d, 003d], [003f, 005a],
        [005c, 005c], [005e, 007a], [007c, 007c], [007e, 00aa],
        [00ac, 00ba], [00bc, 0f39], [0f3e, 169a], [169d, 2038],
        [203b, 2044], [2047, 207c], [207f, 208c], [208f, 2207],
        [220e, 2214], [2216, 221e], [2223, 2223], [2225, 223b],
        [223e, 2242], [2244, 2244], [2246, 224b], [224d, 2251],
        [2256, 2263], [226c, 226d], [228c, 228e], [2293, 2297],
        [2299, 22a1], [22a4, 22a5], [22a7, 22a7], [22aa, 22aa],
        [22ac, 22af], [22b9, 22c8], [22ce, 22cf], [22d2, 22d5],
        [22ee, 22ef], [22f5, 22f5], [22f8, 22f9], [22ff, 2307],
        [230c, 2328], [232b, 2767], [2776, 27c2], [27c7, 27c7],
        [27ca, 27ca], [27cc, 27cc], [27ce, 27d4], [27d7, 27db],
        [27df, 27e1], [27f0, 2982], [2999, 299a], [299c, 299f],
        [29a1, 29a2], [29a6, 29a7], [29b0, 29b7], [29b9, 29bf],
        [29c2, 29c3], [29c6, 29ce], [29d3, 29d3], [29d6, 29d7],
        [29dc, 29e7], [29ea, 29f4], [29f6, 29f7], [29fa, 29fb],
        [29fe, 2a2a], [2a2f, 2a33], [2a36, 2a3b], [2a3e, 2a63],
        [2a66, 2a78], [2aa3, 2aa5], [2aae, 2aae], [2ad7, 2add],
        [2adf, 2ae2], [2ae6, 2aeb], [2aef, 2af6], [2afb, 2bfd],
        [2bff, 2e01], [2e06, 2e08], [2e0b, 2e0b], [2e0e, 2e1b],
        [2e1e, 2e1f], [2e2a, 3007], [3012, 3013], [301c, fe58],
        [fe5f, fe63], [fe66, ff07], [ff0a, ff1b], [ff1d, ff1d],
        [ff1f, ff3a], [ff3c, ff3c], [ff3e, ff5a], [ff5c, ff5c],
        [ff5e, ff5e], [ff61, ff61], [ff64, 10ffff]**/

        
        namespace {
        const static UnicodeSet::run_t __null_codepoint_set_runs[] = {
        {Full, 1}, {Mixed, 3}, {Full, 1}, {Mixed, 1}, {Full, 115},
        {Mixed, 1}, {Full, 58}, {Mixed, 1}, {Full, 76}, {Mixed, 4},
        {Full, 11}, {Mixed, 10}, {Full, 33}, {Mixed, 1}, {Full, 2},
        {Mixed, 2}, {Full, 12}, {Mixed, 4}, {Full, 1}, {Mixed, 1},
        {Full, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Full, 7},
        {Mixed, 1}, {Full, 16}, {Mixed, 2}, {Full, 14}, {Mixed, 1},
        {Full, 1649}, {Mixed, 2}, {Full, 4}, {Mixed, 4}, {Full, 32772}};
        const static UnicodeSet::bitquad_t  __null_codepoint_set_quads[] = {
        0xaffffcff, 0xd7ffffff, 0xd7ffffff, 0xf7fff7ff, 0xc3ffffff,
        0xe7ffffff, 0xf9ffffff, 0xffffff9f, 0x9fffffff, 0xffff9fff,
        0x7fdfc0ff, 0xcfffffe8, 0xffc3efd7, 0x0000300f, 0xfef87000,
        0xfe00f4b3, 0x003cc1ff, 0x8320c000, 0xfffff0ff, 0xfffff9ff,
        0xffc000ff, 0x8f9fd487, 0xffff0003, 0xf6000007, 0xfeff00c6,
        0xf0c87fcc, 0xccdffcff, 0xcfcf87ff, 0x01ffffcf, 0x00004038,
        0xbf800000, 0xf87f8fc7, 0xbfffffff, 0xcfffc9c3, 0xfffffc00,
        0xf00c00ff, 0x81ffffff, 0xffffffcf, 0xaffffcff, 0xd7ffffff,
        0x57ffffff, 0xfffffff2};
        }

        const static UnicodeSet null_codepoint_set{const_cast<UnicodeSet::run_t *>(__null_codepoint_set_runs), 35, 0, const_cast<UnicodeSet::bitquad_t *>(__null_codepoint_set_quads), 42, 0};



        /** Code Point Ranges for bmg mapping to <codepoint>
        **/

        
        namespace {
        const static UnicodeSet::run_t __reflexive_set_runs[] = {
        {Empty, 34816}};
        const static UnicodeSet::bitquad_t * const __reflexive_set_quads = nullptr;
        }

        const static UnicodeSet reflexive_set{const_cast<UnicodeSet::run_t *>(__reflexive_set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__reflexive_set_quads), 0, 0};



        const static std::vector<unsigned> buffer_offsets = {
        0, 2, 4, 6, 8, 10, 12, 14, 16, 19, 22, 26, 30, 34, 38, 42, 46, 50,
        54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114,
        118, 122, 126, 130, 134, 138, 142, 146, 150, 154, 158, 162, 166,
        170, 174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214, 218,
        222, 226, 230, 234, 238, 242, 246, 250, 254, 258, 262, 266, 270,
        274, 278, 282, 286, 290, 294, 298, 302, 306, 310, 314, 318, 322,
        326, 330, 334, 338, 342, 346, 350, 354, 358, 362, 366, 370, 374,
        378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426,
        430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478,
        482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530,
        534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582,
        586, 590, 594, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634,
        638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 682, 686,
        690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 730, 734, 738,
        742, 746, 750, 754, 758, 762, 766, 770, 774, 778, 782, 786, 790,
        794, 798, 802, 806, 810, 814, 818, 822, 826, 830, 834, 838, 842,
        846, 850, 854, 858, 862, 866, 870, 874, 878, 882, 886, 890, 894,
        898, 902, 906, 910, 914, 918, 922, 926, 930, 934, 938, 942, 946,
        950, 954, 958, 962, 966, 970, 974, 978, 982, 986, 990, 994, 998,
        1002, 1006, 1010, 1014, 1018, 1022, 1026, 1030, 1034, 1038, 1042,
        1046, 1050, 1054, 1058, 1062, 1066, 1070, 1074, 1078, 1082, 1086,
        1090, 1094, 1098, 1102, 1106, 1110, 1114, 1118, 1122, 1126, 1130,
        1134, 1138, 1142, 1146, 1150, 1154, 1158, 1162, 1166, 1170, 1174,
        1178, 1182, 1186, 1190, 1194, 1198, 1202, 1206, 1210, 1214, 1218,
        1222, 1226, 1230, 1234, 1238, 1242, 1246, 1250, 1254, 1258, 1262,
        1266, 1270, 1274, 1278, 1282, 1286, 1290, 1294, 1298, 1302, 1306,
        1310, 1314, 1318, 1322, 1326, 1330, 1334, 1338, 1342, 1346, 1350,
        1354, 1358, 1362, 1366, 1370, 1374, 1378, 1382, 1386, 1390, 1394,
        1398, 1402, 1406, 1410, 1414, 1418, 1422, 1426, 1430, 1434, 1438,
        1442, 1446, 1450, 1454, 1458, 1462, 1466, 1470, 1474, 1478, 1482,
        1486, 1490, 1494, 1498, 1502, 1506, 1510, 1514, 1518, 1522, 1526,
        1530, 1534, 1538, 1542, 1546, 1550, 1554, 1558, 1562, 1566, 1570,
        1574, 1578, 1582, 1586, 1590, 1594, 1598, 1602, 1606, 1610, 1614,
        1618, 1622, 1626, 1630, 1634, 1638, 1642, 1646, 1650, 1654, 1658,
        1662};
        const static char string_buffer alignas(64) [1792] = u8R"__()
(
>
<
]
[
}
{
»
«
༻
༺
༽
༼
᚜
᚛
›
‹
⁆
⁅
⁾
⁽
₎
₍
∋
∌
∍
∈
∉
∊
⧵
⯾
⦣
⦛
⦠
⫮
∽
∼
⋍
≌
≅
≓
≒
≕
≔
≥
≤
≧
≦
≩
≨
≫
≪
≯
≮
≱
≰
≳
≲
≵
≴
≷
≶
≹
≸
≻
≺
≽
≼
≿
≾
⊁
⊀
⊃
⊂
⊅
⊄
⊇
⊆
⊉
⊈
⊋
⊊
⊐
⊏
⊒
⊑
⦸
⊣
⊢
⫞
⫤
⫣
⫥
⊱
⊰
⊳
⊲
⊵
⊴
⊷
⊶
⟜
⋊
⋉
⋌
⋋
≃
⋑
⋐
⋗
⋖
⋙
⋘
⋛
⋚
⋝
⋜
⋟
⋞
⋡
⋠
⋣
⋢
⋥
⋤
⋧
⋦
⋩
⋨
⋫
⋪
⋭
⋬
⋱
⋰
⋺
⋻
⋼
⋽
⋾
⋲
⋳
⋴
⋶
⋷
⌉
⌈
⌋
⌊
〉
〈
❩
❨
❫
❪
❭
❬
❯
❮
❱
❰
❳
❲
❵
❴
⟄
⟃
⟆
⟅
⟉
⟈
⟍
⟋
⟖
⟕
⊸
⟞
⟝
⟣
⟢
⟥
⟤
⟧
⟦
⟩
⟨
⟫
⟪
⟭
⟬
⟯
⟮
⦄
⦃
⦆
⦅
⦈
⦇
⦊
⦉
⦌
⦋
⦐
⦏
⦎
⦍
⦒
⦑
⦔
⦓
⦖
⦕
⦘
⦗
∡
∢
∠
⦥
⦤
⦩
⦨
⦫
⦪
⦭
⦬
⦯
⦮
⊘
⧁
⧀
⧅
⧄
⧐
⧏
⧒
⧑
⧕
⧔
⧙
⧘
⧛
⧚
⧩
⧨
∕
⧹
⧸
⧽
⧼
⨬
⨫
⨮
⨭
⨵
⨴
⨽
⨼
⩥
⩤
⩺
⩹
⩼
⩻
⩾
⩽
⪀
⩿
⪂
⪁
⪄
⪃
⪆
⪅
⪈
⪇
⪊
⪉
⪌
⪋
⪎
⪍
⪐
⪏
⪒
⪑
⪔
⪓
⪖
⪕
⪘
⪗
⪚
⪙
⪜
⪛
⪞
⪝
⪠
⪟
⪢
⪡
⪧
⪦
⪩
⪨
⪫
⪪
⪭
⪬
⪰
⪯
⪲
⪱
⪴
⪳
⪶
⪵
⪸
⪷
⪺
⪹
⪼
⪻
⪾
⪽
⫀
⪿
⫂
⫁
⫄
⫃
⫆
⫅
⫈
⫇
⫊
⫉
⫌
⫋
⫎
⫍
⫐
⫏
⫒
⫑
⫔
⫓
⫖
⫕
⊦
⊩
⊨
⊫
⫭
⫬
∤
⫸
⫷
⫺
⫹
∟
⸃
⸂
⸅
⸄
⸊
⸉
⸍
⸌
⸝
⸜
⸡
⸠
⸣
⸢
⸥
⸤
⸧
⸦
⸩
⸨
〉
〈
》
《
」
「
』
『
】
【
〕
〔
〗
〖
〙
〘
〛
〚
﹚
﹙
﹜
﹛
﹞
﹝
﹥
﹤
）
（
＞
＜
］
［
｝
｛
｠
｟
｣
｢
)__";

        const static std::vector<codepoint_t> defined_cps{
        0x0028, 0x0029, 0x003c, 0x003e, 0x005b, 0x005d, 0x007b, 0x007d,
        0x00ab, 0x00bb, 0x0f3a, 0x0f3b, 0x0f3c, 0x0f3d, 0x169b, 0x169c,
        0x2039, 0x203a, 0x2045, 0x2046, 0x207d, 0x207e, 0x208d, 0x208e,
        0x2208, 0x2209, 0x220a, 0x220b, 0x220c, 0x220d, 0x2215, 0x221f,
        0x2220, 0x2221, 0x2222, 0x2224, 0x223c, 0x223d, 0x2243, 0x2245,
        0x224c, 0x2252, 0x2253, 0x2254, 0x2255, 0x2264, 0x2265, 0x2266,
        0x2267, 0x2268, 0x2269, 0x226a, 0x226b, 0x226e, 0x226f, 0x2270,
        0x2271, 0x2272, 0x2273, 0x2274, 0x2275, 0x2276, 0x2277, 0x2278,
        0x2279, 0x227a, 0x227b, 0x227c, 0x227d, 0x227e, 0x227f, 0x2280,
        0x2281, 0x2282, 0x2283, 0x2284, 0x2285, 0x2286, 0x2287, 0x2288,
        0x2289, 0x228a, 0x228b, 0x228f, 0x2290, 0x2291, 0x2292, 0x2298,
        0x22a2, 0x22a3, 0x22a6, 0x22a8, 0x22a9, 0x22ab, 0x22b0, 0x22b1,
        0x22b2, 0x22b3, 0x22b4, 0x22b5, 0x22b6, 0x22b7, 0x22b8, 0x22c9,
        0x22ca, 0x22cb, 0x22cc, 0x22cd, 0x22d0, 0x22d1, 0x22d6, 0x22d7,
        0x22d8, 0x22d9, 0x22da, 0x22db, 0x22dc, 0x22dd, 0x22de, 0x22df,
        0x22e0, 0x22e1, 0x22e2, 0x22e3, 0x22e4, 0x22e5, 0x22e6, 0x22e7,
        0x22e8, 0x22e9, 0x22ea, 0x22eb, 0x22ec, 0x22ed, 0x22f0, 0x22f1,
        0x22f2, 0x22f3, 0x22f4, 0x22f6, 0x22f7, 0x22fa, 0x22fb, 0x22fc,
        0x22fd, 0x22fe, 0x2308, 0x2309, 0x230a, 0x230b, 0x2329, 0x232a,
        0x2768, 0x2769, 0x276a, 0x276b, 0x276c, 0x276d, 0x276e, 0x276f,
        0x2770, 0x2771, 0x2772, 0x2773, 0x2774, 0x2775, 0x27c3, 0x27c4,
        0x27c5, 0x27c6, 0x27c8, 0x27c9, 0x27cb, 0x27cd, 0x27d5, 0x27d6,
        0x27dc, 0x27dd, 0x27de, 0x27e2, 0x27e3, 0x27e4, 0x27e5, 0x27e6,
        0x27e7, 0x27e8, 0x27e9, 0x27ea, 0x27eb, 0x27ec, 0x27ed, 0x27ee,
        0x27ef, 0x2983, 0x2984, 0x2985, 0x2986, 0x2987, 0x2988, 0x2989,
        0x298a, 0x298b, 0x298c, 0x298d, 0x298e, 0x298f, 0x2990, 0x2991,
        0x2992, 0x2993, 0x2994, 0x2995, 0x2996, 0x2997, 0x2998, 0x299b,
        0x29a0, 0x29a3, 0x29a4, 0x29a5, 0x29a8, 0x29a9, 0x29aa, 0x29ab,
        0x29ac, 0x29ad, 0x29ae, 0x29af, 0x29b8, 0x29c0, 0x29c1, 0x29c4,
        0x29c5, 0x29cf, 0x29d0, 0x29d1, 0x29d2, 0x29d4, 0x29d5, 0x29d8,
        0x29d9, 0x29da, 0x29db, 0x29e8, 0x29e9, 0x29f5, 0x29f8, 0x29f9,
        0x29fc, 0x29fd, 0x2a2b, 0x2a2c, 0x2a2d, 0x2a2e, 0x2a34, 0x2a35,
        0x2a3c, 0x2a3d, 0x2a64, 0x2a65, 0x2a79, 0x2a7a, 0x2a7b, 0x2a7c,
        0x2a7d, 0x2a7e, 0x2a7f, 0x2a80, 0x2a81, 0x2a82, 0x2a83, 0x2a84,
        0x2a85, 0x2a86, 0x2a87, 0x2a88, 0x2a89, 0x2a8a, 0x2a8b, 0x2a8c,
        0x2a8d, 0x2a8e, 0x2a8f, 0x2a90, 0x2a91, 0x2a92, 0x2a93, 0x2a94,
        0x2a95, 0x2a96, 0x2a97, 0x2a98, 0x2a99, 0x2a9a, 0x2a9b, 0x2a9c,
        0x2a9d, 0x2a9e, 0x2a9f, 0x2aa0, 0x2aa1, 0x2aa2, 0x2aa6, 0x2aa7,
        0x2aa8, 0x2aa9, 0x2aaa, 0x2aab, 0x2aac, 0x2aad, 0x2aaf, 0x2ab0,
        0x2ab1, 0x2ab2, 0x2ab3, 0x2ab4, 0x2ab5, 0x2ab6, 0x2ab7, 0x2ab8,
        0x2ab9, 0x2aba, 0x2abb, 0x2abc, 0x2abd, 0x2abe, 0x2abf, 0x2ac0,
        0x2ac1, 0x2ac2, 0x2ac3, 0x2ac4, 0x2ac5, 0x2ac6, 0x2ac7, 0x2ac8,
        0x2ac9, 0x2aca, 0x2acb, 0x2acc, 0x2acd, 0x2ace, 0x2acf, 0x2ad0,
        0x2ad1, 0x2ad2, 0x2ad3, 0x2ad4, 0x2ad5, 0x2ad6, 0x2ade, 0x2ae3,
        0x2ae4, 0x2ae5, 0x2aec, 0x2aed, 0x2aee, 0x2af7, 0x2af8, 0x2af9,
        0x2afa, 0x2bfe, 0x2e02, 0x2e03, 0x2e04, 0x2e05, 0x2e09, 0x2e0a,
        0x2e0c, 0x2e0d, 0x2e1c, 0x2e1d, 0x2e20, 0x2e21, 0x2e22, 0x2e23,
        0x2e24, 0x2e25, 0x2e26, 0x2e27, 0x2e28, 0x2e29, 0x3008, 0x3009,
        0x300a, 0x300b, 0x300c, 0x300d, 0x300e, 0x300f, 0x3010, 0x3011,
        0x3014, 0x3015, 0x3016, 0x3017, 0x3018, 0x3019, 0x301a, 0x301b,
        0xfe59, 0xfe5a, 0xfe5b, 0xfe5c, 0xfe5d, 0xfe5e, 0xfe64, 0xfe65,
        0xff08, 0xff09, 0xff1c, 0xff1e, 0xff3b, 0xff3d, 0xff5b, 0xff5d,
        0xff5f, 0xff60, 0xff62, 0xff63};
        static StringPropertyObject property_object(bmg,
                                                    std::move(null_codepoint_set),
                                                    std::move(reflexive_set),
                                                    static_cast<const char *>(string_buffer),
                                                    std::move(buffer_offsets),
                                                    std::move(defined_cps));
    }
PropertyObject * get_BMG_PropertyObject() {  return & BMG_ns::property_object; }
}
