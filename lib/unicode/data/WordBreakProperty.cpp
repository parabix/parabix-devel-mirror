
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  WordBreakProperty
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
  namespace WB_ns {
    const unsigned independent_prop_values = 19;
    /** Code Point Ranges for XX
    [0000, 0009], [000e, 001f], [0021, 0021], [0023, 0026], [0028, 002b],
    [002d, 002d], [002f, 002f], [003c, 0040], [005b, 005e], [0060, 0060],
    [007b, 0084], [0086, 00a9], [00ab, 00ac], [00ae, 00b4], [00b6, 00b6],
    [00b8, 00b9], [00bb, 00bf], [00d7, 00d7], [00f7, 00f7], [02d8, 02dd],
    [0375, 0375], [0378, 0379], [0380, 0385], [038b, 038b], [038d, 038d],
    [03a2, 03a2], [03f6, 03f6], [0482, 0482], [0530, 0530], [0557, 0558],
    [055d, 055d], [058b, 0590], [05be, 05be], [05c0, 05c0], [05c3, 05c3],
    [05c6, 05c6], [05c8, 05cf], [05eb, 05ee], [05f5, 05ff], [0606, 060b],
    [060e, 060f], [061b, 061b], [061d, 061f], [066a, 066a], [066d, 066d],
    [06d4, 06d4], [06de, 06de], [06e9, 06e9], [06fd, 06fe], [0700, 070e],
    [074b, 074c], [07b2, 07bf], [07f6, 07f7], [07f9, 07f9], [07fb, 07fc],
    [07fe, 07ff], [082e, 083f], [085c, 085f], [086b, 089f], [08b5, 08b5],
    [08c8, 08d2], [0964, 0965], [0970, 0970], [0984, 0984], [098d, 098e],
    [0991, 0992], [09a9, 09a9], [09b1, 09b1], [09b3, 09b5], [09ba, 09bb],
    [09c5, 09c6], [09c9, 09ca], [09cf, 09d6], [09d8, 09db], [09de, 09de],
    [09e4, 09e5], [09f2, 09fb], [09fd, 09fd], [09ff, 0a00], [0a04, 0a04],
    [0a0b, 0a0e], [0a11, 0a12], [0a29, 0a29], [0a31, 0a31], [0a34, 0a34],
    [0a37, 0a37], [0a3a, 0a3b], [0a3d, 0a3d], [0a43, 0a46], [0a49, 0a4a],
    [0a4e, 0a50], [0a52, 0a58], [0a5d, 0a5d], [0a5f, 0a65], [0a76, 0a80],
    [0a84, 0a84], [0a8e, 0a8e], [0a92, 0a92], [0aa9, 0aa9], [0ab1, 0ab1],
    [0ab4, 0ab4], [0aba, 0abb], [0ac6, 0ac6], [0aca, 0aca], [0ace, 0acf],
    [0ad1, 0adf], [0ae4, 0ae5], [0af0, 0af8], [0b00, 0b00], [0b04, 0b04],
    [0b0d, 0b0e], [0b11, 0b12], [0b29, 0b29], [0b31, 0b31], [0b34, 0b34],
    [0b3a, 0b3b], [0b45, 0b46], [0b49, 0b4a], [0b4e, 0b54], [0b58, 0b5b],
    [0b5e, 0b5e], [0b64, 0b65], [0b70, 0b70], [0b72, 0b81], [0b84, 0b84],
    [0b8b, 0b8d], [0b91, 0b91], [0b96, 0b98], [0b9b, 0b9b], [0b9d, 0b9d],
    [0ba0, 0ba2], [0ba5, 0ba7], [0bab, 0bad], [0bba, 0bbd], [0bc3, 0bc5],
    [0bc9, 0bc9], [0bce, 0bcf], [0bd1, 0bd6], [0bd8, 0be5], [0bf0, 0bff],
    [0c0d, 0c0d], [0c11, 0c11], [0c29, 0c29], [0c3a, 0c3c], [0c45, 0c45],
    [0c49, 0c49], [0c4e, 0c54], [0c57, 0c57], [0c5b, 0c5f], [0c64, 0c65],
    [0c70, 0c7f], [0c84, 0c84], [0c8d, 0c8d], [0c91, 0c91], [0ca9, 0ca9],
    [0cb4, 0cb4], [0cba, 0cbb], [0cc5, 0cc5], [0cc9, 0cc9], [0cce, 0cd4],
    [0cd7, 0cdd], [0cdf, 0cdf], [0ce4, 0ce5], [0cf0, 0cf0], [0cf3, 0cff],
    [0d0d, 0d0d], [0d11, 0d11], [0d45, 0d45], [0d49, 0d49], [0d4f, 0d53],
    [0d58, 0d5e], [0d64, 0d65], [0d70, 0d79], [0d80, 0d80], [0d84, 0d84],
    [0d97, 0d99], [0db2, 0db2], [0dbc, 0dbc], [0dbe, 0dbf], [0dc7, 0dc9],
    [0dcb, 0dce], [0dd5, 0dd5], [0dd7, 0dd7], [0de0, 0de5], [0df0, 0df1],
    [0df4, 0e30], [0e32, 0e33], [0e3b, 0e46], [0e4f, 0e4f], [0e5a, 0eb0],
    [0eb2, 0eb3], [0ebd, 0ec7], [0ece, 0ecf], [0eda, 0eff], [0f01, 0f17],
    [0f1a, 0f1f], [0f2a, 0f34], [0f36, 0f36], [0f38, 0f38], [0f3a, 0f3d],
    [0f48, 0f48], [0f6d, 0f70], [0f85, 0f85], [0f98, 0f98], [0fbd, 0fc5],
    [0fc7, 102a], [103f, 103f], [104a, 1055], [105a, 105d], [1061, 1061],
    [1065, 1066], [106e, 1070], [1075, 1081], [108e, 108e], [109e, 109f],
    [10c6, 10c6], [10c8, 10cc], [10ce, 10cf], [10fb, 10fb], [1249, 1249],
    [124e, 124f], [1257, 1257], [1259, 1259], [125e, 125f], [1289, 1289],
    [128e, 128f], [12b1, 12b1], [12b6, 12b7], [12bf, 12bf], [12c1, 12c1],
    [12c6, 12c7], [12d7, 12d7], [1311, 1311], [1316, 1317], [135b, 135c],
    [1360, 137f], [1390, 139f], [13f6, 13f7], [13fe, 1400], [166d, 166e],
    [169b, 169f], [16eb, 16ed], [16f9, 16ff], [170d, 170d], [1715, 171f],
    [1735, 173f], [1754, 175f], [176d, 176d], [1771, 1771], [1774, 17b3],
    [17d4, 17dc], [17de, 17df], [17ea, 180a], [180f, 180f], [181a, 181f],
    [1879, 187f], [18ab, 18af], [18f6, 18ff], [191f, 191f], [192c, 192f],
    [193c, 1945], [1950, 19cf], [19da, 19ff], [1a1c, 1a54], [1a5f, 1a5f],
    [1a7d, 1a7e], [1a8a, 1a8f], [1a9a, 1aaf], [1ac1, 1aff], [1b4c, 1b4f],
    [1b5a, 1b6a], [1b74, 1b7f], [1bf4, 1bff], [1c38, 1c3f], [1c4a, 1c4c],
    [1c7e, 1c7f], [1c89, 1c8f], [1cbb, 1cbc], [1cc0, 1ccf], [1cd3, 1cd3],
    [1cfb, 1cff], [1dfa, 1dfa], [1f16, 1f17], [1f1e, 1f1f], [1f46, 1f47],
    [1f4e, 1f4f], [1f58, 1f58], [1f5a, 1f5a], [1f5c, 1f5c], [1f5e, 1f5e],
    [1f7e, 1f7f], [1fb5, 1fb5], [1fbd, 1fbd], [1fbf, 1fc1], [1fc5, 1fc5],
    [1fcd, 1fcf], [1fd4, 1fd5], [1fdc, 1fdf], [1fed, 1ff1], [1ff5, 1ff5],
    [1ffd, 1fff], [2007, 2007], [200b, 200b], [2010, 2017], [201a, 2023],
    [2025, 2026], [2030, 203e], [2041, 2043], [2045, 2053], [2055, 205e],
    [2065, 2065], [2070, 2070], [2072, 207e], [2080, 208f], [209d, 20cf],
    [20f1, 2101], [2103, 2106], [2108, 2109], [2114, 2114], [2116, 2118],
    [211e, 2123], [2125, 2125], [2127, 2127], [2129, 2129], [212e, 212e],
    [213a, 213b], [2140, 2144], [214a, 214d], [214f, 215f], [2189, 24b5],
    [24ea, 2bff], [2c2f, 2c2f], [2c5f, 2c5f], [2ce5, 2cea], [2cf4, 2cff],
    [2d26, 2d26], [2d28, 2d2c], [2d2e, 2d2f], [2d68, 2d6e], [2d70, 2d7e],
    [2d97, 2d9f], [2da7, 2da7], [2daf, 2daf], [2db7, 2db7], [2dbf, 2dbf],
    [2dc7, 2dc7], [2dcf, 2dcf], [2dd7, 2dd7], [2ddf, 2ddf], [2e00, 2e2e],
    [2e30, 2fff], [3001, 3004], [3006, 3029], [3030, 3030], [3036, 303a],
    [303d, 3098], [309d, 309f], [30fb, 30fb], [3100, 3104], [3130, 3130],
    [318f, 319f], [31c0, 31ef], [3200, 32cf], [32ff, 32ff], [3358, 9fff],
    [a48d, a4cf], [a4fe, a4ff], [a60d, a60f], [a62c, a63f], [a673, a673],
    [a67e, a67e], [a6f2, a707], [a7c0, a7c1], [a7cb, a7f4], [a828, a82b],
    [a82d, a83f], [a874, a87f], [a8c6, a8cf], [a8da, a8df], [a8f8, a8fa],
    [a8fc, a8fc], [a92e, a92f], [a954, a95f], [a97d, a97f], [a9c1, a9ce],
    [a9da, a9e4], [a9e6, a9ef], [a9fa, a9ff], [aa37, aa3f], [aa4e, aa4f],
    [aa5a, aa7a], [aa7e, aaaf], [aab1, aab1], [aab5, aab6], [aab9, aabd],
    [aac0, aac0], [aac2, aadf], [aaf0, aaf1], [aaf7, ab00], [ab07, ab08],
    [ab0f, ab10], [ab17, ab1f], [ab27, ab27], [ab2f, ab2f], [ab6a, ab6f],
    [abeb, abeb], [abee, abef], [abfa, abff], [d7a4, d7af], [d7c7, d7ca],
    [d7fc, faff], [fb07, fb12], [fb18, fb1c], [fb29, fb29], [fb37, fb37],
    [fb3d, fb3d], [fb3f, fb3f], [fb42, fb42], [fb45, fb45], [fbb2, fbd2],
    [fd3e, fd4f], [fd90, fd91], [fdc8, fdef], [fdfc, fdff], [fe11, fe12],
    [fe15, fe1f], [fe30, fe32], [fe35, fe4c], [fe51, fe51], [fe53, fe53],
    [fe56, fe6f], [fe75, fe75], [fefd, fefe], [ff00, ff06], [ff08, ff0b],
    [ff0d, ff0d], [ff0f, ff0f], [ff1c, ff20], [ff3b, ff3e], [ff40, ff40],
    [ff5b, ff65], [ffbf, ffc1], [ffc8, ffc9], [ffd0, ffd1], [ffd8, ffd9],
    [ffdd, fff8], [fffc, ffff], [1000c, 1000c], [10027, 10027],
    [1003b, 1003b], [1003e, 1003e], [1004e, 1004f], [1005e, 1007f],
    [100fb, 1013f], [10175, 101fc], [101fe, 1027f], [1029d, 1029f],
    [102d1, 102df], [102e1, 102ff], [10320, 1032c], [1034b, 1034f],
    [1037b, 1037f], [1039e, 1039f], [103c4, 103c7], [103d0, 103d0],
    [103d6, 103ff], [1049e, 1049f], [104aa, 104af], [104d4, 104d7],
    [104fc, 104ff], [10528, 1052f], [10564, 105ff], [10737, 1073f],
    [10756, 1075f], [10768, 107ff], [10806, 10807], [10809, 10809],
    [10836, 10836], [10839, 1083b], [1083d, 1083e], [10856, 1085f],
    [10877, 1087f], [1089f, 108df], [108f3, 108f3], [108f6, 108ff],
    [10916, 1091f], [1093a, 1097f], [109b8, 109bd], [109c0, 109ff],
    [10a04, 10a04], [10a07, 10a0b], [10a14, 10a14], [10a18, 10a18],
    [10a36, 10a37], [10a3b, 10a3e], [10a40, 10a5f], [10a7d, 10a7f],
    [10a9d, 10abf], [10ac8, 10ac8], [10ae7, 10aff], [10b36, 10b3f],
    [10b56, 10b5f], [10b73, 10b7f], [10b92, 10bff], [10c49, 10c7f],
    [10cb3, 10cbf], [10cf3, 10cff], [10d28, 10d2f], [10d3a, 10e7f],
    [10eaa, 10eaa], [10ead, 10eaf], [10eb2, 10eff], [10f1d, 10f26],
    [10f28, 10f2f], [10f51, 10faf], [10fc5, 10fdf], [10ff7, 10fff],
    [11047, 11065], [11070, 1107e], [110bb, 110bc], [110be, 110cc],
    [110ce, 110cf], [110e9, 110ef], [110fa, 110ff], [11135, 11135],
    [11140, 11143], [11148, 1114f], [11174, 11175], [11177, 1117f],
    [111c5, 111c8], [111cd, 111cd], [111db, 111db], [111dd, 111ff],
    [11212, 11212], [11238, 1123d], [1123f, 1127f], [11287, 11287],
    [11289, 11289], [1128e, 1128e], [1129e, 1129e], [112a9, 112af],
    [112eb, 112ef], [112fa, 112ff], [11304, 11304], [1130d, 1130e],
    [11311, 11312], [11329, 11329], [11331, 11331], [11334, 11334],
    [1133a, 1133a], [11345, 11346], [11349, 1134a], [1134e, 1134f],
    [11351, 11356], [11358, 1135c], [11364, 11365], [1136d, 1136f],
    [11375, 113ff], [1144b, 1144f], [1145a, 1145d], [11462, 1147f],
    [114c6, 114c6], [114c8, 114cf], [114da, 1157f], [115b6, 115b7],
    [115c1, 115d7], [115de, 115ff], [11641, 11643], [11645, 1164f],
    [1165a, 1167f], [116b9, 116bf], [116ca, 1171c], [1172c, 1172f],
    [1173a, 117ff], [1183b, 1189f], [118ea, 118fe], [11907, 11908],
    [1190a, 1190b], [11914, 11914], [11917, 11917], [11936, 11936],
    [11939, 1193a], [11944, 1194f], [1195a, 1199f], [119a8, 119a9],
    [119d8, 119d9], [119e2, 119e2], [119e5, 119ff], [11a3f, 11a46],
    [11a48, 11a4f], [11a9a, 11a9c], [11a9e, 11abf], [11af9, 11bff],
    [11c09, 11c09], [11c37, 11c37], [11c41, 11c4f], [11c5a, 11c71],
    [11c90, 11c91], [11ca8, 11ca8], [11cb7, 11cff], [11d07, 11d07],
    [11d0a, 11d0a], [11d37, 11d39], [11d3b, 11d3b], [11d3e, 11d3e],
    [11d48, 11d4f], [11d5a, 11d5f], [11d66, 11d66], [11d69, 11d69],
    [11d8f, 11d8f], [11d92, 11d92], [11d99, 11d9f], [11daa, 11edf],
    [11ef7, 11faf], [11fb1, 11fff], [1239a, 123ff], [1246f, 1247f],
    [12544, 12fff], [1342f, 1342f], [13439, 143ff], [14647, 167ff],
    [16a39, 16a3f], [16a5f, 16a5f], [16a6a, 16acf], [16aee, 16aef],
    [16af5, 16aff], [16b37, 16b3f], [16b44, 16b4f], [16b5a, 16b62],
    [16b78, 16b7c], [16b90, 16e3f], [16e80, 16eff], [16f4b, 16f4e],
    [16f88, 16f8e], [16fa0, 16fdf], [16fe2, 16fe2], [16fe5, 16fef],
    [16ff2, 1afff], [1b001, 1b163], [1b168, 1bbff], [1bc6b, 1bc6f],
    [1bc7d, 1bc7f], [1bc89, 1bc8f], [1bc9a, 1bc9c], [1bc9f, 1bc9f],
    [1bca4, 1d164], [1d16a, 1d16c], [1d183, 1d184], [1d18c, 1d1a9],
    [1d1ae, 1d241], [1d245, 1d3ff], [1d455, 1d455], [1d49d, 1d49d],
    [1d4a0, 1d4a1], [1d4a3, 1d4a4], [1d4a7, 1d4a8], [1d4ad, 1d4ad],
    [1d4ba, 1d4ba], [1d4bc, 1d4bc], [1d4c4, 1d4c4], [1d506, 1d506],
    [1d50b, 1d50c], [1d515, 1d515], [1d51d, 1d51d], [1d53a, 1d53a],
    [1d53f, 1d53f], [1d545, 1d545], [1d547, 1d549], [1d551, 1d551],
    [1d6a6, 1d6a7], [1d6c1, 1d6c1], [1d6db, 1d6db], [1d6fb, 1d6fb],
    [1d715, 1d715], [1d735, 1d735], [1d74f, 1d74f], [1d76f, 1d76f],
    [1d789, 1d789], [1d7a9, 1d7a9], [1d7c3, 1d7c3], [1d7cc, 1d7cd],
    [1d800, 1d9ff], [1da37, 1da3a], [1da6d, 1da74], [1da76, 1da83],
    [1da85, 1da9a], [1daa0, 1daa0], [1dab0, 1dfff], [1e007, 1e007],
    [1e019, 1e01a], [1e022, 1e022], [1e025, 1e025], [1e02b, 1e0ff],
    [1e12d, 1e12f], [1e13e, 1e13f], [1e14a, 1e14d], [1e14f, 1e2bf],
    [1e2fa, 1e7ff], [1e8c5, 1e8cf], [1e8d7, 1e8ff], [1e94c, 1e94f],
    [1e95a, 1edff], [1ee04, 1ee04], [1ee20, 1ee20], [1ee23, 1ee23],
    [1ee25, 1ee26], [1ee28, 1ee28], [1ee33, 1ee33], [1ee38, 1ee38],
    [1ee3a, 1ee3a], [1ee3c, 1ee41], [1ee43, 1ee46], [1ee48, 1ee48],
    [1ee4a, 1ee4a], [1ee4c, 1ee4c], [1ee50, 1ee50], [1ee53, 1ee53],
    [1ee55, 1ee56], [1ee58, 1ee58], [1ee5a, 1ee5a], [1ee5c, 1ee5c],
    [1ee5e, 1ee5e], [1ee60, 1ee60], [1ee63, 1ee63], [1ee65, 1ee66],
    [1ee6b, 1ee6b], [1ee73, 1ee73], [1ee78, 1ee78], [1ee7d, 1ee7d],
    [1ee7f, 1ee7f], [1ee8a, 1ee8a], [1ee9c, 1eea0], [1eea4, 1eea4],
    [1eeaa, 1eeaa], [1eebc, 1f12f], [1f14a, 1f14f], [1f16a, 1f16f],
    [1f18a, 1f1e5], [1f200, 1f3fa], [1f400, 1fbef], [1fbfa, e0000],
    [e0002, e001f], [e0080, e00ff], [e01f0, 10ffff]**/


    namespace {
    const static UnicodeSet::run_t __xx_Set_runs[] = {
    {Mixed, 8}, {Empty, 14}, {Mixed, 1}, {Empty, 4}, {Mixed, 3}, {Empty, 1},
    {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 4}, {Mixed, 2}, {Empty, 1},
    {Mixed, 5}, {Empty, 2}, {Mixed, 1}, {Empty, 2}, {Mixed, 3}, {Empty, 1},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
    {Mixed, 3}, {Full, 1}, {Mixed, 2}, {Empty, 4}, {Mixed, 30}, {Empty, 1},
    {Mixed, 6}, {Full, 1}, {Mixed, 2}, {Full, 2}, {Mixed, 2}, {Full, 1},
    {Mixed, 7}, {Full, 2}, {Mixed, 4}, {Empty, 1}, {Mixed, 2}, {Empty, 10},
    {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
    {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 18},
    {Mixed, 2}, {Empty, 2}, {Mixed, 5}, {Full, 1}, {Mixed, 4}, {Empty, 2},
    {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 4}, {Full, 3},
    {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 5}, {Full, 1},
    {Empty, 2}, {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 1}, {Mixed, 7},
    {Empty, 7}, {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 1}, {Mixed, 2},
    {Empty, 1}, {Mixed, 8}, {Full, 1}, {Mixed, 5}, {Empty, 1}, {Mixed, 1},
    {Full, 24}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Full, 56}, {Empty, 1},
    {Mixed, 2}, {Empty, 4}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
    {Mixed, 4}, {Empty, 1}, {Full, 1}, {Mixed, 1}, {Full, 14}, {Mixed, 2},
    {Full, 2}, {Mixed, 1}, {Empty, 2}, {Mixed, 3}, {Empty, 2}, {Mixed, 1},
    {Empty, 1}, {Full, 1}, {Mixed, 1}, {Full, 6}, {Mixed, 2}, {Empty, 2},
    {Mixed, 1}, {Full, 869}, {Empty, 36}, {Mixed, 1}, {Full, 1}, {Mixed, 2},
    {Empty, 8}, {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 2},
    {Empty, 5}, {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
    {Empty, 2}, {Mixed, 2}, {Empty, 1}, {Mixed, 3}, {Empty, 2}, {Mixed, 2},
    {Empty, 1}, {Mixed, 3}, {Full, 1}, {Mixed, 5}, {Empty, 1}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 349}, {Mixed, 3}, {Full, 280},
    {Mixed, 3}, {Empty, 2}, {Mixed, 2}, {Empty, 10}, {Mixed, 2}, {Empty, 1},
    {Mixed, 1}, {Empty, 1}, {Mixed, 6}, {Empty, 3}, {Mixed, 5}, {Empty, 1},
    {Mixed, 6}, {Full, 1}, {Empty, 3}, {Mixed, 1}, {Full, 2}, {Empty, 1},
    {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Full, 4}, {Mixed, 1}, {Empty, 1},
    {Mixed, 2}, {Empty, 1}, {Mixed, 4}, {Empty, 1}, {Mixed, 1}, {Full, 1},
    {Empty, 4}, {Mixed, 4}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
    {Full, 4}, {Empty, 9}, {Mixed, 3}, {Full, 4}, {Mixed, 5}, {Full, 2},
    {Mixed, 3}, {Full, 2}, {Empty, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 2},
    {Full, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 4},
    {Full, 3}, {Empty, 2}, {Mixed, 1}, {Full, 1}, {Empty, 1}, {Mixed, 1},
    {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Full, 10}, {Empty, 1},
    {Mixed, 1}, {Full, 2}, {Mixed, 3}, {Full, 2}, {Mixed, 3}, {Empty, 2},
    {Mixed, 2}, {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 3}, {Empty, 2},
    {Mixed, 1}, {Full, 1}, {Mixed, 2}, {Full, 2}, {Mixed, 2}, {Empty, 1},
    {Mixed, 5}, {Full, 4}, {Empty, 2}, {Mixed, 2}, {Empty, 2}, {Mixed, 1},
    {Full, 5}, {Empty, 1}, {Mixed, 2}, {Full, 1}, {Empty, 2}, {Mixed, 1},
    {Full, 1}, {Empty, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 2}, {Full, 6},
    {Empty, 1}, {Mixed, 1}, {Full, 3}, {Empty, 2}, {Mixed, 4}, {Full, 2},
    {Mixed, 3}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Full, 1},
    {Empty, 1}, {Mixed, 1}, {Full, 8}, {Mixed, 6}, {Full, 2}, {Mixed, 6},
    {Full, 9}, {Mixed, 1}, {Full, 5}, {Mixed, 1}, {Full, 2}, {Empty, 28},
    {Mixed, 1}, {Full, 3}, {Empty, 3}, {Mixed, 1}, {Empty, 6}, {Mixed, 1},
    {Full, 85}, {Empty, 33}, {Mixed, 1}, {Full, 126}, {Empty, 18},
    {Mixed, 1}, {Full, 269}, {Empty, 17}, {Mixed, 3}, {Full, 2}, {Mixed, 2},
    {Empty, 1}, {Mixed, 4}, {Full, 21}, {Empty, 2}, {Full, 4}, {Empty, 2},
    {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 512},
    {Mixed, 1}, {Full, 10}, {Mixed, 1}, {Full, 84}, {Empty, 3}, {Mixed, 3},
    {Full, 165}, {Mixed, 3}, {Full, 4}, {Mixed, 1}, {Full, 13}, {Empty, 2},
    {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 3}, {Empty, 10},
    {Mixed, 10}, {Empty, 1}, {Full, 16}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
    {Mixed, 3}, {Full, 42}, {Mixed, 2}, {Full, 6}, {Empty, 1}, {Mixed, 2},
    {Full, 11}, {Empty, 1}, {Mixed, 1}, {Full, 40}, {Empty, 6}, {Mixed, 1},
    {Full, 1}, {Empty, 2}, {Mixed, 1}, {Full, 37}, {Mixed, 6}, {Full, 19},
    {Mixed, 4}, {Full, 2}, {Mixed, 1}, {Full, 15}, {Mixed, 1}, {Full, 63},
    {Mixed, 1}, {Full, 24608}, {Mixed, 1}, {Empty, 3}, {Full, 4},
    {Empty, 7}, {Mixed, 1}, {Full, 6128}};
    const static UnicodeSet::bitquad_t  __xx_Set_quads[] = {
    0xffffc3ff, 0xf000af7a, 0x78000001, 0xf8000001, 0xffffffdf, 0xfb5fdbff,
    0x00800000, 0x00800000, 0x3f000000, 0x03200000, 0x0000283f, 0x00000004,
    0x00400000, 0x00000004, 0x00010000, 0x21800000, 0x0001f800, 0x40000000,
    0x0000ff49, 0xffe07800, 0xe800cfc0, 0x00002400, 0x40100000, 0x60000200,
    0x00007fff, 0x00001800, 0xfffc0000, 0xdac00000, 0xffffc000, 0xf0000000,
    0xfffff800, 0x00200000, 0x0007ff00, 0x00010030, 0x00066010, 0x0c3a0200,
    0x4f7f8660, 0xaffc0030, 0x00067811, 0x2c920200, 0xa1fdc678, 0xffc0003f,
    0x00044011, 0x0c120200, 0xfffec440, 0x01ff0030, 0x00066011, 0x0c120200,
    0x4f1fc660, 0xfffd0030, 0x29c23813, 0x3c0038e7, 0xff7ec238, 0xffff003f,
    0x00022000, 0x1c000200, 0xf89fc220, 0xffff0030, 0x00022010, 0x0c100200,
    0xbf9fc220, 0xfff90030, 0x00022000, 0x7f0f8220, 0x03ff0030, 0x03800011,
    0xd0040000, 0x00a07b80, 0xfff3003f, 0xf80dffff, 0xfc00807f, 0xe00dffff,
    0xfc00c0ff, 0xfcfffffe, 0x3d5ffc00, 0x00000100, 0x0001e000, 0x01000020,
    0xe0000000, 0xffffffbf, 0x800007ff, 0x3c3ffc00, 0xffe1c062, 0xc0004003,
    0x0000df40, 0x08000000, 0xc280c200, 0x0000c200, 0x80c20000, 0x008000c2,
    0x00c20000, 0x18000000, 0xffff0000, 0xc0c00000, 0x00000001, 0x00006000,
    0xf8000000, 0xfe003800, 0xffe02000, 0xffe00000, 0xfff00000, 0xfff22000,
    0x000fffff, 0xdff00000, 0xfffffc00, 0xfc0087ff, 0xfe000000, 0x0000f800,
    0xffc00000, 0x80000000, 0xf000f000, 0xffff003f, 0xfc00ffff, 0xf0000000,
    0x801fffff, 0x60000000, 0xfc00fc00, 0x0000ffff, 0xfffffffe, 0xfc00f000,
    0xfff007ff, 0xfff00000, 0xff000000, 0x00001c00, 0xc0000000, 0x0000fe00,
    0x18000000, 0x0008ffff, 0xf8000000, 0x04000000, 0xc0c00000, 0x5500c0c0,
    0xc0000000, 0xa0200000, 0xf030e023, 0xe023e000, 0xfcff0880, 0x7fff006f,
    0x7fefffee, 0x7ffd0020, 0xe000ffff, 0x0000ffff, 0xfffe0000, 0xc1d0037b,
    0x0c0042af, 0xffffbc1f, 0xfffffe00, 0x003fffff, 0xfffffc00, 0x00008000,
    0x80000000, 0xfff007e0, 0x0000df40, 0x7fff7f00, 0xff800000, 0x80808080,
    0x80808080, 0xffff7fff, 0xffffffde, 0xe7c103ff, 0xe1ffffff, 0x08000000,
    0x0000001f, 0x00010000, 0xffff8000, 0x0000ffff, 0x0000ffff, 0x80000000,
    0xff000000, 0xffffe000, 0x0000ffff, 0xc0000000, 0x0000e000, 0xfffff000,
    0x40080000, 0xfffc0000, 0x000000ff, 0xfffff803, 0x001fffff, 0xffffef00,
    0xfff00000, 0xfc00ffc0, 0x17000000, 0x0000c000, 0xfff00000, 0xe0000000,
    0xfc007ffe, 0xfc00ffdf, 0xff800000, 0xfc00c000, 0xc7ffffff, 0x3e62ffff,
    0xfffffffd, 0xff830000, 0xff818181, 0x00008080, 0x0000fc00, 0xfc00c800,
    0x0000fff0, 0x00000780, 0xf0000000, 0x1f07ff80, 0xa0800200, 0x00000024,
    0xfffc0000, 0x0007ffff, 0xc0000000, 0x0000ffff, 0x00030000, 0xffffff00,
    0xf000ffff, 0xffe60000, 0xffe70000, 0xffca1fff, 0x0020ffff, 0x60000000,
    0xf000af7f, 0x78000001, 0xf8000001, 0x0000003f, 0x80000000, 0xe3030303,
    0xf1ffffff, 0x00001000, 0x48000080, 0xc000c000, 0xf8000000, 0xffe00000,
    0xdfffffff, 0xe0000000, 0xfffe0000, 0xfffffffe, 0x00001fff, 0x0000f800,
    0xf8000000, 0xc0000000, 0xffc100f0, 0xc0000000, 0x0000fc00, 0x00f00000,
    0xf0000000, 0x0000ff00, 0xfffffff0, 0xff800000, 0xffc00000, 0xffffff00,
    0x000002c0, 0x6e400000, 0xffc00000, 0xff800000, 0x80000000, 0xffc80000,
    0xffc00000, 0xfc000000, 0x3f000000, 0x01100f90, 0x78c00000, 0xe0000000,
    0xe0000000, 0x00000100, 0xffffff80, 0xffc00000, 0xffc00000, 0xfff80000,
    0xfffc0000, 0xfffffe00, 0xfff80000, 0xfff80000, 0xfc00ff00, 0xfffce400,
    0xe0000000, 0x0000ff7f, 0xfffe0000, 0x0000ffff, 0xffffffe0, 0xff800000,
    0xffffff80, 0x7fff003f, 0xd8000000, 0x0000dfff, 0xfc00fe00, 0x00200000,
    0x0000ff0f, 0xffb00000, 0xe80021e0, 0x00040000, 0xbf000000, 0x40004280,
    0x0000fe00, 0xfc00f800, 0x00066010, 0x04120200, 0x1f7ec660, 0xffe0e030,
    0x3c00f800, 0xfffffffc, 0xfc00ff40, 0x00c00000, 0xc0fffffe, 0xfc00ffee,
    0xfe000000, 0xfffffc00, 0x1fffffff, 0xfc00f000, 0xf8000000, 0x7ffffc00,
    0x00900d80, 0x06400000, 0xfc00fff0, 0x00000300, 0x03000000, 0xffffffe4,
    0x80000000, 0x0000ff7f, 0xdc000000, 0xfe000000, 0x00000200, 0x00800000,
    0xfc00fffe, 0x0003ffff, 0x00030000, 0xff800100, 0x00000480, 0x4b800000,
    0xfc00ff00, 0x00000240, 0xfe048000, 0xfffffc00, 0xff800000, 0xfffeffff,
    0xfc000000, 0xffff8000, 0xfffffff0, 0xfe008000, 0xffffff80, 0xfe000000,
    0x80000000, 0xfffffc00, 0x0000ffff, 0xffe0c000, 0xff800000, 0xfc00fff0,
    0x1f000007, 0xffff0000, 0x00007800, 0x00007f00, 0xfffcffe4, 0xfffffffe,
    0xffffff0f, 0xe000f800, 0x9c00fe00, 0xfffffff0, 0x00001c1f, 0xfffff018,
    0xffffc3ff, 0xffffffe3, 0x00200000, 0x20000000, 0x1400219b, 0x00000010,
    0x20201840, 0x84000000, 0x000203a0, 0x000000c0, 0x08000002, 0x08000000,
    0x00200000, 0x00200000, 0x00008000, 0x00008000, 0x00000200, 0x00000200,
    0x00003008, 0x07800000, 0xffdfe000, 0x07ffffef, 0xffff0001, 0x06000080,
    0xfffff824, 0xc000e000, 0xffffbc00, 0xfc000000, 0xff80ffe0, 0xfc00f000,
    0x00000010, 0xf5080169, 0x5569157b, 0xa1080869, 0xf0000400, 0xf0000411,
    0x0000ffff, 0x0000fc00, 0x0000fc00, 0xfffffc00, 0x0000003f, 0x07ffffff,
    0xfc00ffff, 0xfffffffd, 0xffff0000};
    }

    const static UnicodeSet xx_Set{const_cast<UnicodeSet::run_t *>(__xx_Set_runs), 366, 0, const_cast<UnicodeSet::bitquad_t *>(__xx_Set_quads), 399, 0};

    /** Code Point Ranges for DQ
    [0022, 0022]**/


    namespace {
    const static UnicodeSet::run_t __dq_Set_runs[] = {
    {Empty, 1}, {Mixed, 1}, {Empty, 34814}};
    const static UnicodeSet::bitquad_t  __dq_Set_quads[] = {
    0x00000004};
    }

    const static UnicodeSet dq_Set{const_cast<UnicodeSet::run_t *>(__dq_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__dq_Set_quads), 1, 0};

    /** Code Point Ranges for SQ
    [0027, 0027]**/


    namespace {
    const static UnicodeSet::run_t __sq_Set_runs[] = {
    {Empty, 1}, {Mixed, 1}, {Empty, 34814}};
    const static UnicodeSet::bitquad_t  __sq_Set_quads[] = {
    0x00000080};
    }

    const static UnicodeSet sq_Set{const_cast<UnicodeSet::run_t *>(__sq_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__sq_Set_quads), 1, 0};

    /** Code Point Ranges for HL
    [05d0, 05ea], [05ef, 05f2], [fb1d, fb1d], [fb1f, fb28], [fb2a, fb36],
    [fb38, fb3c], [fb3e, fb3e], [fb40, fb41], [fb43, fb44], [fb46, fb4f]**/


    namespace {
    const static UnicodeSet::run_t __hl_Set_runs[] = {
    {Empty, 46}, {Mixed, 2}, {Empty, 1960}, {Mixed, 3}, {Empty, 32805}};
    const static UnicodeSet::bitquad_t  __hl_Set_quads[] = {
    0xffff0000, 0x000787ff, 0xa0000000, 0x5f7ffdff, 0x0000ffdb};
    }

    const static UnicodeSet hl_Set{const_cast<UnicodeSet::run_t *>(__hl_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__hl_Set_quads), 5, 0};

    /** Code Point Ranges for CR
    [000d, 000d]**/


    namespace {
    const static UnicodeSet::run_t __cr_Set_runs[] = {
    {Mixed, 1}, {Empty, 34815}};
    const static UnicodeSet::bitquad_t  __cr_Set_quads[] = {
    0x00002000};
    }

    const static UnicodeSet cr_Set{const_cast<UnicodeSet::run_t *>(__cr_Set_runs), 2, 0, const_cast<UnicodeSet::bitquad_t *>(__cr_Set_quads), 1, 0};

    /** Code Point Ranges for LF
    [000a, 000a]**/


    namespace {
    const static UnicodeSet::run_t __lf_Set_runs[] = {
    {Mixed, 1}, {Empty, 34815}};
    const static UnicodeSet::bitquad_t  __lf_Set_quads[] = {
    0x00000400};
    }

    const static UnicodeSet lf_Set{const_cast<UnicodeSet::run_t *>(__lf_Set_runs), 2, 0, const_cast<UnicodeSet::bitquad_t *>(__lf_Set_quads), 1, 0};

    /** Code Point Ranges for NL
    [000b, 000c], [0085, 0085], [2028, 2029]**/


    namespace {
    const static UnicodeSet::run_t __nl_Set_runs[] = {
    {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 252}, {Mixed, 1},
    {Empty, 34558}};
    const static UnicodeSet::bitquad_t  __nl_Set_quads[] = {
    0x00001800, 0x00000020, 0x00000300};
    }

    const static UnicodeSet nl_Set{const_cast<UnicodeSet::run_t *>(__nl_Set_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__nl_Set_quads), 3, 0};

    /** Code Point Ranges for Extend
    [0300, 036f], [0483, 0489], [0591, 05bd], [05bf, 05bf], [05c1, 05c2],
    [05c4, 05c5], [05c7, 05c7], [0610, 061a], [064b, 065f], [0670, 0670],
    [06d6, 06dc], [06df, 06e4], [06e7, 06e8], [06ea, 06ed], [0711, 0711],
    [0730, 074a], [07a6, 07b0], [07eb, 07f3], [07fd, 07fd], [0816, 0819],
    [081b, 0823], [0825, 0827], [0829, 082d], [0859, 085b], [08d3, 08e1],
    [08e3, 0903], [093a, 093c], [093e, 094f], [0951, 0957], [0962, 0963],
    [0981, 0983], [09bc, 09bc], [09be, 09c4], [09c7, 09c8], [09cb, 09cd],
    [09d7, 09d7], [09e2, 09e3], [09fe, 09fe], [0a01, 0a03], [0a3c, 0a3c],
    [0a3e, 0a42], [0a47, 0a48], [0a4b, 0a4d], [0a51, 0a51], [0a70, 0a71],
    [0a75, 0a75], [0a81, 0a83], [0abc, 0abc], [0abe, 0ac5], [0ac7, 0ac9],
    [0acb, 0acd], [0ae2, 0ae3], [0afa, 0aff], [0b01, 0b03], [0b3c, 0b3c],
    [0b3e, 0b44], [0b47, 0b48], [0b4b, 0b4d], [0b55, 0b57], [0b62, 0b63],
    [0b82, 0b82], [0bbe, 0bc2], [0bc6, 0bc8], [0bca, 0bcd], [0bd7, 0bd7],
    [0c00, 0c04], [0c3e, 0c44], [0c46, 0c48], [0c4a, 0c4d], [0c55, 0c56],
    [0c62, 0c63], [0c81, 0c83], [0cbc, 0cbc], [0cbe, 0cc4], [0cc6, 0cc8],
    [0cca, 0ccd], [0cd5, 0cd6], [0ce2, 0ce3], [0d00, 0d03], [0d3b, 0d3c],
    [0d3e, 0d44], [0d46, 0d48], [0d4a, 0d4d], [0d57, 0d57], [0d62, 0d63],
    [0d81, 0d83], [0dca, 0dca], [0dcf, 0dd4], [0dd6, 0dd6], [0dd8, 0ddf],
    [0df2, 0df3], [0e31, 0e31], [0e34, 0e3a], [0e47, 0e4e], [0eb1, 0eb1],
    [0eb4, 0ebc], [0ec8, 0ecd], [0f18, 0f19], [0f35, 0f35], [0f37, 0f37],
    [0f39, 0f39], [0f3e, 0f3f], [0f71, 0f84], [0f86, 0f87], [0f8d, 0f97],
    [0f99, 0fbc], [0fc6, 0fc6], [102b, 103e], [1056, 1059], [105e, 1060],
    [1062, 1064], [1067, 106d], [1071, 1074], [1082, 108d], [108f, 108f],
    [109a, 109d], [135d, 135f], [1712, 1714], [1732, 1734], [1752, 1753],
    [1772, 1773], [17b4, 17d3], [17dd, 17dd], [180b, 180d], [1885, 1886],
    [18a9, 18a9], [1920, 192b], [1930, 193b], [1a17, 1a1b], [1a55, 1a5e],
    [1a60, 1a7c], [1a7f, 1a7f], [1ab0, 1ac0], [1b00, 1b04], [1b34, 1b44],
    [1b6b, 1b73], [1b80, 1b82], [1ba1, 1bad], [1be6, 1bf3], [1c24, 1c37],
    [1cd0, 1cd2], [1cd4, 1ce8], [1ced, 1ced], [1cf4, 1cf4], [1cf7, 1cf9],
    [1dc0, 1df9], [1dfb, 1dff], [200c, 200c], [20d0, 20f0], [2cef, 2cf1],
    [2d7f, 2d7f], [2de0, 2dff], [302a, 302f], [3099, 309a], [a66f, a672],
    [a674, a67d], [a69e, a69f], [a6f0, a6f1], [a802, a802], [a806, a806],
    [a80b, a80b], [a823, a827], [a82c, a82c], [a880, a881], [a8b4, a8c5],
    [a8e0, a8f1], [a8ff, a8ff], [a926, a92d], [a947, a953], [a980, a983],
    [a9b3, a9c0], [a9e5, a9e5], [aa29, aa36], [aa43, aa43], [aa4c, aa4d],
    [aa7b, aa7d], [aab0, aab0], [aab2, aab4], [aab7, aab8], [aabe, aabf],
    [aac1, aac1], [aaeb, aaef], [aaf5, aaf6], [abe3, abea], [abec, abed],
    [fb1e, fb1e], [fe00, fe0f], [fe20, fe2f], [ff9e, ff9f], [101fd, 101fd],
    [102e0, 102e0], [10376, 1037a], [10a01, 10a03], [10a05, 10a06],
    [10a0c, 10a0f], [10a38, 10a3a], [10a3f, 10a3f], [10ae5, 10ae6],
    [10d24, 10d27], [10eab, 10eac], [10f46, 10f50], [11000, 11002],
    [11038, 11046], [1107f, 11082], [110b0, 110ba], [11100, 11102],
    [11127, 11134], [11145, 11146], [11173, 11173], [11180, 11182],
    [111b3, 111c0], [111c9, 111cc], [111ce, 111cf], [1122c, 11237],
    [1123e, 1123e], [112df, 112ea], [11300, 11303], [1133b, 1133c],
    [1133e, 11344], [11347, 11348], [1134b, 1134d], [11357, 11357],
    [11362, 11363], [11366, 1136c], [11370, 11374], [11435, 11446],
    [1145e, 1145e], [114b0, 114c3], [115af, 115b5], [115b8, 115c0],
    [115dc, 115dd], [11630, 11640], [116ab, 116b7], [1171d, 1172b],
    [1182c, 1183a], [11930, 11935], [11937, 11938], [1193b, 1193e],
    [11940, 11940], [11942, 11943], [119d1, 119d7], [119da, 119e0],
    [119e4, 119e4], [11a01, 11a0a], [11a33, 11a39], [11a3b, 11a3e],
    [11a47, 11a47], [11a51, 11a5b], [11a8a, 11a99], [11c2f, 11c36],
    [11c38, 11c3f], [11c92, 11ca7], [11ca9, 11cb6], [11d31, 11d36],
    [11d3a, 11d3a], [11d3c, 11d3d], [11d3f, 11d45], [11d47, 11d47],
    [11d8a, 11d8e], [11d90, 11d91], [11d93, 11d97], [11ef3, 11ef6],
    [16af0, 16af4], [16b30, 16b36], [16f4f, 16f4f], [16f51, 16f87],
    [16f8f, 16f92], [16fe4, 16fe4], [16ff0, 16ff1], [1bc9d, 1bc9e],
    [1d165, 1d169], [1d16d, 1d172], [1d17b, 1d182], [1d185, 1d18b],
    [1d1aa, 1d1ad], [1d242, 1d244], [1da00, 1da36], [1da3b, 1da6c],
    [1da75, 1da75], [1da84, 1da84], [1da9b, 1da9f], [1daa1, 1daaf],
    [1e000, 1e006], [1e008, 1e018], [1e01b, 1e021], [1e023, 1e024],
    [1e026, 1e02a], [1e130, 1e136], [1e2ec, 1e2ef], [1e8d0, 1e8d6],
    [1e944, 1e94a], [1f3fb, 1f3ff], [e0020, e007f], [e0100, e01ef]**/


    namespace {
    const static UnicodeSet::run_t __extend_Set_runs[] = {
    {Empty, 24}, {Full, 3}, {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 7},
    {Mixed, 3}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 2},
    {Mixed, 5}, {Empty, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 4}, {Empty, 3},
    {Mixed, 25}, {Empty, 1}, {Mixed, 13}, {Empty, 1}, {Mixed, 2},
    {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 2}, {Empty, 1}, {Mixed, 2},
    {Empty, 1}, {Mixed, 4}, {Empty, 2}, {Mixed, 4}, {Empty, 21}, {Mixed, 1},
    {Empty, 29}, {Mixed, 4}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 1},
    {Empty, 3}, {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 6}, {Mixed, 1},
    {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 6},
    {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 4}, {Mixed, 2},
    {Empty, 6}, {Full, 1}, {Mixed, 1}, {Empty, 16}, {Mixed, 1}, {Empty, 5},
    {Mixed, 2}, {Empty, 95}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3},
    {Full, 1}, {Empty, 17}, {Mixed, 1}, {Empty, 2}, {Mixed, 1},
    {Empty, 942}, {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Empty, 8},
    {Mixed, 2}, {Empty, 2}, {Mixed, 4}, {Empty, 1}, {Mixed, 2}, {Empty, 1},
    {Mixed, 4}, {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 3}, {Empty, 7},
    {Mixed, 1}, {Empty, 632}, {Mixed, 1}, {Empty, 23}, {Mixed, 2},
    {Empty, 10}, {Mixed, 1}, {Empty, 18}, {Mixed, 1}, {Empty, 7},
    {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 52}, {Mixed, 2}, {Empty, 5},
    {Mixed, 1}, {Empty, 17}, {Mixed, 1}, {Empty, 11}, {Mixed, 1},
    {Empty, 4}, {Mixed, 1}, {Empty, 5}, {Mixed, 6}, {Empty, 2}, {Mixed, 7},
    {Empty, 2}, {Mixed, 1}, {Empty, 4}, {Mixed, 6}, {Empty, 5}, {Mixed, 2},
    {Empty, 2}, {Mixed, 2}, {Empty, 6}, {Mixed, 2}, {Empty, 2}, {Mixed, 2},
    {Empty, 2}, {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 7}, {Mixed, 1},
    {Empty, 7}, {Mixed, 2}, {Empty, 3}, {Mixed, 5}, {Empty, 1}, {Mixed, 1},
    {Empty, 12}, {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 3}, {Mixed, 2},
    {Empty, 1}, {Mixed, 1}, {Empty, 10}, {Mixed, 1}, {Empty, 607},
    {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 32}, {Mixed, 1}, {Full, 1},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 612}, {Mixed, 1},
    {Empty, 166}, {Mixed, 3}, {Empty, 4}, {Mixed, 1}, {Empty, 61},
    {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 3}, {Empty, 42}, {Mixed, 2},
    {Empty, 7}, {Mixed, 1}, {Empty, 13}, {Mixed, 1}, {Empty, 46},
    {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 84}, {Mixed, 1},
    {Empty, 24673}, {Full, 3}, {Empty, 4}, {Full, 7}, {Mixed, 1},
    {Empty, 6128}};
    const static UnicodeSet::bitquad_t  __extend_Set_quads[] = {
    0x0000ffff, 0x000003f8, 0xfffe0000, 0xbfffffff, 0x000000b6, 0x07ff0000,
    0xfffff800, 0x00010000, 0x9fc00000, 0x00003d9f, 0x00020000, 0xffff0000,
    0x000007ff, 0x0001ffc0, 0x200ff800, 0xfbc00000, 0x00003eef, 0x0e000000,
    0xfff80000, 0xfffffffb, 0x0000000f, 0xdc000000, 0x00feffff, 0x0000000c,
    0x0000000e, 0xd0000000, 0x0080399f, 0x4000000c, 0x0000000e, 0xd0000000,
    0x00023987, 0x00230000, 0x0000000e, 0xd0000000, 0x00003bbf, 0xfc00000c,
    0x0000000e, 0xd0000000, 0x00e0399f, 0x0000000c, 0x00000004, 0xc0000000,
    0x00803dc7, 0x0000001f, 0xc0000000, 0x00603ddf, 0x0000000c, 0x0000000e,
    0xd0000000, 0x00603ddf, 0x0000000c, 0x0000000f, 0xd8000000, 0x00803ddf,
    0x0000000c, 0x0000000e, 0xff5f8400, 0x000c0000, 0x07f20000, 0x00007f80,
    0x1ff20000, 0x00003f00, 0x03000000, 0xc2a00000, 0xfffe0000, 0xfeffe0df,
    0x1fffffff, 0x00000040, 0x7ffff800, 0xc3c00000, 0x001e3f9d, 0x3c00bffc,
    0xe0000000, 0x001c0000, 0x001c0000, 0x000c0000, 0x000c0000, 0xfff00000,
    0x200fffff, 0x00003800, 0x00000060, 0x00000200, 0x0fff0fff, 0x0f800000,
    0x7fe00000, 0x9fffffff, 0xffff0000, 0x00000001, 0x0000001f, 0xfff00000,
    0x0000001f, 0x000ff800, 0x00000007, 0x00003ffe, 0x000fffc0, 0x00fffff0,
    0xfff70000, 0x039021ff, 0xfbffffff, 0x00001000, 0xffff0000, 0x0001ffff,
    0x00038000, 0x80000000, 0x0000fc00, 0x06000000, 0x3ff78000, 0xc0000000,
    0x00030000, 0x00000844, 0x000010f8, 0x00000003, 0xfff00000, 0x0000003f,
    0x8003ffff, 0x00003fc0, 0x000fff80, 0x0000000f, 0xfff80000, 0x00000001,
    0x00000020, 0x007ffe00, 0x00003008, 0x38000000, 0xc19d0000, 0x00000002,
    0x0060f800, 0x000037f8, 0x40000000, 0x0000ffff, 0x0000ffff, 0xc0000000,
    0x20000000, 0x00000001, 0x07c00000, 0x0000f06e, 0x87000000, 0x00000060,
    0x000000f0, 0x00001800, 0x0001ffc0, 0x00000007, 0xff000000, 0x0000007f,
    0x80000000, 0x00000007, 0x07ff0000, 0x00000007, 0x001fff80, 0x00000060,
    0x00080000, 0x00000007, 0xfff80000, 0x0000de01, 0x40fff000, 0x80000000,
    0x000007ff, 0x0000000f, 0xd8000000, 0x0080399f, 0x001f1fcc, 0xffe00000,
    0x4000007f, 0xffff0000, 0x0000000f, 0xff3f8000, 0x30000001, 0xffff0000,
    0x00000001, 0x00fff800, 0xe0000000, 0x00000fff, 0x07fff000, 0x79bf0000,
    0x0000000d, 0xfcfe0000, 0x00000011, 0x000007fe, 0x7bf80000, 0x0ffe0080,
    0x03fffc00, 0xff7f8000, 0xfffc0000, 0x007ffeff, 0xb47e0000, 0x000000bf,
    0x00fb7c00, 0x00780000, 0x001f0000, 0x007f0000, 0xfffe8000, 0x000780ff,
    0x00030010, 0x60000000, 0xf807e3e0, 0x00000fe7, 0x00003c00, 0x0000001c,
    0xf87fffff, 0x00201fff, 0xf8000010, 0x0000fffe, 0xf9ffff7f, 0x000007db,
    0x007f0000, 0x0000f000, 0x007f0000, 0x000007f0, 0xf8000000, 0x0000ffff};
    }

    const static UnicodeSet extend_Set{const_cast<UnicodeSet::run_t *>(__extend_Set_runs), 193, 0, const_cast<UnicodeSet::bitquad_t *>(__extend_Set_quads), 210, 0};

    /** Code Point Ranges for RI
    [1f1e6, 1f1ff]**/


    namespace {
    const static UnicodeSet::run_t __ri_Set_runs[] = {
    {Empty, 3983}, {Mixed, 1}, {Empty, 30832}};
    const static UnicodeSet::bitquad_t  __ri_Set_quads[] = {
    0xffffffc0};
    }

    const static UnicodeSet ri_Set{const_cast<UnicodeSet::run_t *>(__ri_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ri_Set_quads), 1, 0};

    /** Code Point Ranges for FO
    [00ad, 00ad], [0600, 0605], [061c, 061c], [06dd, 06dd], [070f, 070f],
    [08e2, 08e2], [180e, 180e], [200e, 200f], [202a, 202e], [2060, 2064],
    [2066, 206f], [feff, feff], [fff9, fffb], [110bd, 110bd],
    [110cd, 110cd], [13430, 13438], [1bca0, 1bca3], [1d173, 1d17a],
    [e0001, e0001]**/


    namespace {
    const static UnicodeSet::run_t __fo_Set_runs[] = {
    {Empty, 5}, {Mixed, 1}, {Empty, 42}, {Mixed, 1}, {Empty, 5}, {Mixed, 1},
    {Empty, 1}, {Mixed, 1}, {Empty, 14}, {Mixed, 1}, {Empty, 120},
    {Mixed, 1}, {Empty, 63}, {Mixed, 2}, {Empty, 1}, {Mixed, 1},
    {Empty, 1779}, {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 133},
    {Mixed, 2}, {Empty, 282}, {Mixed, 1}, {Empty, 1091}, {Mixed, 1},
    {Empty, 165}, {Mixed, 1}, {Empty, 24948}, {Mixed, 1}, {Empty, 6143}};
    const static UnicodeSet::bitquad_t  __fo_Set_quads[] = {
    0x00002000, 0x1000003f, 0x20000000, 0x00008000, 0x00000004, 0x00004000,
    0x0000c000, 0x00007c00, 0x0000ffdf, 0x80000000, 0x0e000000, 0x20000000,
    0x00002000, 0x01ff0000, 0x0000000f, 0x07f80000, 0x00000002};
    }

    const static UnicodeSet fo_Set{const_cast<UnicodeSet::run_t *>(__fo_Set_runs), 31, 0, const_cast<UnicodeSet::bitquad_t *>(__fo_Set_quads), 17, 0};

    /** Code Point Ranges for KA
    [3031, 3035], [309b, 309c], [30a0, 30fa], [30fc, 30ff], [31f0, 31ff],
    [32d0, 32fe], [3300, 3357], [ff66, ff9d], [1b000, 1b000],
    [1b164, 1b167]**/


    namespace {
    const static UnicodeSet::run_t __ka_Set_runs[] = {
    {Empty, 385}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Full, 2}, {Mixed, 1},
    {Empty, 7}, {Mixed, 1}, {Empty, 6}, {Mixed, 2}, {Full, 2}, {Mixed, 1},
    {Empty, 1632}, {Mixed, 2}, {Empty, 1411}, {Mixed, 1}, {Empty, 10},
    {Mixed, 1}, {Empty, 31348}};
    const static UnicodeSet::bitquad_t  __ka_Set_quads[] = {
    0x003e0000, 0x18000000, 0xf7ffffff, 0xffff0000, 0xffff0000, 0x7fffffff,
    0x00ffffff, 0xffffffc0, 0x3fffffff, 0x00000001, 0x000000f0};
    }

    const static UnicodeSet ka_Set{const_cast<UnicodeSet::run_t *>(__ka_Set_runs), 19, 0, const_cast<UnicodeSet::bitquad_t *>(__ka_Set_quads), 11, 0};

    /** Code Point Ranges for LE
    [0041, 005a], [0061, 007a], [00aa, 00aa], [00b5, 00b5], [00ba, 00ba],
    [00c0, 00d6], [00d8, 00f6], [00f8, 02d7], [02de, 02ff], [0370, 0374],
    [0376, 0377], [037a, 037d], [037f, 037f], [0386, 0386], [0388, 038a],
    [038c, 038c], [038e, 03a1], [03a3, 03f5], [03f7, 0481], [048a, 052f],
    [0531, 0556], [0559, 055c], [055e, 055e], [0560, 0588], [058a, 058a],
    [05f3, 05f3], [0620, 064a], [066e, 066f], [0671, 06d3], [06d5, 06d5],
    [06e5, 06e6], [06ee, 06ef], [06fa, 06fc], [06ff, 06ff], [0710, 0710],
    [0712, 072f], [074d, 07a5], [07b1, 07b1], [07ca, 07ea], [07f4, 07f5],
    [07fa, 07fa], [0800, 0815], [081a, 081a], [0824, 0824], [0828, 0828],
    [0840, 0858], [0860, 086a], [08a0, 08b4], [08b6, 08c7], [0904, 0939],
    [093d, 093d], [0950, 0950], [0958, 0961], [0971, 0980], [0985, 098c],
    [098f, 0990], [0993, 09a8], [09aa, 09b0], [09b2, 09b2], [09b6, 09b9],
    [09bd, 09bd], [09ce, 09ce], [09dc, 09dd], [09df, 09e1], [09f0, 09f1],
    [09fc, 09fc], [0a05, 0a0a], [0a0f, 0a10], [0a13, 0a28], [0a2a, 0a30],
    [0a32, 0a33], [0a35, 0a36], [0a38, 0a39], [0a59, 0a5c], [0a5e, 0a5e],
    [0a72, 0a74], [0a85, 0a8d], [0a8f, 0a91], [0a93, 0aa8], [0aaa, 0ab0],
    [0ab2, 0ab3], [0ab5, 0ab9], [0abd, 0abd], [0ad0, 0ad0], [0ae0, 0ae1],
    [0af9, 0af9], [0b05, 0b0c], [0b0f, 0b10], [0b13, 0b28], [0b2a, 0b30],
    [0b32, 0b33], [0b35, 0b39], [0b3d, 0b3d], [0b5c, 0b5d], [0b5f, 0b61],
    [0b71, 0b71], [0b83, 0b83], [0b85, 0b8a], [0b8e, 0b90], [0b92, 0b95],
    [0b99, 0b9a], [0b9c, 0b9c], [0b9e, 0b9f], [0ba3, 0ba4], [0ba8, 0baa],
    [0bae, 0bb9], [0bd0, 0bd0], [0c05, 0c0c], [0c0e, 0c10], [0c12, 0c28],
    [0c2a, 0c39], [0c3d, 0c3d], [0c58, 0c5a], [0c60, 0c61], [0c80, 0c80],
    [0c85, 0c8c], [0c8e, 0c90], [0c92, 0ca8], [0caa, 0cb3], [0cb5, 0cb9],
    [0cbd, 0cbd], [0cde, 0cde], [0ce0, 0ce1], [0cf1, 0cf2], [0d04, 0d0c],
    [0d0e, 0d10], [0d12, 0d3a], [0d3d, 0d3d], [0d4e, 0d4e], [0d54, 0d56],
    [0d5f, 0d61], [0d7a, 0d7f], [0d85, 0d96], [0d9a, 0db1], [0db3, 0dbb],
    [0dbd, 0dbd], [0dc0, 0dc6], [0f00, 0f00], [0f40, 0f47], [0f49, 0f6c],
    [0f88, 0f8c], [10a0, 10c5], [10c7, 10c7], [10cd, 10cd], [10d0, 10fa],
    [10fc, 1248], [124a, 124d], [1250, 1256], [1258, 1258], [125a, 125d],
    [1260, 1288], [128a, 128d], [1290, 12b0], [12b2, 12b5], [12b8, 12be],
    [12c0, 12c0], [12c2, 12c5], [12c8, 12d6], [12d8, 1310], [1312, 1315],
    [1318, 135a], [1380, 138f], [13a0, 13f5], [13f8, 13fd], [1401, 166c],
    [166f, 167f], [1681, 169a], [16a0, 16ea], [16ee, 16f8], [1700, 170c],
    [170e, 1711], [1720, 1731], [1740, 1751], [1760, 176c], [176e, 1770],
    [1820, 1878], [1880, 1884], [1887, 18a8], [18aa, 18aa], [18b0, 18f5],
    [1900, 191e], [1a00, 1a16], [1b05, 1b33], [1b45, 1b4b], [1b83, 1ba0],
    [1bae, 1baf], [1bba, 1be5], [1c00, 1c23], [1c4d, 1c4f], [1c5a, 1c7d],
    [1c80, 1c88], [1c90, 1cba], [1cbd, 1cbf], [1ce9, 1cec], [1cee, 1cf3],
    [1cf5, 1cf6], [1cfa, 1cfa], [1d00, 1dbf], [1e00, 1f15], [1f18, 1f1d],
    [1f20, 1f45], [1f48, 1f4d], [1f50, 1f57], [1f59, 1f59], [1f5b, 1f5b],
    [1f5d, 1f5d], [1f5f, 1f7d], [1f80, 1fb4], [1fb6, 1fbc], [1fbe, 1fbe],
    [1fc2, 1fc4], [1fc6, 1fcc], [1fd0, 1fd3], [1fd6, 1fdb], [1fe0, 1fec],
    [1ff2, 1ff4], [1ff6, 1ffc], [2071, 2071], [207f, 207f], [2090, 209c],
    [2102, 2102], [2107, 2107], [210a, 2113], [2115, 2115], [2119, 211d],
    [2124, 2124], [2126, 2126], [2128, 2128], [212a, 212d], [212f, 2139],
    [213c, 213f], [2145, 2149], [214e, 214e], [2160, 2188], [24b6, 24e9],
    [2c00, 2c2e], [2c30, 2c5e], [2c60, 2ce4], [2ceb, 2cee], [2cf2, 2cf3],
    [2d00, 2d25], [2d27, 2d27], [2d2d, 2d2d], [2d30, 2d67], [2d6f, 2d6f],
    [2d80, 2d96], [2da0, 2da6], [2da8, 2dae], [2db0, 2db6], [2db8, 2dbe],
    [2dc0, 2dc6], [2dc8, 2dce], [2dd0, 2dd6], [2dd8, 2dde], [2e2f, 2e2f],
    [3005, 3005], [303b, 303c], [3105, 312f], [3131, 318e], [31a0, 31bf],
    [a000, a48c], [a4d0, a4fd], [a500, a60c], [a610, a61f], [a62a, a62b],
    [a640, a66e], [a67f, a69d], [a6a0, a6ef], [a708, a7bf], [a7c2, a7ca],
    [a7f5, a801], [a803, a805], [a807, a80a], [a80c, a822], [a840, a873],
    [a882, a8b3], [a8f2, a8f7], [a8fb, a8fb], [a8fd, a8fe], [a90a, a925],
    [a930, a946], [a960, a97c], [a984, a9b2], [a9cf, a9cf], [aa00, aa28],
    [aa40, aa42], [aa44, aa4b], [aae0, aaea], [aaf2, aaf4], [ab01, ab06],
    [ab09, ab0e], [ab11, ab16], [ab20, ab26], [ab28, ab2e], [ab30, ab69],
    [ab70, abe2], [ac00, d7a3], [d7b0, d7c6], [d7cb, d7fb], [fb00, fb06],
    [fb13, fb17], [fb50, fbb1], [fbd3, fd3d], [fd50, fd8f], [fd92, fdc7],
    [fdf0, fdfb], [fe70, fe74], [fe76, fefc], [ff21, ff3a], [ff41, ff5a],
    [ffa0, ffbe], [ffc2, ffc7], [ffca, ffcf], [ffd2, ffd7], [ffda, ffdc],
    [10000, 1000b], [1000d, 10026], [10028, 1003a], [1003c, 1003d],
    [1003f, 1004d], [10050, 1005d], [10080, 100fa], [10140, 10174],
    [10280, 1029c], [102a0, 102d0], [10300, 1031f], [1032d, 1034a],
    [10350, 10375], [10380, 1039d], [103a0, 103c3], [103c8, 103cf],
    [103d1, 103d5], [10400, 1049d], [104b0, 104d3], [104d8, 104fb],
    [10500, 10527], [10530, 10563], [10600, 10736], [10740, 10755],
    [10760, 10767], [10800, 10805], [10808, 10808], [1080a, 10835],
    [10837, 10838], [1083c, 1083c], [1083f, 10855], [10860, 10876],
    [10880, 1089e], [108e0, 108f2], [108f4, 108f5], [10900, 10915],
    [10920, 10939], [10980, 109b7], [109be, 109bf], [10a00, 10a00],
    [10a10, 10a13], [10a15, 10a17], [10a19, 10a35], [10a60, 10a7c],
    [10a80, 10a9c], [10ac0, 10ac7], [10ac9, 10ae4], [10b00, 10b35],
    [10b40, 10b55], [10b60, 10b72], [10b80, 10b91], [10c00, 10c48],
    [10c80, 10cb2], [10cc0, 10cf2], [10d00, 10d23], [10e80, 10ea9],
    [10eb0, 10eb1], [10f00, 10f1c], [10f27, 10f27], [10f30, 10f45],
    [10fb0, 10fc4], [10fe0, 10ff6], [11003, 11037], [11083, 110af],
    [110d0, 110e8], [11103, 11126], [11144, 11144], [11147, 11147],
    [11150, 11172], [11176, 11176], [11183, 111b2], [111c1, 111c4],
    [111da, 111da], [111dc, 111dc], [11200, 11211], [11213, 1122b],
    [11280, 11286], [11288, 11288], [1128a, 1128d], [1128f, 1129d],
    [1129f, 112a8], [112b0, 112de], [11305, 1130c], [1130f, 11310],
    [11313, 11328], [1132a, 11330], [11332, 11333], [11335, 11339],
    [1133d, 1133d], [11350, 11350], [1135d, 11361], [11400, 11434],
    [11447, 1144a], [1145f, 11461], [11480, 114af], [114c4, 114c5],
    [114c7, 114c7], [11580, 115ae], [115d8, 115db], [11600, 1162f],
    [11644, 11644], [11680, 116aa], [116b8, 116b8], [11800, 1182b],
    [118a0, 118df], [118ff, 11906], [11909, 11909], [1190c, 11913],
    [11915, 11916], [11918, 1192f], [1193f, 1193f], [11941, 11941],
    [119a0, 119a7], [119aa, 119d0], [119e1, 119e1], [119e3, 119e3],
    [11a00, 11a00], [11a0b, 11a32], [11a3a, 11a3a], [11a50, 11a50],
    [11a5c, 11a89], [11a9d, 11a9d], [11ac0, 11af8], [11c00, 11c08],
    [11c0a, 11c2e], [11c40, 11c40], [11c72, 11c8f], [11d00, 11d06],
    [11d08, 11d09], [11d0b, 11d30], [11d46, 11d46], [11d60, 11d65],
    [11d67, 11d68], [11d6a, 11d89], [11d98, 11d98], [11ee0, 11ef2],
    [11fb0, 11fb0], [12000, 12399], [12400, 1246e], [12480, 12543],
    [13000, 1342e], [14400, 14646], [16800, 16a38], [16a40, 16a5e],
    [16ad0, 16aed], [16b00, 16b2f], [16b40, 16b43], [16b63, 16b77],
    [16b7d, 16b8f], [16e40, 16e7f], [16f00, 16f4a], [16f50, 16f50],
    [16f93, 16f9f], [16fe0, 16fe1], [16fe3, 16fe3], [1bc00, 1bc6a],
    [1bc70, 1bc7c], [1bc80, 1bc88], [1bc90, 1bc99], [1d400, 1d454],
    [1d456, 1d49c], [1d49e, 1d49f], [1d4a2, 1d4a2], [1d4a5, 1d4a6],
    [1d4a9, 1d4ac], [1d4ae, 1d4b9], [1d4bb, 1d4bb], [1d4bd, 1d4c3],
    [1d4c5, 1d505], [1d507, 1d50a], [1d50d, 1d514], [1d516, 1d51c],
    [1d51e, 1d539], [1d53b, 1d53e], [1d540, 1d544], [1d546, 1d546],
    [1d54a, 1d550], [1d552, 1d6a5], [1d6a8, 1d6c0], [1d6c2, 1d6da],
    [1d6dc, 1d6fa], [1d6fc, 1d714], [1d716, 1d734], [1d736, 1d74e],
    [1d750, 1d76e], [1d770, 1d788], [1d78a, 1d7a8], [1d7aa, 1d7c2],
    [1d7c4, 1d7cb], [1e100, 1e12c], [1e137, 1e13d], [1e14e, 1e14e],
    [1e2c0, 1e2eb], [1e800, 1e8c4], [1e900, 1e943], [1e94b, 1e94b],
    [1ee00, 1ee03], [1ee05, 1ee1f], [1ee21, 1ee22], [1ee24, 1ee24],
    [1ee27, 1ee27], [1ee29, 1ee32], [1ee34, 1ee37], [1ee39, 1ee39],
    [1ee3b, 1ee3b], [1ee42, 1ee42], [1ee47, 1ee47], [1ee49, 1ee49],
    [1ee4b, 1ee4b], [1ee4d, 1ee4f], [1ee51, 1ee52], [1ee54, 1ee54],
    [1ee57, 1ee57], [1ee59, 1ee59], [1ee5b, 1ee5b], [1ee5d, 1ee5d],
    [1ee5f, 1ee5f], [1ee61, 1ee62], [1ee64, 1ee64], [1ee67, 1ee6a],
    [1ee6c, 1ee72], [1ee74, 1ee77], [1ee79, 1ee7c], [1ee7e, 1ee7e],
    [1ee80, 1ee89], [1ee8b, 1ee9b], [1eea1, 1eea3], [1eea5, 1eea9],
    [1eeab, 1eebb], [1f130, 1f149], [1f150, 1f169], [1f170, 1f189]**/


    namespace {
    const static UnicodeSet::run_t __le_Set_runs[] = {
    {Empty, 2}, {Mixed, 2}, {Empty, 1}, {Mixed, 3}, {Full, 14}, {Mixed, 1},
    {Full, 1}, {Empty, 3}, {Mixed, 3}, {Full, 1}, {Mixed, 1}, {Full, 4},
    {Mixed, 1}, {Full, 4}, {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Empty, 1}, {Full, 1}, {Mixed, 2}, {Full, 2}, {Mixed, 5},
    {Full, 2}, {Mixed, 7}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 23},
    {Empty, 1}, {Mixed, 15}, {Empty, 9}, {Mixed, 1}, {Empty, 1}, {Mixed, 3},
    {Empty, 8}, {Full, 1}, {Mixed, 2}, {Full, 10}, {Mixed, 1}, {Full, 1},
    {Mixed, 3}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 1},
    {Mixed, 1}, {Full, 2}, {Mixed, 2}, {Full, 18}, {Mixed, 2}, {Full, 2},
    {Mixed, 5}, {Empty, 5}, {Full, 2}, {Mixed, 3}, {Full, 1}, {Mixed, 2},
    {Empty, 7}, {Mixed, 1}, {Empty, 7}, {Mixed, 3}, {Empty, 1}, {Mixed, 2},
    {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 5}, {Empty, 1}, {Mixed, 1},
    {Full, 6}, {Empty, 2}, {Full, 8}, {Mixed, 1}, {Full, 1}, {Mixed, 2},
    {Full, 1}, {Mixed, 3}, {Empty, 3}, {Mixed, 2}, {Empty, 3}, {Mixed, 3},
    {Full, 1}, {Mixed, 1}, {Empty, 24}, {Mixed, 1}, {Full, 1}, {Mixed, 1},
    {Empty, 56}, {Full, 1}, {Mixed, 2}, {Full, 4}, {Mixed, 1}, {Full, 1},
    {Mixed, 1}, {Full, 1}, {Mixed, 4}, {Empty, 2}, {Mixed, 1}, {Empty, 14},
    {Mixed, 2}, {Empty, 6}, {Mixed, 2}, {Full, 2}, {Mixed, 1}, {Full, 1},
    {Empty, 882}, {Full, 36}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Full, 8},
    {Mixed, 2}, {Full, 1}, {Mixed, 2}, {Full, 2}, {Mixed, 2}, {Full, 5},
    {Mixed, 4}, {Full, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 8}, {Empty, 1},
    {Full, 1}, {Mixed, 2}, {Empty, 4}, {Mixed, 3}, {Full, 1}, {Mixed, 1},
    {Full, 3}, {Mixed, 1}, {Full, 349}, {Mixed, 3}, {Empty, 280},
    {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 2}, {Full, 10},
    {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 2}, {Empty, 3},
    {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 2},
    {Mixed, 2}, {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Full, 3}, {Mixed, 1},
    {Empty, 2}, {Full, 1}, {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Full, 1},
    {Mixed, 1}, {Empty, 1}, {Full, 1}, {Mixed, 4}, {Full, 1}, {Mixed, 1},
    {Empty, 1}, {Full, 4}, {Mixed, 4}, {Full, 1}, {Mixed, 1}, {Full, 1},
    {Mixed, 1}, {Empty, 4}, {Full, 9}, {Mixed, 3}, {Empty, 4}, {Mixed, 5},
    {Empty, 2}, {Mixed, 3}, {Empty, 2}, {Full, 1}, {Mixed, 1}, {Empty, 2},
    {Mixed, 2}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 2}, {Full, 1},
    {Mixed, 4}, {Empty, 3}, {Full, 2}, {Mixed, 1}, {Empty, 1}, {Full, 1},
    {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 10},
    {Full, 1}, {Mixed, 1}, {Empty, 2}, {Mixed, 3}, {Empty, 2}, {Mixed, 5},
    {Empty, 2}, {Mixed, 11}, {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 3},
    {Empty, 1}, {Mixed, 4}, {Empty, 4}, {Full, 1}, {Mixed, 3}, {Full, 1},
    {Mixed, 2}, {Empty, 5}, {Full, 1}, {Mixed, 2}, {Empty, 1}, {Full, 1},
    {Mixed, 2}, {Empty, 1}, {Full, 1}, {Mixed, 1}, {Empty, 10}, {Full, 1},
    {Mixed, 1}, {Empty, 3}, {Full, 2}, {Mixed, 4}, {Empty, 2}, {Mixed, 6},
    {Full, 1}, {Mixed, 1}, {Empty, 1}, {Full, 1}, {Mixed, 1}, {Empty, 8},
    {Mixed, 5}, {Empty, 3}, {Mixed, 5}, {Empty, 10}, {Mixed, 1}, {Empty, 5},
    {Mixed, 1}, {Empty, 2}, {Full, 28}, {Mixed, 1}, {Empty, 3}, {Full, 3},
    {Mixed, 1}, {Full, 6}, {Mixed, 1}, {Empty, 85}, {Full, 33}, {Mixed, 1},
    {Empty, 126}, {Full, 18}, {Mixed, 1}, {Empty, 269}, {Full, 17},
    {Mixed, 2}, {Empty, 3}, {Mixed, 2}, {Full, 1}, {Mixed, 4}, {Empty, 21},
    {Full, 2}, {Empty, 4}, {Full, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
    {Empty, 2}, {Mixed, 1}, {Empty, 608}, {Full, 3}, {Mixed, 2},
    {Empty, 187}, {Full, 2}, {Mixed, 1}, {Full, 1}, {Mixed, 3}, {Full, 1},
    {Mixed, 3}, {Full, 10}, {Mixed, 10}, {Empty, 73}, {Full, 1}, {Mixed, 2},
    {Empty, 11}, {Full, 1}, {Mixed, 1}, {Empty, 40}, {Full, 6}, {Mixed, 1},
    {Empty, 1}, {Full, 2}, {Mixed, 1}, {Empty, 37}, {Mixed, 6}, {Empty, 19},
    {Mixed, 4}, {Empty, 30835}};
    const static UnicodeSet::bitquad_t  __le_Set_quads[] = {
    0x07fffffe, 0x07fffffe, 0x04200400, 0xff7fffff, 0xff7fffff, 0xc0ffffff,
    0xbcdf0000, 0xffffd740, 0xfffffffb, 0xffbfffff, 0xfffffc03, 0xfffeffff,
    0x5e7fffff, 0x000005ff, 0x00080000, 0x000007ff, 0xfffec000, 0x002fffff,
    0x9c00c060, 0xfffd0000, 0x0000ffff, 0xffffe000, 0x0002003f, 0xfffffc00,
    0x043007ff, 0x043fffff, 0x00000110, 0x01ffffff, 0x000007ff, 0xffdfffff,
    0x000000ff, 0xfffffff0, 0x23ffffff, 0xff010000, 0xfffe0003, 0xfff99fe1,
    0x23c5fdff, 0xb0004000, 0x10030003, 0xfff987e0, 0x036dfdff, 0x5e000000,
    0x001c0000, 0xfffbbfe0, 0x23edfdff, 0x00010000, 0x02000003, 0xfff99fe0,
    0x23edfdff, 0xb0000000, 0x00020003, 0xd63dc7e8, 0x03ffc718, 0x00010000,
    0xfffddfe0, 0x23fffdff, 0x07000000, 0x00000003, 0xfffddfe1, 0x23effdff,
    0x40000000, 0x00060003, 0xfffddff0, 0x27ffffff, 0x80704000, 0xfc000003,
    0xfc7fffe0, 0x2ffbffff, 0x0000007f, 0x00000001, 0xfffffeff, 0x00001fff,
    0x00001f00, 0xffff20bf, 0xf7ffffff, 0x3d7f3dff, 0xffff3dff, 0x7f3dffff,
    0xff7fff3d, 0xff3dffff, 0x07ffffff, 0x0000ffff, 0x3f3fffff, 0xfffffffe,
    0xffff9fff, 0x07fffffe, 0x01ffc7ff, 0x0003dfff, 0x0003ffff, 0x0003ffff,
    0x0001dfff, 0x01ffffff, 0xffffff9f, 0xffff05ff, 0x003fffff, 0x7fffffff,
    0x007fffff, 0xffffffe0, 0x000fffff, 0x00000fe0, 0xfffffff8, 0xfc00c001,
    0x0000003f, 0x0000000f, 0xfc00e000, 0x3fffffff, 0xffff01ff, 0xe7ffffff,
    0x046fde00, 0x3f3fffff, 0xaaff3f3f, 0x3fffffff, 0x5fdfffff, 0x0fcf1fdc,
    0x1fdc1fff, 0x80020000, 0x1fff0000, 0x3e2ffc84, 0xf3ffbd50, 0x000043e0,
    0x000001ff, 0xffc00000, 0x000003ff, 0xffff7fff, 0x7fffffff, 0x000c781f,
    0xffff20bf, 0x000080ff, 0x007fffff, 0x7f7f7f7f, 0x7f7f7f7f, 0x00008000,
    0x00000020, 0x18000000, 0xffffffe0, 0xfffeffff, 0x00007fff, 0x00001fff,
    0xffff0000, 0x3fffffff, 0xffff1fff, 0x00000c00, 0x80007fff, 0x3fffffff,
    0x0000ffff, 0xffffff00, 0x000007fc, 0xffe00000, 0xfffff7bb, 0x00000007,
    0x000fffff, 0xfffffffc, 0x000fffff, 0x68fc0000, 0xfffffc00, 0xffff003f,
    0x0000007f, 0x1fffffff, 0xfffffff0, 0x0007ffff, 0x00008000, 0x000001ff,
    0x00000ff7, 0x001c07ff, 0x007e7e7e, 0xffff7f7f, 0xffff03ff, 0x00000007,
    0xffff000f, 0xfffff87f, 0x0fffffff, 0x00f8007f, 0xffff0000, 0x0003ffff,
    0xfff80000, 0x3fffffff, 0xffff0000, 0xfffcffff, 0x000000ff, 0x0fff0000,
    0xffdf0000, 0x1fffffff, 0x07fffffe, 0x07fffffe, 0x7fffffff, 0x1cfcfcfc,
    0xffffefff, 0xb7ffff7f, 0x3fff3fff, 0x07ffffff, 0x001fffff, 0x1fffffff,
    0x0001ffff, 0xffffe000, 0xffff07ff, 0x003fffff, 0x3fffffff, 0x003eff0f,
    0x3fffffff, 0xffff0000, 0xff0fffff, 0x0fffffff, 0xffff00ff, 0x0000000f,
    0x007fffff, 0x003fffff, 0x000000ff, 0xfffffd3f, 0x91bfffff, 0x003fffff,
    0x007fffff, 0x7fffffff, 0x0037ffff, 0x003fffff, 0x03ffffff, 0xc0ffffff,
    0xfeef0001, 0x003fffff, 0x1fffffff, 0x1fffffff, 0xfffffeff, 0x0000001f,
    0x003fffff, 0x003fffff, 0x0007ffff, 0x0003ffff, 0x000001ff, 0x0007ffff,
    0x0007ffff, 0x0000000f, 0x000303ff, 0x1fffffff, 0xffff0080, 0x0000003f,
    0xffff0000, 0x0000001f, 0x007fffff, 0xfffffff8, 0x00ffffff, 0xfffffff8,
    0x0000ffff, 0xffff0000, 0x000001ff, 0xfffffff8, 0x0000007f, 0xffff0090,
    0x0047ffff, 0xfffffff8, 0x0007ffff, 0x1400001e, 0xfffbffff, 0x00000fff,
    0xbfffbd7f, 0xffff01ff, 0x7fffffff, 0xfff99fe0, 0x23edfdff, 0xe0010000,
    0x00000003, 0x001fffff, 0x80000780, 0x00000003, 0x0000ffff, 0x000000b0,
    0x00007fff, 0x0f000000, 0x0000ffff, 0x00000010, 0x010007ff, 0x00000fff,
    0x80000000, 0xff6ff27f, 0x8000ffff, 0x00000002, 0xfffffcff, 0x0001ffff,
    0x0000000a, 0xfffff801, 0x0407ffff, 0xf0010000, 0x200003ff, 0x01ffffff,
    0xfffffdff, 0x00007fff, 0x00000001, 0xfffc0000, 0x0000ffff, 0xfffffb7f,
    0x0001ffff, 0x00000040, 0xfffffdbf, 0x010003ff, 0x0007ffff, 0x00010000,
    0x03ffffff, 0x00007fff, 0x0000000f, 0x00007fff, 0x0000007f, 0x01ffffff,
    0x7fffffff, 0xffff0000, 0x00003fff, 0x0000ffff, 0x0000000f, 0xe0fffff8,
    0x0000ffff, 0x000107ff, 0xfff80000, 0x0000000b, 0x1fff07ff, 0x03ff01ff,
    0xffdfffff, 0xdfffffff, 0xebffde64, 0xffffffef, 0xdfdfe7bf, 0x7bffffff,
    0xfffdfc5f, 0xffffff3f, 0xf7fffffd, 0xf7ffffff, 0xffdfffff, 0xffdfffff,
    0xffff7fff, 0xffff7fff, 0xfffffdff, 0xfffffdff, 0x00000ff7, 0x3f801fff,
    0x00004000, 0x00000fff, 0x0000001f, 0x0000080f, 0xffffffef, 0x0af7fe96,
    0xaa96ea84, 0x5ef7f796, 0x0ffffbff, 0x0ffffbee, 0xffff0000, 0xffff03ff,
    0xffff03ff, 0x000003ff};
    }

    const static UnicodeSet le_Set{const_cast<UnicodeSet::run_t *>(__le_Set_runs), 317, 0, const_cast<UnicodeSet::bitquad_t *>(__le_Set_quads), 344, 0};

    /** Code Point Ranges for ML
    [003a, 003a], [00b7, 00b7], [0387, 0387], [055f, 055f], [05f4, 05f4],
    [2027, 2027], [fe13, fe13], [fe55, fe55], [ff1a, ff1a]**/


    namespace {
    const static UnicodeSet::run_t __ml_Set_runs[] = {
    {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 22}, {Mixed, 1},
    {Empty, 13}, {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 209},
    {Mixed, 1}, {Empty, 1774}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
    {Empty, 5}, {Mixed, 1}, {Empty, 32775}};
    const static UnicodeSet::bitquad_t  __ml_Set_quads[] = {
    0x04000000, 0x00800000, 0x00000080, 0x80000000, 0x00100000, 0x00000080,
    0x00080000, 0x00200000, 0x04000000};
    }

    const static UnicodeSet ml_Set{const_cast<UnicodeSet::run_t *>(__ml_Set_runs), 19, 0, const_cast<UnicodeSet::bitquad_t *>(__ml_Set_quads), 9, 0};

    /** Code Point Ranges for MN
    [002c, 002c], [003b, 003b], [037e, 037e], [0589, 0589], [060c, 060d],
    [066c, 066c], [07f8, 07f8], [2044, 2044], [fe10, fe10], [fe14, fe14],
    [fe50, fe50], [fe54, fe54], [ff0c, ff0c], [ff1b, ff1b]**/


    namespace {
    const static UnicodeSet::run_t __mn_Set_runs[] = {
    {Empty, 1}, {Mixed, 1}, {Empty, 25}, {Mixed, 1}, {Empty, 16},
    {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 11},
    {Mixed, 1}, {Empty, 194}, {Mixed, 1}, {Empty, 1773}, {Mixed, 1},
    {Empty, 1}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 32775}};
    const static UnicodeSet::bitquad_t  __mn_Set_quads[] = {
    0x08001000, 0x40000000, 0x00000200, 0x00003000, 0x00001000, 0x01000000,
    0x00000010, 0x00110000, 0x00110000, 0x08001000};
    }

    const static UnicodeSet mn_Set{const_cast<UnicodeSet::run_t *>(__mn_Set_runs), 21, 0, const_cast<UnicodeSet::bitquad_t *>(__mn_Set_quads), 10, 0};

    /** Code Point Ranges for MB
    [002e, 002e], [2018, 2019], [2024, 2024], [fe52, fe52], [ff07, ff07],
    [ff0e, ff0e]**/


    namespace {
    const static UnicodeSet::run_t __mb_Set_runs[] = {
    {Empty, 1}, {Mixed, 1}, {Empty, 254}, {Mixed, 2}, {Empty, 1776},
    {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 32775}};
    const static UnicodeSet::bitquad_t  __mb_Set_quads[] = {
    0x00004000, 0x03000000, 0x00000010, 0x00040000, 0x00004080};
    }

    const static UnicodeSet mb_Set{const_cast<UnicodeSet::run_t *>(__mb_Set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__mb_Set_quads), 5, 0};

    /** Code Point Ranges for NU
    [0030, 0039], [0660, 0669], [066b, 066b], [06f0, 06f9], [07c0, 07c9],
    [0966, 096f], [09e6, 09ef], [0a66, 0a6f], [0ae6, 0aef], [0b66, 0b6f],
    [0be6, 0bef], [0c66, 0c6f], [0ce6, 0cef], [0d66, 0d6f], [0de6, 0def],
    [0e50, 0e59], [0ed0, 0ed9], [0f20, 0f29], [1040, 1049], [1090, 1099],
    [17e0, 17e9], [1810, 1819], [1946, 194f], [19d0, 19d9], [1a80, 1a89],
    [1a90, 1a99], [1b50, 1b59], [1bb0, 1bb9], [1c40, 1c49], [1c50, 1c59],
    [a620, a629], [a8d0, a8d9], [a900, a909], [a9d0, a9d9], [a9f0, a9f9],
    [aa50, aa59], [abf0, abf9], [ff10, ff19], [104a0, 104a9],
    [10d30, 10d39], [11066, 1106f], [110f0, 110f9], [11136, 1113f],
    [111d0, 111d9], [112f0, 112f9], [11450, 11459], [114d0, 114d9],
    [11650, 11659], [116c0, 116c9], [11730, 11739], [118e0, 118e9],
    [11950, 11959], [11c50, 11c59], [11d50, 11d59], [11da0, 11da9],
    [16a60, 16a69], [16b50, 16b59], [1d7ce, 1d7ff], [1e140, 1e149],
    [1e2f0, 1e2f9], [1e950, 1e959], [1fbf0, 1fbf9]**/


    namespace {
    const static UnicodeSet::run_t __nu_Set_runs[] = {
    {Empty, 1}, {Mixed, 1}, {Empty, 49}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 6}, {Mixed, 1}, {Empty, 12}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 8}, {Mixed, 1},
    {Empty, 1}, {Mixed, 1}, {Empty, 58}, {Mixed, 2}, {Empty, 9}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 5}, {Mixed, 1},
    {Empty, 2}, {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 1102},
    {Mixed, 1}, {Empty, 20}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 5},
    {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Empty, 12}, {Mixed, 1},
    {Empty, 664}, {Mixed, 1}, {Empty, 44}, {Mixed, 1}, {Empty, 67},
    {Mixed, 1}, {Empty, 25}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 1},
    {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 10},
    {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 11}, {Mixed, 1}, {Empty, 3},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 13}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Empty, 23}, {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Empty, 613}, {Mixed, 1}, {Empty, 6}, {Mixed, 1},
    {Empty, 867}, {Mixed, 1}, {Full, 1}, {Empty, 74}, {Mixed, 1},
    {Empty, 12}, {Mixed, 1}, {Empty, 50}, {Mixed, 1}, {Empty, 148},
    {Mixed, 1}, {Empty, 30752}};
    const static UnicodeSet::bitquad_t  __nu_Set_quads[] = {
    0x03ff0000, 0x00000bff, 0x03ff0000, 0x000003ff, 0x0000ffc0, 0x0000ffc0,
    0x0000ffc0, 0x0000ffc0, 0x0000ffc0, 0x0000ffc0, 0x0000ffc0, 0x0000ffc0,
    0x0000ffc0, 0x0000ffc0, 0x03ff0000, 0x03ff0000, 0x000003ff, 0x000003ff,
    0x03ff0000, 0x000003ff, 0x03ff0000, 0x0000ffc0, 0x03ff0000, 0x03ff03ff,
    0x03ff0000, 0x03ff0000, 0x03ff03ff, 0x000003ff, 0x03ff0000, 0x000003ff,
    0x03ff0000, 0x03ff0000, 0x03ff0000, 0x03ff0000, 0x03ff0000, 0x000003ff,
    0x03ff0000, 0x0000ffc0, 0x03ff0000, 0xffc00000, 0x03ff0000, 0x03ff0000,
    0x03ff0000, 0x03ff0000, 0x03ff0000, 0x000003ff, 0x03ff0000, 0x000003ff,
    0x03ff0000, 0x03ff0000, 0x03ff0000, 0x000003ff, 0x000003ff, 0x03ff0000,
    0xffffc000, 0x000003ff, 0x03ff0000, 0x03ff0000, 0x03ff0000};
    }

    const static UnicodeSet nu_Set{const_cast<UnicodeSet::run_t *>(__nu_Set_runs), 116, 0, const_cast<UnicodeSet::bitquad_t *>(__nu_Set_quads), 59, 0};

    /** Code Point Ranges for EX
    [005f, 005f], [202f, 202f], [203f, 2040], [2054, 2054], [fe33, fe34],
    [fe4d, fe4f], [ff3f, ff3f]**/


    namespace {
    const static UnicodeSet::run_t __ex_Set_runs[] = {
    {Empty, 2}, {Mixed, 1}, {Empty, 254}, {Mixed, 2}, {Empty, 1774},
    {Mixed, 2}, {Empty, 6}, {Mixed, 1}, {Empty, 32774}};
    const static UnicodeSet::bitquad_t  __ex_Set_quads[] = {
    0x80000000, 0x80008000, 0x00100001, 0x00180000, 0x0000e000, 0x80000000};
    }

    const static UnicodeSet ex_Set{const_cast<UnicodeSet::run_t *>(__ex_Set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__ex_Set_quads), 6, 0};

    /** Code Point Ranges for ZWJ
    [200d, 200d]**/


    namespace {
    const static UnicodeSet::run_t __zwj_Set_runs[] = {
    {Empty, 256}, {Mixed, 1}, {Empty, 34559}};
    const static UnicodeSet::bitquad_t  __zwj_Set_quads[] = {
    0x00002000};
    }

    const static UnicodeSet zwj_Set{const_cast<UnicodeSet::run_t *>(__zwj_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__zwj_Set_quads), 1, 0};

    /** Code Point Ranges for WSegSpace
    [0020, 0020], [1680, 1680], [2000, 2006], [2008, 200a], [205f, 205f],
    [3000, 3000]**/


    namespace {
    const static UnicodeSet::run_t __wsegspace_Set_runs[] = {
    {Empty, 1}, {Mixed, 1}, {Empty, 178}, {Mixed, 1}, {Empty, 75},
    {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 125}, {Mixed, 1},
    {Empty, 34431}};
    const static UnicodeSet::bitquad_t  __wsegspace_Set_quads[] = {
    0x00000001, 0x00000001, 0x0000077f, 0x80000000, 0x00000001};
    }

    const static UnicodeSet wsegspace_Set{const_cast<UnicodeSet::run_t *>(__wsegspace_Set_runs), 11, 0, const_cast<UnicodeSet::bitquad_t *>(__wsegspace_Set_quads), 5, 0};

    /** Code Point Ranges for EB
    **/


    namespace {
    const static UnicodeSet::run_t __eb_Set_runs[] = {
    {Empty, 34816}};
    const static UnicodeSet::bitquad_t * const __eb_Set_quads = nullptr;
    }

    const static UnicodeSet eb_Set{const_cast<UnicodeSet::run_t *>(__eb_Set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__eb_Set_quads), 0, 0};

    /** Code Point Ranges for EBG
    **/


    namespace {
    const static UnicodeSet::run_t __ebg_Set_runs[] = {
    {Empty, 34816}};
    const static UnicodeSet::bitquad_t * const __ebg_Set_quads = nullptr;
    }

    const static UnicodeSet ebg_Set{const_cast<UnicodeSet::run_t *>(__ebg_Set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__ebg_Set_quads), 0, 0};

    /** Code Point Ranges for EM
    **/


    namespace {
    const static UnicodeSet::run_t __em_Set_runs[] = {
    {Empty, 34816}};
    const static UnicodeSet::bitquad_t * const __em_Set_quads = nullptr;
    }

    const static UnicodeSet em_Set{const_cast<UnicodeSet::run_t *>(__em_Set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__em_Set_quads), 0, 0};

    /** Code Point Ranges for GAZ
    **/


    namespace {
    const static UnicodeSet::run_t __gaz_Set_runs[] = {
    {Empty, 34816}};
    const static UnicodeSet::bitquad_t * const __gaz_Set_quads = nullptr;
    }

    const static UnicodeSet gaz_Set{const_cast<UnicodeSet::run_t *>(__gaz_Set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__gaz_Set_quads), 0, 0};

    static EnumeratedPropertyObject property_object
        {WB,
        WB_ns::independent_prop_values,
        std::move(WB_ns::enum_names),
        std::move(WB_ns::value_names),
        std::move(WB_ns::aliases_only_map),{
        &xx_Set, &dq_Set, &sq_Set, &hl_Set, &cr_Set, &lf_Set, &nl_Set,
        &extend_Set, &ri_Set, &fo_Set, &ka_Set, &le_Set, &ml_Set, &mn_Set,
        &mb_Set, &nu_Set, &ex_Set, &zwj_Set, &wsegspace_Set, &eb_Set,
        &ebg_Set, &em_Set, &gaz_Set
        }};
    }
PropertyObject * get_WB_PropertyObject() {  return & WB_ns::property_object; }
}
