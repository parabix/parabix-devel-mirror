
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  PropList
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
    namespace AHEX_ns {
        /** Code Point Ranges for AHex
        [0030, 0039], [0041, 0046], [0061, 0066]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 3}, {Empty, 34812}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x03ff0000, 0x0000007e, 0x0000007e};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 3, 0};

        static BinaryPropertyObject property_object{AHex, std::move(codepoint_set)};
    }
PropertyObject * get_AHEX_PropertyObject() {  return & AHEX_ns::property_object; }
    namespace BIDI_C_ns {
        /** Code Point Ranges for Bidi_C
        [061c, 061c], [200e, 200f], [202a, 202e], [2066, 2069]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 48}, {Mixed, 1}, {Empty, 207}, {Mixed, 2}, {Empty, 1},
        {Mixed, 1}, {Empty, 34556}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x10000000, 0x0000c000, 0x00007c00, 0x000003c0};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 4, 0};

        static BinaryPropertyObject property_object{Bidi_C, std::move(codepoint_set)};
    }
PropertyObject * get_BIDI_C_PropertyObject() {  return & BIDI_C_ns::property_object; }
    namespace DASH_ns {
        /** Code Point Ranges for Dash
        [002d, 002d], [058a, 058a], [05be, 05be], [1400, 1400],
        [1806, 1806], [2010, 2015], [2053, 2053], [207b, 207b],
        [208b, 208b], [2212, 2212], [2e17, 2e17], [2e1a, 2e1a],
        [2e3a, 2e3b], [2e40, 2e40], [301c, 301c], [3030, 3030],
        [30a0, 30a0], [fe31, fe32], [fe58, fe58], [fe63, fe63],
        [ff0d, ff0d], [10ead, 10ead]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 1}, {Empty, 42}, {Mixed, 2}, {Empty, 114},
        {Mixed, 1}, {Empty, 31}, {Mixed, 1}, {Empty, 63}, {Mixed, 1},
        {Empty, 1}, {Mixed, 3}, {Empty, 11}, {Mixed, 1}, {Empty, 95},
        {Mixed, 3}, {Empty, 13}, {Mixed, 2}, {Empty, 3}, {Mixed, 1},
        {Empty, 1643}, {Mixed, 3}, {Empty, 4}, {Mixed, 1}, {Empty, 124},
        {Mixed, 1}, {Empty, 32650}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00002000, 0x00000400, 0x40000000, 0x00000001, 0x00000040,
        0x003f0000, 0x00080000, 0x08000000, 0x00000800, 0x00040000,
        0x04800000, 0x0c000000, 0x00000001, 0x10000000, 0x00010000,
        0x00000001, 0x00060000, 0x01000000, 0x00000008, 0x00002000,
        0x00002000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 27, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 21, 0};

        static BinaryPropertyObject property_object{Dash, std::move(codepoint_set)};
    }
PropertyObject * get_DASH_PropertyObject() {  return & DASH_ns::property_object; }
    namespace DEP_ns {
        /** Code Point Ranges for Dep
        [0149, 0149], [0673, 0673], [0f77, 0f77], [0f79, 0f79],
        [17a3, 17a4], [206a, 206f], [2329, 232a], [e0001, e0001]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 10}, {Mixed, 1}, {Empty, 40}, {Mixed, 1}, {Empty, 71},
        {Mixed, 1}, {Empty, 65}, {Mixed, 1}, {Empty, 69}, {Mixed, 1},
        {Empty, 21}, {Mixed, 1}, {Empty, 28390}, {Mixed, 1}, {Empty, 6143}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00000200, 0x00080000, 0x02800000, 0x00000018, 0x0000fc00,
        0x00000600, 0x00000002};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 15, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 7, 0};

        static BinaryPropertyObject property_object{Dep, std::move(codepoint_set)};
    }
PropertyObject * get_DEP_PropertyObject() {  return & DEP_ns::property_object; }
    namespace DIA_ns {
        /** Code Point Ranges for Dia
        [005e, 005e], [0060, 0060], [00a8, 00a8], [00af, 00af],
        [00b4, 00b4], [00b7, 00b8], [02b0, 034e], [0350, 0357],
        [035d, 0362], [0374, 0375], [037a, 037a], [0384, 0385],
        [0483, 0487], [0559, 0559], [0591, 05a1], [05a3, 05bd],
        [05bf, 05bf], [05c1, 05c2], [05c4, 05c4], [064b, 0652],
        [0657, 0658], [06df, 06e0], [06e5, 06e6], [06ea, 06ec],
        [0730, 074a], [07a6, 07b0], [07eb, 07f5], [0818, 0819],
        [08e3, 08fe], [093c, 093c], [094d, 094d], [0951, 0954],
        [0971, 0971], [09bc, 09bc], [09cd, 09cd], [0a3c, 0a3c],
        [0a4d, 0a4d], [0abc, 0abc], [0acd, 0acd], [0afd, 0aff],
        [0b3c, 0b3c], [0b4d, 0b4d], [0b55, 0b55], [0bcd, 0bcd],
        [0c4d, 0c4d], [0cbc, 0cbc], [0ccd, 0ccd], [0d3b, 0d3c],
        [0d4d, 0d4d], [0dca, 0dca], [0e47, 0e4c], [0e4e, 0e4e],
        [0eba, 0eba], [0ec8, 0ecc], [0f18, 0f19], [0f35, 0f35],
        [0f37, 0f37], [0f39, 0f39], [0f3e, 0f3f], [0f82, 0f84],
        [0f86, 0f87], [0fc6, 0fc6], [1037, 1037], [1039, 103a],
        [1063, 1064], [1069, 106d], [1087, 108d], [108f, 108f],
        [109a, 109b], [135d, 135f], [17c9, 17d3], [17dd, 17dd],
        [1939, 193b], [1a75, 1a7c], [1a7f, 1a7f], [1ab0, 1abd],
        [1b34, 1b34], [1b44, 1b44], [1b6b, 1b73], [1baa, 1bab],
        [1c36, 1c37], [1c78, 1c7d], [1cd0, 1ce8], [1ced, 1ced],
        [1cf4, 1cf4], [1cf7, 1cf9], [1d2c, 1d6a], [1dc4, 1dcf],
        [1df5, 1df9], [1dfd, 1dff], [1fbd, 1fbd], [1fbf, 1fc1],
        [1fcd, 1fcf], [1fdd, 1fdf], [1fed, 1fef], [1ffd, 1ffe],
        [2cef, 2cf1], [2e2f, 2e2f], [302a, 302f], [3099, 309c],
        [30fc, 30fc], [a66f, a66f], [a67c, a67d], [a67f, a67f],
        [a69c, a69d], [a6f0, a6f1], [a700, a721], [a788, a78a],
        [a7f8, a7f9], [a8c4, a8c4], [a8e0, a8f1], [a92b, a92e],
        [a953, a953], [a9b3, a9b3], [a9c0, a9c0], [a9e5, a9e5],
        [aa7b, aa7d], [aabf, aac2], [aaf6, aaf6], [ab5b, ab5f],
        [ab69, ab6b], [abec, abed], [fb1e, fb1e], [fe20, fe2f],
        [ff3e, ff3e], [ff40, ff40], [ff70, ff70], [ff9e, ff9f],
        [ffe3, ffe3], [102e0, 102e0], [10ae5, 10ae6], [10d22, 10d27],
        [10f46, 10f50], [110b9, 110ba], [11133, 11134], [11173, 11173],
        [111c0, 111c0], [111ca, 111cc], [11235, 11236], [112e9, 112ea],
        [1133c, 1133c], [1134d, 1134d], [11366, 1136c], [11370, 11374],
        [11442, 11442], [11446, 11446], [114c2, 114c3], [115bf, 115c0],
        [1163f, 1163f], [116b6, 116b7], [1172b, 1172b], [11839, 1183a],
        [1193d, 1193e], [11943, 11943], [119e0, 119e0], [11a34, 11a34],
        [11a47, 11a47], [11a99, 11a99], [11c3f, 11c3f], [11d42, 11d42],
        [11d44, 11d45], [11d97, 11d97], [16af0, 16af4], [16b30, 16b36],
        [16f8f, 16f9f], [16ff0, 16ff1], [1d167, 1d169], [1d16d, 1d172],
        [1d17b, 1d182], [1d185, 1d18b], [1d1aa, 1d1ad], [1e130, 1e136],
        [1e2ec, 1e2ef], [1e8d0, 1e8d6], [1e944, 1e946], [1e948, 1e94a]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 2}, {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 15},
        {Mixed, 1}, {Full, 4}, {Mixed, 3}, {Empty, 7}, {Mixed, 1},
        {Empty, 5}, {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 3},
        {Mixed, 1}, {Empty, 3}, {Mixed, 2}, {Empty, 1}, {Mixed, 2},
        {Empty, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 6},
        {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 2},
        {Empty, 2}, {Mixed, 2}, {Empty, 2}, {Mixed, 3}, {Empty, 1},
        {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
        {Empty, 2}, {Mixed, 2}, {Empty, 2}, {Mixed, 2}, {Empty, 3},
        {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 2},
        {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 2},
        {Empty, 21}, {Mixed, 1}, {Empty, 35}, {Mixed, 1}, {Empty, 10},
        {Mixed, 1}, {Empty, 9}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 3}, {Mixed, 3}, {Empty, 1}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 2}, {Mixed, 2},
        {Empty, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 2},
        {Mixed, 2}, {Empty, 13}, {Mixed, 3}, {Empty, 103}, {Mixed, 1},
        {Empty, 9}, {Mixed, 1}, {Empty, 15}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 939}, {Mixed, 2},
        {Empty, 2}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 6}, {Mixed, 2},
        {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 3}, {Empty, 3},
        {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 2}, {Mixed, 2},
        {Empty, 3}, {Mixed, 1}, {Empty, 632}, {Mixed, 1}, {Empty, 24},
        {Mixed, 1}, {Empty, 7}, {Mixed, 4}, {Empty, 2}, {Mixed, 1},
        {Empty, 23}, {Mixed, 1}, {Empty, 63}, {Mixed, 1}, {Empty, 17},
        {Mixed, 1}, {Empty, 16}, {Mixed, 1}, {Empty, 10}, {Mixed, 1},
        {Empty, 3}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 5}, {Mixed, 1},
        {Empty, 1}, {Mixed, 3}, {Empty, 6}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 6}, {Mixed, 2}, {Empty, 2}, {Mixed, 1},
        {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 7},
        {Mixed, 1}, {Empty, 7}, {Mixed, 2}, {Empty, 4}, {Mixed, 1},
        {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 12},
        {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 618}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 34},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 779}, {Mixed, 3},
        {Empty, 123}, {Mixed, 1}, {Empty, 13}, {Mixed, 1}, {Empty, 46},
        {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 30901}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x40000000, 0x00000001, 0x01908100, 0xffff0000, 0xe0ff7fff,
        0x04300007, 0x00000030, 0x000000f8, 0x02000000, 0xfffe0000,
        0xbffffffb, 0x00000016, 0x0187f800, 0x80000000, 0x00001c61,
        0xffff0000, 0x000007ff, 0x0001ffc0, 0x003ff800, 0x03000000,
        0x7ffffff8, 0x10000000, 0x001e2000, 0x00020000, 0x10000000,
        0x00002000, 0x10000000, 0x00002000, 0x10000000, 0x00002000,
        0xe0000000, 0x10000000, 0x00202000, 0x00002000, 0x00002000,
        0x10000000, 0x00002000, 0x18000000, 0x00002000, 0x00000400,
        0x00005f80, 0x04000000, 0x00001f00, 0x03000000, 0xc2a00000,
        0x000000dc, 0x00000040, 0x06800000, 0x00003e18, 0x0c00bf80,
        0xe0000000, 0x200ffe00, 0x0e000000, 0x9fe00000, 0x3fff0000,
        0x00100000, 0x00000010, 0x000ff800, 0x00000c00, 0x00c00000,
        0x3f000000, 0xffff0000, 0x039021ff, 0xfffff000, 0x000007ff,
        0x0000fff0, 0xe3e00000, 0xa0000000, 0xe000e003, 0x6000e000,
        0x00038000, 0x00008000, 0x0000fc00, 0x1e000000, 0x10000000,
        0xb0008000, 0x30000000, 0x00030000, 0x00000003, 0x00000700,
        0x03000000, 0x00000010, 0x0003ffff, 0x00007800, 0x00080000,
        0x00080000, 0x00000001, 0x00000020, 0x38000000, 0x80000000,
        0x00000007, 0x00400000, 0xf8000000, 0x00000e00, 0x00003000,
        0x40000000, 0x0000ffff, 0x40000000, 0x00000001, 0x00010000,
        0xc0000000, 0x00000008, 0x00000001, 0x00000060, 0x000000fc,
        0x0001ffc0, 0x06000000, 0x00180000, 0x00080000, 0x00001c01,
        0x00600000, 0x00000600, 0x10000000, 0x00002000, 0x001f1fc0,
        0x00000044, 0x0000000c, 0x80000000, 0x00000001, 0x80000000,
        0x00c00000, 0x00000800, 0x06000000, 0x60000000, 0x00000008,
        0x00000001, 0x00100000, 0x00000080, 0x02000000, 0x80000000,
        0x00000034, 0x00800000, 0x001f0000, 0x007f0000, 0xffff8000,
        0x00030000, 0xf807e380, 0x00000fe7, 0x00003c00, 0x007f0000,
        0x0000f000, 0x007f0000, 0x00000770};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 199, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 143, 0};

        static BinaryPropertyObject property_object{Dia, std::move(codepoint_set)};
    }
PropertyObject * get_DIA_PropertyObject() {  return & DIA_ns::property_object; }
    namespace EXT_ns {
        /** Code Point Ranges for Ext
        [00b7, 00b7], [02d0, 02d1], [0640, 0640], [07fa, 07fa],
        [0b55, 0b55], [0e46, 0e46], [0ec6, 0ec6], [180a, 180a],
        [1843, 1843], [1aa7, 1aa7], [1c36, 1c36], [1c7b, 1c7b],
        [3005, 3005], [3031, 3035], [309d, 309e], [30fc, 30fe],
        [a015, a015], [a60c, a60c], [a9cf, a9cf], [a9e6, a9e6],
        [aa70, aa70], [aadd, aadd], [aaf3, aaf4], [ff70, ff70],
        [1135d, 1135d], [115c6, 115c8], [11a98, 11a98], [16b42, 16b43],
        [16fe0, 16fe1], [16fe3, 16fe3], [1e13c, 1e13d], [1e944, 1e946]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 5}, {Mixed, 1}, {Empty, 16}, {Mixed, 1}, {Empty, 27},
        {Mixed, 1}, {Empty, 12}, {Mixed, 1}, {Empty, 26}, {Mixed, 1},
        {Empty, 23}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 73},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 18}, {Mixed, 1},
        {Empty, 11}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 156},
        {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Empty, 2}, {Mixed, 1},
        {Empty, 888}, {Mixed, 1}, {Empty, 47}, {Mixed, 1}, {Empty, 29},
        {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 2},
        {Empty, 675}, {Mixed, 1}, {Empty, 158}, {Mixed, 1}, {Empty, 19},
        {Mixed, 1}, {Empty, 37}, {Mixed, 1}, {Empty, 645}, {Mixed, 1},
        {Empty, 36}, {Mixed, 1}, {Empty, 905}, {Mixed, 1}, {Empty, 64},
        {Mixed, 1}, {Empty, 30901}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00800000, 0x00030000, 0x00000001, 0x04000000, 0x00200000,
        0x00000040, 0x00000040, 0x00000400, 0x00000008, 0x00000080,
        0x00400000, 0x08000000, 0x00000020, 0x003e0000, 0x60000000,
        0x70000000, 0x00200000, 0x00001000, 0x00008000, 0x00000040,
        0x00010000, 0x20000000, 0x00180000, 0x00010000, 0x20000000,
        0x000001c0, 0x01000000, 0x0000000c, 0x0000000b, 0x30000000,
        0x00000070};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 57, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 31, 0};

        static BinaryPropertyObject property_object{Ext, std::move(codepoint_set)};
    }
PropertyObject * get_EXT_PropertyObject() {  return & EXT_ns::property_object; }
    namespace HEX_ns {
        /** Code Point Ranges for Hex
        [0030, 0039], [0041, 0046], [0061, 0066], [ff10, ff19],
        [ff21, ff26], [ff41, ff46]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 3}, {Empty, 2036}, {Mixed, 3}, {Empty, 32773}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x03ff0000, 0x0000007e, 0x0000007e, 0x03ff0000, 0x0000007e,
        0x0000007e};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 6, 0};

        static BinaryPropertyObject property_object{Hex, std::move(codepoint_set)};
    }
PropertyObject * get_HEX_PropertyObject() {  return & HEX_ns::property_object; }
    namespace HYPHEN_ns {
        static ObsoletePropertyObject property_object(Hyphen);
    }
PropertyObject * get_HYPHEN_PropertyObject() {  return & HYPHEN_ns::property_object; }
    namespace IDSB_ns {
        /** Code Point Ranges for IDSB
        [2ff0, 2ff1], [2ff4, 2ffb]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 383}, {Mixed, 1}, {Empty, 34432}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x0ff30000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 1, 0};

        static BinaryPropertyObject property_object{IDSB, std::move(codepoint_set)};
    }
PropertyObject * get_IDSB_PropertyObject() {  return & IDSB_ns::property_object; }
    namespace IDST_ns {
        /** Code Point Ranges for IDST
        [2ff2, 2ff3]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 383}, {Mixed, 1}, {Empty, 34432}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x000c0000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 1, 0};

        static BinaryPropertyObject property_object{IDST, std::move(codepoint_set)};
    }
PropertyObject * get_IDST_PropertyObject() {  return & IDST_ns::property_object; }
    namespace IDEO_ns {
        /** Code Point Ranges for Ideo
        [3006, 3007], [3021, 3029], [3038, 303a], [3400, 4dbf],
        [4e00, 9ffc], [f900, fa6d], [fa70, fad9], [16fe4, 16fe4],
        [17000, 187f7], [18800, 18cd5], [18d00, 18d08], [1b170, 1b2fb],
        [20000, 2a6dd], [2a700, 2b734], [2b740, 2b81d], [2b820, 2cea1],
        [2ceb0, 2ebe0], [2f800, 2fa1d], [30000, 3134a]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 384}, {Mixed, 2}, {Empty, 30}, {Full, 206}, {Empty, 2},
        {Full, 655}, {Mixed, 1}, {Empty, 712}, {Full, 11}, {Mixed, 1},
        {Full, 2}, {Mixed, 1}, {Empty, 936}, {Mixed, 1}, {Full, 191},
        {Mixed, 1}, {Full, 38}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 290}, {Mixed, 1}, {Full, 11}, {Mixed, 1}, {Empty, 616},
        {Full, 1334}, {Mixed, 1}, {Empty, 1}, {Full, 129}, {Mixed, 1},
        {Full, 6}, {Mixed, 1}, {Full, 180}, {Mixed, 1}, {Full, 233},
        {Mixed, 1}, {Empty, 96}, {Full, 16}, {Mixed, 1}, {Empty, 47},
        {Full, 154}, {Mixed, 1}, {Empty, 28517}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x000000c0, 0x070003fe, 0x1fffffff, 0xffff3fff, 0x03ffffff,
        0x00000010, 0x00ffffff, 0x003fffff, 0x000001ff, 0xffff0000,
        0x0fffffff, 0x3fffffff, 0x001fffff, 0x3fffffff, 0xffff0003,
        0x00000001, 0x3fffffff, 0x000007ff};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 43, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 18, 0};

        static BinaryPropertyObject property_object{Ideo, std::move(codepoint_set)};
    }
PropertyObject * get_IDEO_PropertyObject() {  return & IDEO_ns::property_object; }
    namespace JOIN_C_ns {
        /** Code Point Ranges for Join_C
        [200c, 200d]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 256}, {Mixed, 1}, {Empty, 34559}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00003000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 1, 0};

        static BinaryPropertyObject property_object{Join_C, std::move(codepoint_set)};
    }
PropertyObject * get_JOIN_C_PropertyObject() {  return & JOIN_C_ns::property_object; }
    namespace LOE_ns {
        /** Code Point Ranges for LOE
        [0e40, 0e44], [0ec0, 0ec4], [19b5, 19b7], [19ba, 19ba],
        [aab5, aab6], [aab9, aab9], [aabb, aabc]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 114}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 86},
        {Mixed, 1}, {Empty, 1159}, {Mixed, 1}, {Empty, 33450}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x0000001f, 0x0000001f, 0x04e00000, 0x1a600000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 4, 0};

        static BinaryPropertyObject property_object{LOE, std::move(codepoint_set)};
    }
PropertyObject * get_LOE_PropertyObject() {  return & LOE_ns::property_object; }
    namespace NCHAR_ns {
        /** Code Point Ranges for NChar
        [fdd0, fdef], [fffe, ffff], [1fffe, 1ffff], [2fffe, 2ffff],
        [3fffe, 3ffff], [4fffe, 4ffff], [5fffe, 5ffff], [6fffe, 6ffff],
        [7fffe, 7ffff], [8fffe, 8ffff], [9fffe, 9ffff], [afffe, affff],
        [bfffe, bffff], [cfffe, cffff], [dfffe, dffff], [efffe, effff],
        [ffffe, fffff], [10fffe, 10ffff]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 2030}, {Mixed, 2}, {Empty, 15}, {Mixed, 1}, {Empty, 2047},
        {Mixed, 1}, {Empty, 2047}, {Mixed, 1}, {Empty, 2047}, {Mixed, 1},
        {Empty, 2047}, {Mixed, 1}, {Empty, 2047}, {Mixed, 1}, {Empty, 2047},
        {Mixed, 1}, {Empty, 2047}, {Mixed, 1}, {Empty, 2047}, {Mixed, 1},
        {Empty, 2047}, {Mixed, 1}, {Empty, 2047}, {Mixed, 1}, {Empty, 2047},
        {Mixed, 1}, {Empty, 2047}, {Mixed, 1}, {Empty, 2047}, {Mixed, 1},
        {Empty, 2047}, {Mixed, 1}, {Empty, 2047}, {Mixed, 1}, {Empty, 2047},
        {Mixed, 1}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0xffff0000, 0x0000ffff, 0xc0000000, 0xc0000000, 0xc0000000,
        0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000,
        0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000,
        0xc0000000, 0xc0000000, 0xc0000000, 0xc0000000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 36, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 19, 0};

        static BinaryPropertyObject property_object{NChar, std::move(codepoint_set)};
    }
PropertyObject * get_NCHAR_PropertyObject() {  return & NCHAR_ns::property_object; }
    namespace OALPHA_ns {
        /** Code Point Ranges for OAlpha
        [0345, 0345], [05b0, 05bd], [05bf, 05bf], [05c1, 05c2],
        [05c4, 05c5], [05c7, 05c7], [0610, 061a], [064b, 0657],
        [0659, 065f], [0670, 0670], [06d6, 06dc], [06e1, 06e4],
        [06e7, 06e8], [06ed, 06ed], [0711, 0711], [0730, 073f],
        [07a6, 07b0], [0816, 0817], [081b, 0823], [0825, 0827],
        [0829, 082c], [08d4, 08df], [08e3, 08e9], [08f0, 0903],
        [093a, 093b], [093e, 094c], [094e, 094f], [0955, 0957],
        [0962, 0963], [0981, 0983], [09be, 09c4], [09c7, 09c8],
        [09cb, 09cc], [09d7, 09d7], [09e2, 09e3], [0a01, 0a03],
        [0a3e, 0a42], [0a47, 0a48], [0a4b, 0a4c], [0a51, 0a51],
        [0a70, 0a71], [0a75, 0a75], [0a81, 0a83], [0abe, 0ac5],
        [0ac7, 0ac9], [0acb, 0acc], [0ae2, 0ae3], [0afa, 0afc],
        [0b01, 0b03], [0b3e, 0b44], [0b47, 0b48], [0b4b, 0b4c],
        [0b56, 0b57], [0b62, 0b63], [0b82, 0b82], [0bbe, 0bc2],
        [0bc6, 0bc8], [0bca, 0bcc], [0bd7, 0bd7], [0c00, 0c03],
        [0c3e, 0c44], [0c46, 0c48], [0c4a, 0c4c], [0c55, 0c56],
        [0c62, 0c63], [0c81, 0c83], [0cbe, 0cc4], [0cc6, 0cc8],
        [0cca, 0ccc], [0cd5, 0cd6], [0ce2, 0ce3], [0d00, 0d03],
        [0d3e, 0d44], [0d46, 0d48], [0d4a, 0d4c], [0d57, 0d57],
        [0d62, 0d63], [0d81, 0d83], [0dcf, 0dd4], [0dd6, 0dd6],
        [0dd8, 0ddf], [0df2, 0df3], [0e31, 0e31], [0e34, 0e3a],
        [0e4d, 0e4d], [0eb1, 0eb1], [0eb4, 0eb9], [0ebb, 0ebc],
        [0ecd, 0ecd], [0f71, 0f81], [0f8d, 0f97], [0f99, 0fbc],
        [102b, 1036], [1038, 1038], [103b, 103e], [1056, 1059],
        [105e, 1060], [1062, 1064], [1067, 106d], [1071, 1074],
        [1082, 108d], [108f, 108f], [109a, 109d], [1712, 1713],
        [1732, 1733], [1752, 1753], [1772, 1773], [17b6, 17c8],
        [1885, 1886], [18a9, 18a9], [1920, 192b], [1930, 1938],
        [1a17, 1a1b], [1a55, 1a5e], [1a61, 1a74], [1abf, 1ac0],
        [1b00, 1b04], [1b35, 1b43], [1b80, 1b82], [1ba1, 1ba9],
        [1bac, 1bad], [1be7, 1bf1], [1c24, 1c36], [1de7, 1df4],
        [24b6, 24e9], [2de0, 2dff], [a674, a67b], [a69e, a69f],
        [a802, a802], [a80b, a80b], [a823, a827], [a880, a881],
        [a8b4, a8c3], [a8c5, a8c5], [a8ff, a8ff], [a926, a92a],
        [a947, a952], [a980, a983], [a9b4, a9bf], [a9e5, a9e5],
        [aa29, aa36], [aa43, aa43], [aa4c, aa4d], [aa7b, aa7d],
        [aab0, aab0], [aab2, aab4], [aab7, aab8], [aabe, aabe],
        [aaeb, aaef], [aaf5, aaf5], [abe3, abea], [fb1e, fb1e],
        [10376, 1037a], [10a01, 10a03], [10a05, 10a06], [10a0c, 10a0f],
        [10d24, 10d27], [10eab, 10eac], [11000, 11002], [11038, 11045],
        [11082, 11082], [110b0, 110b8], [11100, 11102], [11127, 11132],
        [11145, 11146], [11180, 11182], [111b3, 111bf], [111ce, 111cf],
        [1122c, 11234], [11237, 11237], [1123e, 1123e], [112df, 112e8],
        [11300, 11303], [1133e, 11344], [11347, 11348], [1134b, 1134c],
        [11357, 11357], [11362, 11363], [11435, 11441], [11443, 11445],
        [114b0, 114c1], [115af, 115b5], [115b8, 115be], [115dc, 115dd],
        [11630, 1163e], [11640, 11640], [116ab, 116b5], [1171d, 1172a],
        [1182c, 11838], [11930, 11935], [11937, 11938], [1193b, 1193c],
        [11940, 11940], [11942, 11942], [119d1, 119d7], [119da, 119df],
        [119e4, 119e4], [11a01, 11a0a], [11a35, 11a39], [11a3b, 11a3e],
        [11a51, 11a5b], [11a8a, 11a97], [11c2f, 11c36], [11c38, 11c3e],
        [11c92, 11ca7], [11ca9, 11cb6], [11d31, 11d36], [11d3a, 11d3a],
        [11d3c, 11d3d], [11d3f, 11d41], [11d43, 11d43], [11d47, 11d47],
        [11d8a, 11d8e], [11d90, 11d91], [11d93, 11d96], [11ef3, 11ef6],
        [16f4f, 16f4f], [16f51, 16f87], [16f8f, 16f92], [16ff0, 16ff1],
        [1bc9e, 1bc9e], [1e000, 1e006], [1e008, 1e018], [1e01b, 1e021],
        [1e023, 1e024], [1e026, 1e02a], [1e947, 1e947], [1f130, 1f149],
        [1f150, 1f169], [1f170, 1f189]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 26}, {Mixed, 1}, {Empty, 18}, {Mixed, 2}, {Empty, 1},
        {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 4},
        {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 4},
        {Mixed, 25}, {Empty, 1}, {Mixed, 13}, {Empty, 1}, {Mixed, 2},
        {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 2}, {Empty, 4},
        {Mixed, 3}, {Empty, 3}, {Mixed, 4}, {Empty, 51}, {Mixed, 4},
        {Empty, 1}, {Mixed, 2}, {Empty, 5}, {Mixed, 2}, {Empty, 3},
        {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 1}, {Mixed, 2},
        {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 3}, {Empty, 1},
        {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 13}, {Mixed, 1}, {Empty, 53}, {Mixed, 1}, {Full, 1},
        {Mixed, 1}, {Empty, 71}, {Full, 1}, {Empty, 963}, {Mixed, 2},
        {Empty, 11}, {Mixed, 2}, {Empty, 2}, {Mixed, 4}, {Empty, 1},
        {Mixed, 2}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 1},
        {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 632}, {Mixed, 1},
        {Empty, 66}, {Mixed, 1}, {Empty, 52}, {Mixed, 1}, {Empty, 24},
        {Mixed, 1}, {Empty, 11}, {Mixed, 1}, {Empty, 10}, {Mixed, 3},
        {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 3}, {Empty, 1},
        {Mixed, 3}, {Empty, 2}, {Mixed, 1}, {Empty, 4}, {Mixed, 6},
        {Empty, 5}, {Mixed, 2}, {Empty, 2}, {Mixed, 2}, {Empty, 6},
        {Mixed, 2}, {Empty, 2}, {Mixed, 2}, {Empty, 2}, {Mixed, 1},
        {Empty, 2}, {Mixed, 2}, {Empty, 7}, {Mixed, 1}, {Empty, 7},
        {Mixed, 2}, {Empty, 3}, {Mixed, 5}, {Empty, 1}, {Mixed, 1},
        {Empty, 12}, {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 3},
        {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 10}, {Mixed, 1},
        {Empty, 642}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 612}, {Mixed, 1}, {Empty, 283}, {Mixed, 2},
        {Empty, 72}, {Mixed, 1}, {Empty, 62}, {Mixed, 4}, {Empty, 30835}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00000020, 0xbfff0000, 0x000000b6, 0x07ff0000, 0xfefff800,
        0x00010000, 0x1fc00000, 0x0000219e, 0x00020000, 0xffff0000,
        0x0001ffc0, 0xf8c00000, 0x00001eef, 0xfff00000, 0xffff03f8,
        0x0000000f, 0xcc000000, 0x00e0dfff, 0x0000000c, 0x0000000e,
        0xc0000000, 0x0080199f, 0x0000000c, 0x0000000e, 0xc0000000,
        0x00021987, 0x00230000, 0x0000000e, 0xc0000000, 0x00001bbf,
        0x1c00000c, 0x0000000e, 0xc0000000, 0x00c0199f, 0x0000000c,
        0x00000004, 0xc0000000, 0x00801dc7, 0x0000000f, 0xc0000000,
        0x00601ddf, 0x0000000c, 0x0000000e, 0xc0000000, 0x00601ddf,
        0x0000000c, 0x0000000f, 0xc0000000, 0x00801ddf, 0x0000000c,
        0x0000000e, 0xff5f8000, 0x000c0000, 0x07f20000, 0x00002000,
        0x1bf20000, 0x00002000, 0xfffe0000, 0xfeffe003, 0x1fffffff,
        0x797ff800, 0xc3c00000, 0x001e3f9d, 0x3c00bffc, 0x000c0000,
        0x000c0000, 0x000c0000, 0x000c0000, 0xffc00000, 0x000001ff,
        0x00000060, 0x00000200, 0x01ff0fff, 0x0f800000, 0x7fe00000,
        0x001ffffe, 0x80000000, 0x00000001, 0x0000001f, 0xffe00000,
        0x0000000f, 0x00000007, 0x000033fe, 0x0003ff80, 0x007ffff0,
        0x001fff80, 0xffc00000, 0x000003ff, 0x0ff00000, 0xc0000000,
        0x00000804, 0x000000f8, 0x00000003, 0xfff00000, 0x0000002f,
        0x80000000, 0x000007c0, 0x0007ff80, 0x0000000f, 0xfff00000,
        0x00000020, 0x007ffe00, 0x00003008, 0x38000000, 0x419d0000,
        0x0020f800, 0x000007f8, 0x40000000, 0x07c00000, 0x0000f06e,
        0x000000f0, 0x00001800, 0x00000007, 0xff000000, 0x0000003f,
        0x00000004, 0x01ff0000, 0x00000007, 0x0007ff80, 0x00000060,
        0x00000007, 0xfff80000, 0x0000c000, 0x409ff000, 0x80000000,
        0x000001ff, 0x0000000f, 0xc0000000, 0x0080199f, 0x0000000c,
        0xffe00000, 0x0000003b, 0xffff0000, 0x00000003, 0x7f3f8000,
        0x30000000, 0x7fff0000, 0x00000001, 0x003ff800, 0xe0000000,
        0x000007ff, 0x01fff000, 0x19bf0000, 0x00000005, 0xfcfe0000,
        0x00000010, 0x000007fe, 0x7be00000, 0x0ffe0000, 0x00fffc00,
        0x7f7f8000, 0xfffc0000, 0x007ffeff, 0xb47e0000, 0x0000008b,
        0x007b7c00, 0x00780000, 0xfffe8000, 0x000780ff, 0x00030000,
        0x40000000, 0xf9ffff7f, 0x000007db, 0x00000080, 0xffff0000,
        0xffff03ff, 0xffff03ff, 0x000003ff};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 145, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 168, 0};

        static BinaryPropertyObject property_object{OAlpha, std::move(codepoint_set)};
    }
PropertyObject * get_OALPHA_PropertyObject() {  return & OALPHA_ns::property_object; }
    namespace ODI_ns {
        /** Code Point Ranges for ODI
        [034f, 034f], [115f, 1160], [17b4, 17b5], [2065, 2065],
        [3164, 3164], [ffa0, ffa0], [fff0, fff8], [e0000, e0000],
        [e0002, e001f], [e0080, e00ff], [e01f0, e0fff]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 26}, {Mixed, 1}, {Empty, 111}, {Mixed, 2}, {Empty, 49},
        {Mixed, 1}, {Empty, 69}, {Mixed, 1}, {Empty, 135}, {Mixed, 1},
        {Empty, 1649}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 26624},
        {Mixed, 1}, {Empty, 3}, {Full, 4}, {Empty, 7}, {Mixed, 1},
        {Full, 112}, {Empty, 6016}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00008000, 0x80000000, 0x00000001, 0x00300000, 0x00000020,
        0x00000010, 0x00000001, 0x01ff0000, 0xfffffffd, 0xffff0000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 22, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 10, 0};

        static BinaryPropertyObject property_object{ODI, std::move(codepoint_set)};
    }
PropertyObject * get_ODI_PropertyObject() {  return & ODI_ns::property_object; }
    namespace OGR_EXT_ns {
        /** Code Point Ranges for OGr_Ext
        [09be, 09be], [09d7, 09d7], [0b3e, 0b3e], [0b57, 0b57],
        [0bbe, 0bbe], [0bd7, 0bd7], [0cc2, 0cc2], [0cd5, 0cd6],
        [0d3e, 0d3e], [0d57, 0d57], [0dcf, 0dcf], [0ddf, 0ddf],
        [1b35, 1b35], [200c, 200c], [302e, 302f], [ff9e, ff9f],
        [1133e, 1133e], [11357, 11357], [114b0, 114b0], [114bd, 114bd],
        [115af, 115af], [11930, 11930], [1d165, 1d165], [1d16e, 1d172],
        [e0020, e007f]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 77}, {Mixed, 2}, {Empty, 10}, {Mixed, 2}, {Empty, 2},
        {Mixed, 2}, {Empty, 7}, {Mixed, 1}, {Empty, 2}, {Mixed, 2},
        {Empty, 3}, {Mixed, 1}, {Empty, 106}, {Mixed, 1}, {Empty, 38},
        {Mixed, 1}, {Empty, 128}, {Mixed, 1}, {Empty, 1658}, {Mixed, 1},
        {Empty, 156}, {Mixed, 2}, {Empty, 10}, {Mixed, 1}, {Empty, 7},
        {Mixed, 1}, {Empty, 27}, {Mixed, 1}, {Empty, 1473}, {Mixed, 1},
        {Empty, 24949}, {Full, 3}, {Empty, 6140}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x40000000, 0x00800000, 0x40000000, 0x00800000, 0x40000000,
        0x00800000, 0x00600004, 0x40000000, 0x00800000, 0x80008000,
        0x00200000, 0x00001000, 0x0000c000, 0xc0000000, 0x40000000,
        0x00800000, 0x20010000, 0x00008000, 0x00010000, 0x0007c020};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 33, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 20, 0};

        static BinaryPropertyObject property_object{OGr_Ext, std::move(codepoint_set)};
    }
PropertyObject * get_OGR_EXT_PropertyObject() {  return & OGR_EXT_ns::property_object; }
    namespace OIDC_ns {
        /** Code Point Ranges for OIDC
        [00b7, 00b7], [0387, 0387], [1369, 1371], [19da, 19da]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 5}, {Mixed, 1}, {Empty, 22}, {Mixed, 1}, {Empty, 126},
        {Mixed, 1}, {Empty, 50}, {Mixed, 1}, {Empty, 34609}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00800000, 0x00000080, 0x0003fe00, 0x04000000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 4, 0};

        static BinaryPropertyObject property_object{OIDC, std::move(codepoint_set)};
    }
PropertyObject * get_OIDC_PropertyObject() {  return & OIDC_ns::property_object; }
    namespace OIDS_ns {
        /** Code Point Ranges for OIDS
        [1885, 1886], [2118, 2118], [212e, 212e], [309b, 309c]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 196}, {Mixed, 1}, {Empty, 67}, {Mixed, 2}, {Empty, 122},
        {Mixed, 1}, {Empty, 34427}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00000060, 0x01000000, 0x00004000, 0x18000000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 4, 0};

        static BinaryPropertyObject property_object{OIDS, std::move(codepoint_set)};
    }
PropertyObject * get_OIDS_PropertyObject() {  return & OIDS_ns::property_object; }
    namespace OLOWER_ns {
        /** Code Point Ranges for OLower
        [00aa, 00aa], [00ba, 00ba], [02b0, 02b8], [02c0, 02c1],
        [02e0, 02e4], [0345, 0345], [037a, 037a], [1d2c, 1d6a],
        [1d78, 1d78], [1d9b, 1dbf], [2071, 2071], [207f, 207f],
        [2090, 209c], [2170, 217f], [24d0, 24e9], [2c7c, 2c7d],
        [a69c, a69d], [a770, a770], [a7f8, a7f9], [ab5c, ab5f]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 5}, {Mixed, 1}, {Empty, 15}, {Mixed, 3}, {Empty, 2},
        {Mixed, 2}, {Empty, 205}, {Mixed, 1}, {Full, 1}, {Mixed, 2},
        {Full, 1}, {Empty, 21}, {Mixed, 2}, {Empty, 6}, {Mixed, 1},
        {Empty, 26}, {Mixed, 2}, {Empty, 59}, {Mixed, 1}, {Empty, 976},
        {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
        {Empty, 26}, {Mixed, 1}, {Empty, 33445}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x04000400, 0x01ff0000, 0x00000003, 0x0000001f, 0x00000020,
        0x04000000, 0xfffff000, 0x010007ff, 0xf8000000, 0x80020000,
        0x1fff0000, 0xffff0000, 0xffff0000, 0x000003ff, 0x30000000,
        0x30000000, 0x00010000, 0x03000000, 0xf0000000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 28, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 19, 0};

        static BinaryPropertyObject property_object{OLower, std::move(codepoint_set)};
    }
PropertyObject * get_OLOWER_PropertyObject() {  return & OLOWER_ns::property_object; }
    namespace OMATH_ns {
        /** Code Point Ranges for OMath
        [005e, 005e], [03d0, 03d2], [03d5, 03d5], [03f0, 03f1],
        [03f4, 03f5], [2016, 2016], [2032, 2034], [2040, 2040],
        [2061, 2064], [207d, 207e], [208d, 208e], [20d0, 20dc],
        [20e1, 20e1], [20e5, 20e6], [20eb, 20ef], [2102, 2102],
        [2107, 2107], [210a, 2113], [2115, 2115], [2119, 211d],
        [2124, 2124], [2128, 2129], [212c, 212d], [212f, 2131],
        [2133, 2138], [213c, 213f], [2145, 2149], [2195, 2199],
        [219c, 219f], [21a1, 21a2], [21a4, 21a5], [21a7, 21a7],
        [21a9, 21ad], [21b0, 21b1], [21b6, 21b7], [21bc, 21cd],
        [21d0, 21d1], [21d3, 21d3], [21d5, 21db], [21dd, 21dd],
        [21e4, 21e5], [2308, 230b], [23b4, 23b5], [23b7, 23b7],
        [23d0, 23d0], [23e2, 23e2], [25a0, 25a1], [25ae, 25b6],
        [25bc, 25c0], [25c6, 25c7], [25ca, 25cb], [25cf, 25d3],
        [25e2, 25e2], [25e4, 25e4], [25e7, 25ec], [2605, 2606],
        [2640, 2640], [2642, 2642], [2660, 2663], [266d, 266e],
        [27c5, 27c6], [27e6, 27ef], [2983, 2998], [29d8, 29db],
        [29fc, 29fd], [fe61, fe61], [fe63, fe63], [fe68, fe68],
        [ff3c, ff3c], [ff3e, ff3e], [1d400, 1d454], [1d456, 1d49c],
        [1d49e, 1d49f], [1d4a2, 1d4a2], [1d4a5, 1d4a6], [1d4a9, 1d4ac],
        [1d4ae, 1d4b9], [1d4bb, 1d4bb], [1d4bd, 1d4c3], [1d4c5, 1d505],
        [1d507, 1d50a], [1d50d, 1d514], [1d516, 1d51c], [1d51e, 1d539],
        [1d53b, 1d53e], [1d540, 1d544], [1d546, 1d546], [1d54a, 1d550],
        [1d552, 1d6a5], [1d6a8, 1d6c0], [1d6c2, 1d6da], [1d6dc, 1d6fa],
        [1d6fc, 1d714], [1d716, 1d734], [1d736, 1d74e], [1d750, 1d76e],
        [1d770, 1d788], [1d78a, 1d7a8], [1d7aa, 1d7c2], [1d7c4, 1d7cb],
        [1d7ce, 1d7ff], [1ee00, 1ee03], [1ee05, 1ee1f], [1ee21, 1ee22],
        [1ee24, 1ee24], [1ee27, 1ee27], [1ee29, 1ee32], [1ee34, 1ee37],
        [1ee39, 1ee39], [1ee3b, 1ee3b], [1ee42, 1ee42], [1ee47, 1ee47],
        [1ee49, 1ee49], [1ee4b, 1ee4b], [1ee4d, 1ee4f], [1ee51, 1ee52],
        [1ee54, 1ee54], [1ee57, 1ee57], [1ee59, 1ee59], [1ee5b, 1ee5b],
        [1ee5d, 1ee5d], [1ee5f, 1ee5f], [1ee61, 1ee62], [1ee64, 1ee64],
        [1ee67, 1ee6a], [1ee6c, 1ee72], [1ee74, 1ee77], [1ee79, 1ee7c],
        [1ee7e, 1ee7e], [1ee80, 1ee89], [1ee8b, 1ee9b], [1eea1, 1eea3],
        [1eea5, 1eea9], [1eeab, 1eebb]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 2}, {Mixed, 1}, {Empty, 27}, {Mixed, 2}, {Empty, 224},
        {Mixed, 5}, {Empty, 1}, {Mixed, 5}, {Empty, 1}, {Mixed, 4},
        {Empty, 8}, {Mixed, 1}, {Empty, 4}, {Mixed, 3}, {Empty, 13},
        {Mixed, 4}, {Empty, 1}, {Mixed, 2}, {Empty, 10}, {Mixed, 2},
        {Empty, 12}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 1699},
        {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 1702}, {Full, 2},
        {Mixed, 1}, {Full, 1}, {Mixed, 3}, {Full, 1}, {Mixed, 3},
        {Full, 10}, {Mixed, 10}, {Full, 1}, {Empty, 176}, {Mixed, 6},
        {Empty, 30858}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x40000000, 0x00270000, 0x00330000, 0x00400000, 0x001c0000,
        0x00000001, 0x6000001e, 0x00006000, 0x1fff0000, 0x0000f862,
        0x3e2ffc84, 0xf1fbb310, 0x000003e0, 0xf3e00000, 0xf0c33eb6,
        0x2feb3fff, 0x00000030, 0x00000f00, 0x00b00000, 0x00010000,
        0x00000004, 0xf07fc003, 0x000f8cc1, 0x00001f94, 0x00000060,
        0x00000005, 0x0000600f, 0x00000060, 0x0000ffc0, 0x01fffff8,
        0x0f000000, 0x30000000, 0x0000010a, 0x50000000, 0xffdfffff,
        0xdfffffff, 0xebffde64, 0xffffffef, 0xdfdfe7bf, 0x7bffffff,
        0xfffdfc5f, 0xffffff3f, 0xf7fffffd, 0xf7ffffff, 0xffdfffff,
        0xffdfffff, 0xffff7fff, 0xffff7fff, 0xfffffdff, 0xfffffdff,
        0xffffcff7, 0xffffffef, 0x0af7fe96, 0xaa96ea84, 0x5ef7f796,
        0x0ffffbff, 0x0ffffbee};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 41, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 57, 0};

        static BinaryPropertyObject property_object{OMath, std::move(codepoint_set)};
    }
PropertyObject * get_OMATH_PropertyObject() {  return & OMATH_ns::property_object; }
    namespace OUPPER_ns {
        /** Code Point Ranges for OUpper
        [2160, 216f], [24b6, 24cf], [1f130, 1f149], [1f150, 1f169],
        [1f170, 1f189]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 267}, {Mixed, 1}, {Empty, 25}, {Mixed, 2}, {Empty, 3682},
        {Mixed, 4}, {Empty, 30835}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x0000ffff, 0xffc00000, 0x0000ffff, 0xffff0000, 0xffff03ff,
        0xffff03ff, 0x000003ff};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 7, 0};

        static BinaryPropertyObject property_object{OUpper, std::move(codepoint_set)};
    }
PropertyObject * get_OUPPER_PropertyObject() {  return & OUPPER_ns::property_object; }
    namespace PCM_ns {
        /** Code Point Ranges for PCM
        [0600, 0605], [06dd, 06dd], [070f, 070f], [08e2, 08e2],
        [110bd, 110bd], [110cd, 110cd]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 48}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Empty, 14}, {Mixed, 1}, {Empty, 2109}, {Mixed, 2},
        {Empty, 32633}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x0000003f, 0x20000000, 0x00008000, 0x00000004, 0x20000000,
        0x00002000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 11, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 6, 0};

        static BinaryPropertyObject property_object{PCM, std::move(codepoint_set)};
    }
PropertyObject * get_PCM_PropertyObject() {  return & PCM_ns::property_object; }
    namespace PAT_SYN_ns {
        /** Code Point Ranges for Pat_Syn
        [0021, 002f], [003a, 0040], [005b, 005e], [0060, 0060],
        [007b, 007e], [00a1, 00a7], [00a9, 00a9], [00ab, 00ac],
        [00ae, 00ae], [00b0, 00b1], [00b6, 00b6], [00bb, 00bb],
        [00bf, 00bf], [00d7, 00d7], [00f7, 00f7], [2010, 2027],
        [2030, 203e], [2041, 2053], [2055, 205e], [2190, 245f],
        [2500, 2775], [2794, 2bff], [2e00, 2e7f], [3001, 3003],
        [3008, 3020], [3030, 3030], [fd3e, fd3f], [fe45, fe46]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 3}, {Empty, 248},
        {Mixed, 3}, {Empty, 9}, {Mixed, 1}, {Full, 22}, {Empty, 5},
        {Full, 19}, {Mixed, 2}, {Full, 35}, {Empty, 16}, {Full, 4},
        {Empty, 12}, {Mixed, 2}, {Empty, 1639}, {Mixed, 1}, {Empty, 8},
        {Mixed, 1}, {Empty, 32781}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0xfc00fffe, 0x78000001, 0x78000001, 0x88435afe, 0x00800000,
        0x00800000, 0xffff0000, 0x7fff00ff, 0x7feffffe, 0xffff0000,
        0x003fffff, 0xfff00000, 0xffffff0e, 0x00010001, 0xc0000000,
        0x00000060};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 22, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 16, 0};

        static BinaryPropertyObject property_object{Pat_Syn, std::move(codepoint_set)};
    }
PropertyObject * get_PAT_SYN_PropertyObject() {  return & PAT_SYN_ns::property_object; }
    namespace PAT_WS_ns {
        /** Code Point Ranges for Pat_WS
        [0009, 000d], [0020, 0020], [0085, 0085], [200e, 200f],
        [2028, 2029]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Empty, 251}, {Mixed, 2},
        {Empty, 34558}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00003e00, 0x00000001, 0x00000020, 0x0000c000, 0x00000300};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 5, 0};

        static BinaryPropertyObject property_object{Pat_WS, std::move(codepoint_set)};
    }
PropertyObject * get_PAT_WS_PropertyObject() {  return & PAT_WS_ns::property_object; }
    namespace QMARK_ns {
        /** Code Point Ranges for QMark
        [0022, 0022], [0027, 0027], [00ab, 00ab], [00bb, 00bb],
        [2018, 201f], [2039, 203a], [2e42, 2e42], [300c, 300f],
        [301d, 301f], [fe41, fe44], [ff02, ff02], [ff07, ff07],
        [ff62, ff63]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 250},
        {Mixed, 2}, {Empty, 112}, {Mixed, 1}, {Empty, 13}, {Mixed, 1},
        {Empty, 1649}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 32772}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00000084, 0x08000800, 0xff000000, 0x06000000, 0x00000004,
        0xe000f000, 0x0000001e, 0x00000084, 0x0000000c};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 17, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 9, 0};

        static BinaryPropertyObject property_object{QMark, std::move(codepoint_set)};
    }
PropertyObject * get_QMARK_PropertyObject() {  return & QMARK_ns::property_object; }
    namespace RI_ns {
        /** Code Point Ranges for RI
        [1f1e6, 1f1ff]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 3983}, {Mixed, 1}, {Empty, 30832}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0xffffffc0};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 1, 0};

        static BinaryPropertyObject property_object{RI, std::move(codepoint_set)};
    }
PropertyObject * get_RI_PropertyObject() {  return & RI_ns::property_object; }
    namespace RADICAL_ns {
        /** Code Point Ranges for Radical
        [2e80, 2e99], [2e9b, 2ef3], [2f00, 2fd5]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 372}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 6},
        {Mixed, 1}, {Empty, 34433}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0xfbffffff, 0x000fffff, 0x003fffff};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 3, 0};

        static BinaryPropertyObject property_object{Radical, std::move(codepoint_set)};
    }
PropertyObject * get_RADICAL_PropertyObject() {  return & RADICAL_ns::property_object; }
    namespace SD_ns {
        /** Code Point Ranges for SD
        [0069, 006a], [012f, 012f], [0249, 0249], [0268, 0268],
        [029d, 029d], [02b2, 02b2], [03f3, 03f3], [0456, 0456],
        [0458, 0458], [1d62, 1d62], [1d96, 1d96], [1da4, 1da4],
        [1da8, 1da8], [1e2d, 1e2d], [1ecb, 1ecb], [2071, 2071],
        [2148, 2149], [2c7c, 2c7c], [1d422, 1d423], [1d456, 1d457],
        [1d48a, 1d48b], [1d4be, 1d4bf], [1d4f2, 1d4f3], [1d526, 1d527],
        [1d55a, 1d55b], [1d58e, 1d58f], [1d5c2, 1d5c3], [1d5f6, 1d5f7],
        [1d62a, 1d62b], [1d65e, 1d65f], [1d692, 1d693]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 3}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 8},
        {Mixed, 4}, {Empty, 9}, {Mixed, 1}, {Empty, 2}, {Mixed, 1},
        {Empty, 200}, {Mixed, 3}, {Empty, 3}, {Mixed, 1}, {Empty, 4},
        {Mixed, 1}, {Empty, 12}, {Mixed, 1}, {Empty, 6}, {Mixed, 1},
        {Empty, 88}, {Mixed, 1}, {Empty, 3389}, {Mixed, 2}, {Empty, 1},
        {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 2},
        {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 1},
        {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 31051}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00000600, 0x00008000, 0x00000200, 0x00000100, 0x20000000,
        0x00040000, 0x00080000, 0x01400000, 0x00000004, 0x00400000,
        0x00000110, 0x00002000, 0x00000800, 0x00020000, 0x00000300,
        0x10000000, 0x0000000c, 0x00c00000, 0x00000c00, 0xc0000000,
        0x000c0000, 0x000000c0, 0x0c000000, 0x0000c000, 0x0000000c,
        0x00c00000, 0x00000c00, 0xc0000000, 0x000c0000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 39, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 29, 0};

        static BinaryPropertyObject property_object{SD, std::move(codepoint_set)};
    }
PropertyObject * get_SD_PropertyObject() {  return & SD_ns::property_object; }
    namespace STERM_ns {
        /** Code Point Ranges for STerm
        [0021, 0021], [002e, 002e], [003f, 003f], [0589, 0589],
        [061e, 061f], [06d4, 06d4], [0700, 0702], [07f9, 07f9],
        [0837, 0837], [0839, 0839], [083d, 083e], [0964, 0965],
        [104a, 104b], [1362, 1362], [1367, 1368], [166e, 166e],
        [1735, 1736], [1803, 1803], [1809, 1809], [1944, 1945],
        [1aa8, 1aab], [1b5a, 1b5b], [1b5e, 1b5f], [1c3b, 1c3c],
        [1c7e, 1c7f], [203c, 203d], [2047, 2049], [2e2e, 2e2e],
        [2e3c, 2e3c], [3002, 3002], [a4ff, a4ff], [a60e, a60f],
        [a6f3, a6f3], [a6f7, a6f7], [a876, a877], [a8ce, a8cf],
        [a92f, a92f], [a9c8, a9c9], [aa5d, aa5f], [aaf0, aaf1],
        [abeb, abeb], [fe52, fe52], [fe56, fe57], [ff01, ff01],
        [ff0e, ff0e], [ff1f, ff1f], [ff61, ff61], [10a56, 10a57],
        [10f55, 10f59], [11047, 11048], [110be, 110c1], [11141, 11143],
        [111c5, 111c6], [111cd, 111cd], [111de, 111df], [11238, 11239],
        [1123b, 1123c], [112a9, 112a9], [1144b, 1144c], [115c2, 115c3],
        [115c9, 115d7], [11641, 11642], [1173c, 1173e], [11944, 11944],
        [11946, 11946], [11a42, 11a43], [11a9b, 11a9c], [11c41, 11c42],
        [11ef7, 11ef8], [16a6e, 16a6f], [16af5, 16af5], [16b37, 16b38],
        [16b44, 16b44], [16e98, 16e98], [1bc9f, 1bc9f], [1da88, 1da88]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 1}, {Empty, 42}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 6}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 9},
        {Mixed, 1}, {Empty, 54}, {Mixed, 1}, {Empty, 24}, {Mixed, 1},
        {Empty, 23}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 6},
        {Mixed, 1}, {Empty, 9}, {Mixed, 1}, {Empty, 10}, {Mixed, 1},
        {Empty, 4}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Empty, 29}, {Mixed, 2}, {Empty, 110}, {Mixed, 1},
        {Empty, 14}, {Mixed, 1}, {Empty, 934}, {Mixed, 1}, {Empty, 8},
        {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 11}, {Mixed, 1},
        {Empty, 2}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 4},
        {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 4}, {Mixed, 1},
        {Empty, 7}, {Mixed, 1}, {Empty, 658}, {Mixed, 1}, {Empty, 5},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 86}, {Mixed, 1},
        {Empty, 39}, {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 2},
        {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
        {Empty, 2}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 12},
        {Mixed, 1}, {Empty, 11}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
        {Empty, 6}, {Mixed, 1}, {Empty, 16}, {Mixed, 1}, {Empty, 7},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 13}, {Mixed, 1},
        {Empty, 20}, {Mixed, 1}, {Empty, 603}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 25}, {Mixed, 1},
        {Empty, 623}, {Mixed, 1}, {Empty, 239}, {Mixed, 1}, {Empty, 31019}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x80004002, 0x00000200, 0xc0000000, 0x00100000, 0x00000007,
        0x02000000, 0x62800000, 0x00000030, 0x00000c00, 0x00000184,
        0x00004000, 0x00600000, 0x00000208, 0x00000030, 0x00000f00,
        0xcc000000, 0x18000000, 0xc0000000, 0x30000000, 0x00000380,
        0x10004000, 0x00000004, 0x80000000, 0x0000c000, 0x00880000,
        0x00c00000, 0x0000c000, 0x00008000, 0x00000300, 0xe0000000,
        0x00030000, 0x00000800, 0x00c40000, 0x80004002, 0x00000002,
        0x00c00000, 0x03e00000, 0x00000180, 0xc0000000, 0x00000003,
        0x0000000e, 0xc0002060, 0x1b000000, 0x00000200, 0x00001800,
        0x00fffe0c, 0x00000006, 0x70000000, 0x00000050, 0x0000000c,
        0x18000000, 0x00000006, 0x01800000, 0x0000c000, 0x00200000,
        0x01800000, 0x00000010, 0x01000000, 0x80000000, 0x00000100};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 115, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 60, 0};

        static BinaryPropertyObject property_object{STerm, std::move(codepoint_set)};
    }
PropertyObject * get_STERM_PropertyObject() {  return & STERM_ns::property_object; }
    namespace TERM_ns {
        /** Code Point Ranges for Term
        [0021, 0021], [002c, 002c], [002e, 002e], [003a, 003b],
        [003f, 003f], [037e, 037e], [0387, 0387], [0589, 0589],
        [05c3, 05c3], [060c, 060c], [061b, 061b], [061e, 061f],
        [06d4, 06d4], [0700, 070a], [070c, 070c], [07f8, 07f9],
        [0830, 083e], [085e, 085e], [0964, 0965], [0e5a, 0e5b],
        [0f08, 0f08], [0f0d, 0f12], [104a, 104b], [1361, 1368],
        [166e, 166e], [16eb, 16ed], [1735, 1736], [17d4, 17d6],
        [17da, 17da], [1802, 1805], [1808, 1809], [1944, 1945],
        [1aa8, 1aab], [1b5a, 1b5b], [1b5d, 1b5f], [1c3b, 1c3f],
        [1c7e, 1c7f], [203c, 203d], [2047, 2049], [2e2e, 2e2e],
        [2e3c, 2e3c], [2e41, 2e41], [2e4c, 2e4c], [2e4e, 2e4f],
        [3001, 3002], [a4fe, a4ff], [a60d, a60f], [a6f3, a6f7],
        [a876, a877], [a8ce, a8cf], [a92f, a92f], [a9c7, a9c9],
        [aa5d, aa5f], [aadf, aadf], [aaf0, aaf1], [abeb, abeb],
        [fe50, fe52], [fe54, fe57], [ff01, ff01], [ff0c, ff0c],
        [ff0e, ff0e], [ff1a, ff1b], [ff1f, ff1f], [ff61, ff61],
        [ff64, ff64], [1039f, 1039f], [103d0, 103d0], [10857, 10857],
        [1091f, 1091f], [10a56, 10a57], [10af0, 10af5], [10b3a, 10b3f],
        [10b99, 10b9c], [10f55, 10f59], [11047, 1104d], [110be, 110c1],
        [11141, 11143], [111c5, 111c6], [111cd, 111cd], [111de, 111df],
        [11238, 1123c], [112a9, 112a9], [1144b, 1144d], [1145a, 1145b],
        [115c2, 115c5], [115c9, 115d7], [11641, 11642], [1173c, 1173e],
        [11944, 11944], [11946, 11946], [11a42, 11a43], [11a9b, 11a9c],
        [11aa1, 11aa2], [11c41, 11c43], [11c71, 11c71], [11ef7, 11ef8],
        [12470, 12474], [16a6e, 16a6f], [16af5, 16af5], [16b37, 16b39],
        [16b44, 16b44], [16e97, 16e98], [1bc9f, 1bc9f], [1da87, 1da8a]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 1}, {Empty, 25}, {Mixed, 2}, {Empty, 15},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 5}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 6},
        {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 8}, {Mixed, 1},
        {Empty, 38}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 9},
        {Mixed, 1}, {Empty, 24}, {Mixed, 1}, {Empty, 23}, {Mixed, 1},
        {Empty, 3}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 4},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 9}, {Mixed, 1},
        {Empty, 10}, {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 6},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 29}, {Mixed, 2},
        {Empty, 110}, {Mixed, 2}, {Empty, 13}, {Mixed, 1}, {Empty, 934},
        {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 6}, {Mixed, 1},
        {Empty, 11}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
        {Empty, 3}, {Mixed, 2}, {Empty, 7}, {Mixed, 1}, {Empty, 658},
        {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 2}, {Mixed, 1},
        {Empty, 32}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 35},
        {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 9}, {Mixed, 1},
        {Empty, 4}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 29}, {Mixed, 1}, {Empty, 7}, {Mixed, 1},
        {Empty, 2}, {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
        {Empty, 12}, {Mixed, 1}, {Empty, 11}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 16}, {Mixed, 1},
        {Empty, 7}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 12},
        {Mixed, 2}, {Empty, 19}, {Mixed, 1}, {Empty, 43}, {Mixed, 1},
        {Empty, 559}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 1},
        {Mixed, 2}, {Empty, 25}, {Mixed, 1}, {Empty, 623}, {Mixed, 1},
        {Empty, 239}, {Mixed, 1}, {Empty, 31019}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x8c005002, 0x40000000, 0x00000080, 0x00000200, 0x00000008,
        0xc8001000, 0x00100000, 0x000017ff, 0x03000000, 0x7fff0000,
        0x40000000, 0x00000030, 0x0c000000, 0x0007e100, 0x00000c00,
        0x000001fe, 0x00004000, 0x00003800, 0x00600000, 0x04700000,
        0x0000033c, 0x00000030, 0x00000f00, 0xec000000, 0xf8000000,
        0xc0000000, 0x30000000, 0x00000380, 0x10004000, 0x0000d002,
        0x00000006, 0xc0000000, 0x0000e000, 0x00f80000, 0x00c00000,
        0x0000c000, 0x00008000, 0x00000380, 0xe0000000, 0x80000000,
        0x00030000, 0x00000800, 0x00f70000, 0x8c005002, 0x00000012,
        0x80000000, 0x00010000, 0x00800000, 0x80000000, 0x00c00000,
        0x003f0000, 0xfc000000, 0x1e000000, 0x03e00000, 0x00003f80,
        0xc0000000, 0x00000003, 0x0000000e, 0xc0002060, 0x1f000000,
        0x00000200, 0x0c003800, 0x00fffe3c, 0x00000006, 0x70000000,
        0x00000050, 0x0000000c, 0x18000000, 0x00000006, 0x0000000e,
        0x00020000, 0x01800000, 0x001f0000, 0x0000c000, 0x00200000,
        0x03800000, 0x00000010, 0x01800000, 0x80000000, 0x00000780};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 143, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 80, 0};

        static BinaryPropertyObject property_object{Term, std::move(codepoint_set)};
    }
PropertyObject * get_TERM_PropertyObject() {  return & TERM_ns::property_object; }
    namespace UIDEO_ns {
        /** Code Point Ranges for UIdeo
        [3400, 4dbf], [4e00, 9ffc], [fa0e, fa0f], [fa11, fa11],
        [fa13, fa14], [fa1f, fa1f], [fa21, fa21], [fa23, fa24],
        [fa27, fa29], [20000, 2a6dd], [2a700, 2b734], [2b740, 2b81d],
        [2b820, 2cea1], [2ceb0, 2ebe0], [30000, 3134a]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 416}, {Full, 206}, {Empty, 2}, {Full, 655}, {Mixed, 1},
        {Empty, 720}, {Mixed, 2}, {Empty, 2094}, {Full, 1334}, {Mixed, 1},
        {Empty, 1}, {Full, 129}, {Mixed, 1}, {Full, 6}, {Mixed, 1},
        {Full, 180}, {Mixed, 1}, {Full, 233}, {Mixed, 1}, {Empty, 160},
        {Full, 154}, {Mixed, 1}, {Empty, 28517}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x1fffffff, 0x801ac000, 0x0000039a, 0x3fffffff, 0x001fffff,
        0x3fffffff, 0xffff0003, 0x00000001, 0x000007ff};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 23, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 9, 0};

        static BinaryPropertyObject property_object{UIdeo, std::move(codepoint_set)};
    }
PropertyObject * get_UIDEO_PropertyObject() {  return & UIDEO_ns::property_object; }
    namespace VS_ns {
        /** Code Point Ranges for VS
        [180b, 180d], [fe00, fe0f], [e0100, e01ef]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 192}, {Mixed, 1}, {Empty, 1839}, {Mixed, 1}, {Empty, 26647},
        {Full, 7}, {Mixed, 1}, {Empty, 6128}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00003800, 0x0000ffff, 0x0000ffff};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 3, 0};

        static BinaryPropertyObject property_object{VS, std::move(codepoint_set)};
    }
PropertyObject * get_VS_PropertyObject() {  return & VS_ns::property_object; }
    namespace WSPACE_ns {
        /** Code Point Ranges for WSpace
        [0009, 000d], [0020, 0020], [0085, 0085], [00a0, 00a0],
        [1680, 1680], [2000, 200a], [2028, 2029], [202f, 202f],
        [205f, 205f], [3000, 3000]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Mixed, 2}, {Empty, 2}, {Mixed, 2}, {Empty, 174}, {Mixed, 1},
        {Empty, 75}, {Mixed, 3}, {Empty, 125}, {Mixed, 1}, {Empty, 34431}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00003e00, 0x00000001, 0x00000020, 0x00000001, 0x00000001,
        0x000007ff, 0x00008300, 0x80000000, 0x00000001};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 10, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 9, 0};

        static BinaryPropertyObject property_object{WSpace, std::move(codepoint_set)};
    }
PropertyObject * get_WSPACE_PropertyObject() {  return & WSPACE_ns::property_object; }
}

