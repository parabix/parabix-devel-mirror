
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  HangulSyllableType
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
  namespace HST_ns {
    const unsigned independent_prop_values = 6;
    /** Code Point Ranges for NA
    [0000, 10ff], [1200, a95f], [a97d, abff], [d7a4, d7af], [d7c7, d7ca],
    [d7fc, 10ffff]**/


    namespace {
    const static UnicodeSet::run_t __na_Set_runs[] = {
    {Full, 136}, {Empty, 8}, {Full, 1211}, {Mixed, 1}, {Full, 20},
    {Empty, 349}, {Mixed, 3}, {Full, 33088}};
    const static UnicodeSet::bitquad_t  __na_Set_quads[] = {
    0xe0000000, 0x0000fff0, 0x00000780, 0xf0000000};
    }

    const static UnicodeSet na_Set{const_cast<UnicodeSet::run_t *>(__na_Set_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__na_Set_quads), 4, 0};

    /** Code Point Ranges for L
    [1100, 115f], [a960, a97c]**/


    namespace {
    const static UnicodeSet::run_t __l_Set_runs[] = {
    {Empty, 136}, {Full, 3}, {Empty, 1216}, {Mixed, 1}, {Empty, 33460}};
    const static UnicodeSet::bitquad_t  __l_Set_quads[] = {
    0x1fffffff};
    }

    const static UnicodeSet l_Set{const_cast<UnicodeSet::run_t *>(__l_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__l_Set_quads), 1, 0};

    /** Code Point Ranges for V
    [1160, 11a7], [d7b0, d7c6]**/


    namespace {
    const static UnicodeSet::run_t __v_Set_runs[] = {
    {Empty, 139}, {Full, 2}, {Mixed, 1}, {Empty, 1583}, {Mixed, 2},
    {Empty, 33089}};
    const static UnicodeSet::bitquad_t  __v_Set_quads[] = {
    0x000000ff, 0xffff0000, 0x0000007f};
    }

    const static UnicodeSet v_Set{const_cast<UnicodeSet::run_t *>(__v_Set_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__v_Set_quads), 3, 0};

    /** Code Point Ranges for T
    [11a8, 11ff], [d7cb, d7fb]**/


    namespace {
    const static UnicodeSet::run_t __t_Set_runs[] = {
    {Empty, 141}, {Mixed, 1}, {Full, 2}, {Empty, 1582}, {Mixed, 2},
    {Empty, 33088}};
    const static UnicodeSet::bitquad_t  __t_Set_quads[] = {
    0xffffff00, 0xfffff800, 0x0fffffff};
    }

    const static UnicodeSet t_Set{const_cast<UnicodeSet::run_t *>(__t_Set_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__t_Set_quads), 3, 0};

    /** Code Point Ranges for LV
    [ac00, ac00], [ac1c, ac1c], [ac38, ac38], [ac54, ac54], [ac70, ac70],
    [ac8c, ac8c], [aca8, aca8], [acc4, acc4], [ace0, ace0], [acfc, acfc],
    [ad18, ad18], [ad34, ad34], [ad50, ad50], [ad6c, ad6c], [ad88, ad88],
    [ada4, ada4], [adc0, adc0], [addc, addc], [adf8, adf8], [ae14, ae14],
    [ae30, ae30], [ae4c, ae4c], [ae68, ae68], [ae84, ae84], [aea0, aea0],
    [aebc, aebc], [aed8, aed8], [aef4, aef4], [af10, af10], [af2c, af2c],
    [af48, af48], [af64, af64], [af80, af80], [af9c, af9c], [afb8, afb8],
    [afd4, afd4], [aff0, aff0], [b00c, b00c], [b028, b028], [b044, b044],
    [b060, b060], [b07c, b07c], [b098, b098], [b0b4, b0b4], [b0d0, b0d0],
    [b0ec, b0ec], [b108, b108], [b124, b124], [b140, b140], [b15c, b15c],
    [b178, b178], [b194, b194], [b1b0, b1b0], [b1cc, b1cc], [b1e8, b1e8],
    [b204, b204], [b220, b220], [b23c, b23c], [b258, b258], [b274, b274],
    [b290, b290], [b2ac, b2ac], [b2c8, b2c8], [b2e4, b2e4], [b300, b300],
    [b31c, b31c], [b338, b338], [b354, b354], [b370, b370], [b38c, b38c],
    [b3a8, b3a8], [b3c4, b3c4], [b3e0, b3e0], [b3fc, b3fc], [b418, b418],
    [b434, b434], [b450, b450], [b46c, b46c], [b488, b488], [b4a4, b4a4],
    [b4c0, b4c0], [b4dc, b4dc], [b4f8, b4f8], [b514, b514], [b530, b530],
    [b54c, b54c], [b568, b568], [b584, b584], [b5a0, b5a0], [b5bc, b5bc],
    [b5d8, b5d8], [b5f4, b5f4], [b610, b610], [b62c, b62c], [b648, b648],
    [b664, b664], [b680, b680], [b69c, b69c], [b6b8, b6b8], [b6d4, b6d4],
    [b6f0, b6f0], [b70c, b70c], [b728, b728], [b744, b744], [b760, b760],
    [b77c, b77c], [b798, b798], [b7b4, b7b4], [b7d0, b7d0], [b7ec, b7ec],
    [b808, b808], [b824, b824], [b840, b840], [b85c, b85c], [b878, b878],
    [b894, b894], [b8b0, b8b0], [b8cc, b8cc], [b8e8, b8e8], [b904, b904],
    [b920, b920], [b93c, b93c], [b958, b958], [b974, b974], [b990, b990],
    [b9ac, b9ac], [b9c8, b9c8], [b9e4, b9e4], [ba00, ba00], [ba1c, ba1c],
    [ba38, ba38], [ba54, ba54], [ba70, ba70], [ba8c, ba8c], [baa8, baa8],
    [bac4, bac4], [bae0, bae0], [bafc, bafc], [bb18, bb18], [bb34, bb34],
    [bb50, bb50], [bb6c, bb6c], [bb88, bb88], [bba4, bba4], [bbc0, bbc0],
    [bbdc, bbdc], [bbf8, bbf8], [bc14, bc14], [bc30, bc30], [bc4c, bc4c],
    [bc68, bc68], [bc84, bc84], [bca0, bca0], [bcbc, bcbc], [bcd8, bcd8],
    [bcf4, bcf4], [bd10, bd10], [bd2c, bd2c], [bd48, bd48], [bd64, bd64],
    [bd80, bd80], [bd9c, bd9c], [bdb8, bdb8], [bdd4, bdd4], [bdf0, bdf0],
    [be0c, be0c], [be28, be28], [be44, be44], [be60, be60], [be7c, be7c],
    [be98, be98], [beb4, beb4], [bed0, bed0], [beec, beec], [bf08, bf08],
    [bf24, bf24], [bf40, bf40], [bf5c, bf5c], [bf78, bf78], [bf94, bf94],
    [bfb0, bfb0], [bfcc, bfcc], [bfe8, bfe8], [c004, c004], [c020, c020],
    [c03c, c03c], [c058, c058], [c074, c074], [c090, c090], [c0ac, c0ac],
    [c0c8, c0c8], [c0e4, c0e4], [c100, c100], [c11c, c11c], [c138, c138],
    [c154, c154], [c170, c170], [c18c, c18c], [c1a8, c1a8], [c1c4, c1c4],
    [c1e0, c1e0], [c1fc, c1fc], [c218, c218], [c234, c234], [c250, c250],
    [c26c, c26c], [c288, c288], [c2a4, c2a4], [c2c0, c2c0], [c2dc, c2dc],
    [c2f8, c2f8], [c314, c314], [c330, c330], [c34c, c34c], [c368, c368],
    [c384, c384], [c3a0, c3a0], [c3bc, c3bc], [c3d8, c3d8], [c3f4, c3f4],
    [c410, c410], [c42c, c42c], [c448, c448], [c464, c464], [c480, c480],
    [c49c, c49c], [c4b8, c4b8], [c4d4, c4d4], [c4f0, c4f0], [c50c, c50c],
    [c528, c528], [c544, c544], [c560, c560], [c57c, c57c], [c598, c598],
    [c5b4, c5b4], [c5d0, c5d0], [c5ec, c5ec], [c608, c608], [c624, c624],
    [c640, c640], [c65c, c65c], [c678, c678], [c694, c694], [c6b0, c6b0],
    [c6cc, c6cc], [c6e8, c6e8], [c704, c704], [c720, c720], [c73c, c73c],
    [c758, c758], [c774, c774], [c790, c790], [c7ac, c7ac], [c7c8, c7c8],
    [c7e4, c7e4], [c800, c800], [c81c, c81c], [c838, c838], [c854, c854],
    [c870, c870], [c88c, c88c], [c8a8, c8a8], [c8c4, c8c4], [c8e0, c8e0],
    [c8fc, c8fc], [c918, c918], [c934, c934], [c950, c950], [c96c, c96c],
    [c988, c988], [c9a4, c9a4], [c9c0, c9c0], [c9dc, c9dc], [c9f8, c9f8],
    [ca14, ca14], [ca30, ca30], [ca4c, ca4c], [ca68, ca68], [ca84, ca84],
    [caa0, caa0], [cabc, cabc], [cad8, cad8], [caf4, caf4], [cb10, cb10],
    [cb2c, cb2c], [cb48, cb48], [cb64, cb64], [cb80, cb80], [cb9c, cb9c],
    [cbb8, cbb8], [cbd4, cbd4], [cbf0, cbf0], [cc0c, cc0c], [cc28, cc28],
    [cc44, cc44], [cc60, cc60], [cc7c, cc7c], [cc98, cc98], [ccb4, ccb4],
    [ccd0, ccd0], [ccec, ccec], [cd08, cd08], [cd24, cd24], [cd40, cd40],
    [cd5c, cd5c], [cd78, cd78], [cd94, cd94], [cdb0, cdb0], [cdcc, cdcc],
    [cde8, cde8], [ce04, ce04], [ce20, ce20], [ce3c, ce3c], [ce58, ce58],
    [ce74, ce74], [ce90, ce90], [ceac, ceac], [cec8, cec8], [cee4, cee4],
    [cf00, cf00], [cf1c, cf1c], [cf38, cf38], [cf54, cf54], [cf70, cf70],
    [cf8c, cf8c], [cfa8, cfa8], [cfc4, cfc4], [cfe0, cfe0], [cffc, cffc],
    [d018, d018], [d034, d034], [d050, d050], [d06c, d06c], [d088, d088],
    [d0a4, d0a4], [d0c0, d0c0], [d0dc, d0dc], [d0f8, d0f8], [d114, d114],
    [d130, d130], [d14c, d14c], [d168, d168], [d184, d184], [d1a0, d1a0],
    [d1bc, d1bc], [d1d8, d1d8], [d1f4, d1f4], [d210, d210], [d22c, d22c],
    [d248, d248], [d264, d264], [d280, d280], [d29c, d29c], [d2b8, d2b8],
    [d2d4, d2d4], [d2f0, d2f0], [d30c, d30c], [d328, d328], [d344, d344],
    [d360, d360], [d37c, d37c], [d398, d398], [d3b4, d3b4], [d3d0, d3d0],
    [d3ec, d3ec], [d408, d408], [d424, d424], [d440, d440], [d45c, d45c],
    [d478, d478], [d494, d494], [d4b0, d4b0], [d4cc, d4cc], [d4e8, d4e8],
    [d504, d504], [d520, d520], [d53c, d53c], [d558, d558], [d574, d574],
    [d590, d590], [d5ac, d5ac], [d5c8, d5c8], [d5e4, d5e4], [d600, d600],
    [d61c, d61c], [d638, d638], [d654, d654], [d670, d670], [d68c, d68c],
    [d6a8, d6a8], [d6c4, d6c4], [d6e0, d6e0], [d6fc, d6fc], [d718, d718],
    [d734, d734], [d750, d750], [d76c, d76c], [d788, d788]**/


    namespace {
    const static UnicodeSet::run_t __lv_Set_runs[] = {
    {Empty, 1376}, {Mixed, 349}, {Empty, 33091}};
    const static UnicodeSet::bitquad_t  __lv_Set_quads[] = {
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
    0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
    0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
    0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
    0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
    0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
    0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
    0x00000100};
    }

    const static UnicodeSet lv_Set{const_cast<UnicodeSet::run_t *>(__lv_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__lv_Set_quads), 349, 0};

    /** Code Point Ranges for LVT
    [ac01, ac1b], [ac1d, ac37], [ac39, ac53], [ac55, ac6f], [ac71, ac8b],
    [ac8d, aca7], [aca9, acc3], [acc5, acdf], [ace1, acfb], [acfd, ad17],
    [ad19, ad33], [ad35, ad4f], [ad51, ad6b], [ad6d, ad87], [ad89, ada3],
    [ada5, adbf], [adc1, addb], [addd, adf7], [adf9, ae13], [ae15, ae2f],
    [ae31, ae4b], [ae4d, ae67], [ae69, ae83], [ae85, ae9f], [aea1, aebb],
    [aebd, aed7], [aed9, aef3], [aef5, af0f], [af11, af2b], [af2d, af47],
    [af49, af63], [af65, af7f], [af81, af9b], [af9d, afb7], [afb9, afd3],
    [afd5, afef], [aff1, b00b], [b00d, b027], [b029, b043], [b045, b05f],
    [b061, b07b], [b07d, b097], [b099, b0b3], [b0b5, b0cf], [b0d1, b0eb],
    [b0ed, b107], [b109, b123], [b125, b13f], [b141, b15b], [b15d, b177],
    [b179, b193], [b195, b1af], [b1b1, b1cb], [b1cd, b1e7], [b1e9, b203],
    [b205, b21f], [b221, b23b], [b23d, b257], [b259, b273], [b275, b28f],
    [b291, b2ab], [b2ad, b2c7], [b2c9, b2e3], [b2e5, b2ff], [b301, b31b],
    [b31d, b337], [b339, b353], [b355, b36f], [b371, b38b], [b38d, b3a7],
    [b3a9, b3c3], [b3c5, b3df], [b3e1, b3fb], [b3fd, b417], [b419, b433],
    [b435, b44f], [b451, b46b], [b46d, b487], [b489, b4a3], [b4a5, b4bf],
    [b4c1, b4db], [b4dd, b4f7], [b4f9, b513], [b515, b52f], [b531, b54b],
    [b54d, b567], [b569, b583], [b585, b59f], [b5a1, b5bb], [b5bd, b5d7],
    [b5d9, b5f3], [b5f5, b60f], [b611, b62b], [b62d, b647], [b649, b663],
    [b665, b67f], [b681, b69b], [b69d, b6b7], [b6b9, b6d3], [b6d5, b6ef],
    [b6f1, b70b], [b70d, b727], [b729, b743], [b745, b75f], [b761, b77b],
    [b77d, b797], [b799, b7b3], [b7b5, b7cf], [b7d1, b7eb], [b7ed, b807],
    [b809, b823], [b825, b83f], [b841, b85b], [b85d, b877], [b879, b893],
    [b895, b8af], [b8b1, b8cb], [b8cd, b8e7], [b8e9, b903], [b905, b91f],
    [b921, b93b], [b93d, b957], [b959, b973], [b975, b98f], [b991, b9ab],
    [b9ad, b9c7], [b9c9, b9e3], [b9e5, b9ff], [ba01, ba1b], [ba1d, ba37],
    [ba39, ba53], [ba55, ba6f], [ba71, ba8b], [ba8d, baa7], [baa9, bac3],
    [bac5, badf], [bae1, bafb], [bafd, bb17], [bb19, bb33], [bb35, bb4f],
    [bb51, bb6b], [bb6d, bb87], [bb89, bba3], [bba5, bbbf], [bbc1, bbdb],
    [bbdd, bbf7], [bbf9, bc13], [bc15, bc2f], [bc31, bc4b], [bc4d, bc67],
    [bc69, bc83], [bc85, bc9f], [bca1, bcbb], [bcbd, bcd7], [bcd9, bcf3],
    [bcf5, bd0f], [bd11, bd2b], [bd2d, bd47], [bd49, bd63], [bd65, bd7f],
    [bd81, bd9b], [bd9d, bdb7], [bdb9, bdd3], [bdd5, bdef], [bdf1, be0b],
    [be0d, be27], [be29, be43], [be45, be5f], [be61, be7b], [be7d, be97],
    [be99, beb3], [beb5, becf], [bed1, beeb], [beed, bf07], [bf09, bf23],
    [bf25, bf3f], [bf41, bf5b], [bf5d, bf77], [bf79, bf93], [bf95, bfaf],
    [bfb1, bfcb], [bfcd, bfe7], [bfe9, c003], [c005, c01f], [c021, c03b],
    [c03d, c057], [c059, c073], [c075, c08f], [c091, c0ab], [c0ad, c0c7],
    [c0c9, c0e3], [c0e5, c0ff], [c101, c11b], [c11d, c137], [c139, c153],
    [c155, c16f], [c171, c18b], [c18d, c1a7], [c1a9, c1c3], [c1c5, c1df],
    [c1e1, c1fb], [c1fd, c217], [c219, c233], [c235, c24f], [c251, c26b],
    [c26d, c287], [c289, c2a3], [c2a5, c2bf], [c2c1, c2db], [c2dd, c2f7],
    [c2f9, c313], [c315, c32f], [c331, c34b], [c34d, c367], [c369, c383],
    [c385, c39f], [c3a1, c3bb], [c3bd, c3d7], [c3d9, c3f3], [c3f5, c40f],
    [c411, c42b], [c42d, c447], [c449, c463], [c465, c47f], [c481, c49b],
    [c49d, c4b7], [c4b9, c4d3], [c4d5, c4ef], [c4f1, c50b], [c50d, c527],
    [c529, c543], [c545, c55f], [c561, c57b], [c57d, c597], [c599, c5b3],
    [c5b5, c5cf], [c5d1, c5eb], [c5ed, c607], [c609, c623], [c625, c63f],
    [c641, c65b], [c65d, c677], [c679, c693], [c695, c6af], [c6b1, c6cb],
    [c6cd, c6e7], [c6e9, c703], [c705, c71f], [c721, c73b], [c73d, c757],
    [c759, c773], [c775, c78f], [c791, c7ab], [c7ad, c7c7], [c7c9, c7e3],
    [c7e5, c7ff], [c801, c81b], [c81d, c837], [c839, c853], [c855, c86f],
    [c871, c88b], [c88d, c8a7], [c8a9, c8c3], [c8c5, c8df], [c8e1, c8fb],
    [c8fd, c917], [c919, c933], [c935, c94f], [c951, c96b], [c96d, c987],
    [c989, c9a3], [c9a5, c9bf], [c9c1, c9db], [c9dd, c9f7], [c9f9, ca13],
    [ca15, ca2f], [ca31, ca4b], [ca4d, ca67], [ca69, ca83], [ca85, ca9f],
    [caa1, cabb], [cabd, cad7], [cad9, caf3], [caf5, cb0f], [cb11, cb2b],
    [cb2d, cb47], [cb49, cb63], [cb65, cb7f], [cb81, cb9b], [cb9d, cbb7],
    [cbb9, cbd3], [cbd5, cbef], [cbf1, cc0b], [cc0d, cc27], [cc29, cc43],
    [cc45, cc5f], [cc61, cc7b], [cc7d, cc97], [cc99, ccb3], [ccb5, cccf],
    [ccd1, cceb], [cced, cd07], [cd09, cd23], [cd25, cd3f], [cd41, cd5b],
    [cd5d, cd77], [cd79, cd93], [cd95, cdaf], [cdb1, cdcb], [cdcd, cde7],
    [cde9, ce03], [ce05, ce1f], [ce21, ce3b], [ce3d, ce57], [ce59, ce73],
    [ce75, ce8f], [ce91, ceab], [cead, cec7], [cec9, cee3], [cee5, ceff],
    [cf01, cf1b], [cf1d, cf37], [cf39, cf53], [cf55, cf6f], [cf71, cf8b],
    [cf8d, cfa7], [cfa9, cfc3], [cfc5, cfdf], [cfe1, cffb], [cffd, d017],
    [d019, d033], [d035, d04f], [d051, d06b], [d06d, d087], [d089, d0a3],
    [d0a5, d0bf], [d0c1, d0db], [d0dd, d0f7], [d0f9, d113], [d115, d12f],
    [d131, d14b], [d14d, d167], [d169, d183], [d185, d19f], [d1a1, d1bb],
    [d1bd, d1d7], [d1d9, d1f3], [d1f5, d20f], [d211, d22b], [d22d, d247],
    [d249, d263], [d265, d27f], [d281, d29b], [d29d, d2b7], [d2b9, d2d3],
    [d2d5, d2ef], [d2f1, d30b], [d30d, d327], [d329, d343], [d345, d35f],
    [d361, d37b], [d37d, d397], [d399, d3b3], [d3b5, d3cf], [d3d1, d3eb],
    [d3ed, d407], [d409, d423], [d425, d43f], [d441, d45b], [d45d, d477],
    [d479, d493], [d495, d4af], [d4b1, d4cb], [d4cd, d4e7], [d4e9, d503],
    [d505, d51f], [d521, d53b], [d53d, d557], [d559, d573], [d575, d58f],
    [d591, d5ab], [d5ad, d5c7], [d5c9, d5e3], [d5e5, d5ff], [d601, d61b],
    [d61d, d637], [d639, d653], [d655, d66f], [d671, d68b], [d68d, d6a7],
    [d6a9, d6c3], [d6c5, d6df], [d6e1, d6fb], [d6fd, d717], [d719, d733],
    [d735, d74f], [d751, d76b], [d76d, d787], [d789, d7a3]**/


    namespace {
    const static UnicodeSet::run_t __lvt_Set_runs[] = {
    {Empty, 1376}, {Mixed, 350}, {Empty, 33090}};
    const static UnicodeSet::bitquad_t  __lvt_Set_quads[] = {
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
    0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
    0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
    0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
    0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
    0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
    0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
    0xfffffeff, 0x0000000f};
    }

    const static UnicodeSet lvt_Set{const_cast<UnicodeSet::run_t *>(__lvt_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__lvt_Set_quads), 350, 0};

    static EnumeratedPropertyObject property_object
        {hst,
        HST_ns::independent_prop_values,
        std::move(HST_ns::enum_names),
        std::move(HST_ns::value_names),
        std::move(HST_ns::aliases_only_map),{
        &na_Set, &l_Set, &v_Set, &t_Set, &lv_Set, &lvt_Set
        }};
    }
PropertyObject * get_HST_PropertyObject() {  return & HST_ns::property_object; }
}
