
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  DerivedDecompositionType
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
  namespace DT_ns {
    const unsigned independent_prop_values = 18;
    /** Code Point Ranges for None
    [0000, 009f], [00a1, 00a7], [00a9, 00a9], [00ab, 00ae], [00b0, 00b1],
    [00b6, 00b7], [00bb, 00bb], [00bf, 00bf], [00c6, 00c6], [00d0, 00d0],
    [00d7, 00d8], [00de, 00df], [00e6, 00e6], [00f0, 00f0], [00f7, 00f8],
    [00fe, 00fe], [0110, 0111], [0126, 0127], [0131, 0131], [0138, 0138],
    [0141, 0142], [014a, 014b], [0152, 0153], [0166, 0167], [0180, 019f],
    [01a2, 01ae], [01b1, 01c3], [01dd, 01dd], [01e4, 01e5], [01f6, 01f7],
    [021c, 021d], [0220, 0225], [0234, 02af], [02b9, 02d7], [02de, 02df],
    [02e5, 033f], [0342, 0342], [0345, 0373], [0375, 0379], [037b, 037d],
    [037f, 0383], [038b, 038b], [038d, 038d], [0391, 03a9], [03b1, 03c9],
    [03cf, 03cf], [03d7, 03ef], [03f3, 03f3], [03f6, 03f8], [03fa, 03ff],
    [0402, 0402], [0404, 0406], [0408, 040b], [040f, 0418], [041a, 0438],
    [043a, 044f], [0452, 0452], [0454, 0456], [0458, 045b], [045f, 0475],
    [0478, 04c0], [04c3, 04cf], [04d4, 04d5], [04d8, 04d9], [04e0, 04e1],
    [04e8, 04e9], [04f6, 04f7], [04fa, 0586], [0588, 0621], [0627, 0674],
    [0679, 06bf], [06c1, 06c1], [06c3, 06d2], [06d4, 0928], [092a, 0930],
    [0932, 0933], [0935, 0957], [0960, 09ca], [09cd, 09db], [09de, 09de],
    [09e0, 0a32], [0a34, 0a35], [0a37, 0a58], [0a5c, 0a5d], [0a5f, 0b47],
    [0b49, 0b4a], [0b4d, 0b5b], [0b5e, 0b93], [0b95, 0bc9], [0bcd, 0c47],
    [0c49, 0cbf], [0cc1, 0cc6], [0cc9, 0cc9], [0ccc, 0d49], [0d4d, 0dd9],
    [0ddb, 0ddb], [0ddf, 0e32], [0e34, 0eb2], [0eb4, 0edb], [0ede, 0f0b],
    [0f0d, 0f42], [0f44, 0f4c], [0f4e, 0f51], [0f53, 0f56], [0f58, 0f5b],
    [0f5d, 0f68], [0f6a, 0f72], [0f74, 0f74], [0f7a, 0f80], [0f82, 0f92],
    [0f94, 0f9c], [0f9e, 0fa1], [0fa3, 0fa6], [0fa8, 0fab], [0fad, 0fb8],
    [0fba, 1025], [1027, 10fb], [10fd, 1b05], [1b07, 1b07], [1b09, 1b09],
    [1b0b, 1b0b], [1b0d, 1b0d], [1b0f, 1b11], [1b13, 1b3a], [1b3c, 1b3c],
    [1b3e, 1b3f], [1b42, 1b42], [1b44, 1d2b], [1d2f, 1d2f], [1d3b, 1d3b],
    [1d4e, 1d4e], [1d6b, 1d77], [1d79, 1d9a], [1dc0, 1dff], [1e9c, 1e9f],
    [1efa, 1eff], [1f16, 1f17], [1f1e, 1f1f], [1f46, 1f47], [1f4e, 1f4f],
    [1f58, 1f58], [1f5a, 1f5a], [1f5c, 1f5c], [1f5e, 1f5e], [1f7e, 1f7f],
    [1fb5, 1fb5], [1fc5, 1fc5], [1fd4, 1fd5], [1fdc, 1fdc], [1ff0, 1ff1],
    [1ff5, 1ff5], [1fff, 1fff], [200b, 2010], [2012, 2016], [2018, 2023],
    [2027, 202e], [2030, 2032], [2035, 2035], [2038, 203b], [203d, 203d],
    [203f, 2046], [204a, 2056], [2058, 205e], [2060, 206f], [2072, 2073],
    [208f, 208f], [209d, 20a7], [20a9, 20ff], [2104, 2104], [2108, 2108],
    [2114, 2114], [2117, 2118], [211e, 211f], [2123, 2123], [2125, 2125],
    [2127, 2127], [2129, 2129], [212e, 212e], [2132, 2132], [213a, 213a],
    [2141, 2144], [214a, 214f], [2180, 2188], [218a, 2199], [219c, 21ad],
    [21af, 21cc], [21d0, 2203], [2205, 2208], [220a, 220b], [220d, 2223],
    [2225, 2225], [2227, 222b], [222e, 222e], [2231, 2240], [2242, 2243],
    [2245, 2246], [2248, 2248], [224a, 225f], [2261, 2261], [2263, 226c],
    [2272, 2273], [2276, 2277], [227a, 227f], [2282, 2283], [2286, 2287],
    [228a, 22ab], [22b0, 22df], [22e4, 22e9], [22ee, 2328], [232b, 245f],
    [24eb, 2a0b], [2a0d, 2a73], [2a77, 2adb], [2add, 2c7b], [2c7e, 2d6e],
    [2d70, 2e9e], [2ea0, 2ef2], [2ef4, 2eff], [2fd6, 2fff], [3001, 3035],
    [3037, 3037], [303b, 304b], [304d, 304d], [304f, 304f], [3051, 3051],
    [3053, 3053], [3055, 3055], [3057, 3057], [3059, 3059], [305b, 305b],
    [305d, 305d], [305f, 305f], [3061, 3061], [3063, 3064], [3066, 3066],
    [3068, 3068], [306a, 306f], [3072, 3072], [3075, 3075], [3078, 3078],
    [307b, 307b], [307e, 3093], [3095, 309a], [309d, 309d], [30a0, 30ab],
    [30ad, 30ad], [30af, 30af], [30b1, 30b1], [30b3, 30b3], [30b5, 30b5],
    [30b7, 30b7], [30b9, 30b9], [30bb, 30bb], [30bd, 30bd], [30bf, 30bf],
    [30c1, 30c1], [30c3, 30c4], [30c6, 30c6], [30c8, 30c8], [30ca, 30cf],
    [30d2, 30d2], [30d5, 30d5], [30d8, 30d8], [30db, 30db], [30de, 30f3],
    [30f5, 30f6], [30fb, 30fd], [3100, 3130], [318f, 3191], [31a0, 31ff],
    [321f, 321f], [3248, 324f], [327f, 327f], [3400, a69b], [a69e, a76f],
    [a771, a7f7], [a7fa, ab5b], [ab60, ab68], [ab6a, abff], [d7a4, f8ff],
    [fa0e, fa0f], [fa11, fa11], [fa13, fa14], [fa1f, fa1f], [fa21, fa21],
    [fa23, fa24], [fa27, fa29], [fa6e, fa6f], [fada, faff], [fb07, fb12],
    [fb18, fb1c], [fb1e, fb1e], [fb37, fb37], [fb3d, fb3d], [fb3f, fb3f],
    [fb42, fb42], [fb45, fb45], [fbb2, fbd2], [fd3e, fd4f], [fd90, fd91],
    [fdc8, fdef], [fdfd, fe0f], [fe1a, fe2f], [fe45, fe46], [fe53, fe53],
    [fe67, fe67], [fe6c, fe6f], [fe73, fe73], [fe75, fe75], [fefd, ff00],
    [ffbf, ffc1], [ffc8, ffc9], [ffd0, ffd1], [ffd8, ffd9], [ffdd, ffdf],
    [ffe7, ffe7], [ffef, 11099], [1109b, 1109b], [1109d, 110aa],
    [110ac, 1112d], [11130, 1134a], [1134d, 114ba], [114bd, 114bd],
    [114bf, 115b9], [115bc, 11937], [11939, 1d15d], [1d165, 1d1ba],
    [1d1c1, 1d3ff], [1d455, 1d455], [1d49d, 1d49d], [1d4a0, 1d4a1],
    [1d4a3, 1d4a4], [1d4a7, 1d4a8], [1d4ad, 1d4ad], [1d4ba, 1d4ba],
    [1d4bc, 1d4bc], [1d4c4, 1d4c4], [1d506, 1d506], [1d50b, 1d50c],
    [1d515, 1d515], [1d51d, 1d51d], [1d53a, 1d53a], [1d53f, 1d53f],
    [1d545, 1d545], [1d547, 1d549], [1d551, 1d551], [1d6a6, 1d6a7],
    [1d7cc, 1d7cd], [1d800, 1edff], [1ee04, 1ee04], [1ee20, 1ee20],
    [1ee23, 1ee23], [1ee25, 1ee26], [1ee28, 1ee28], [1ee33, 1ee33],
    [1ee38, 1ee38], [1ee3a, 1ee3a], [1ee3c, 1ee41], [1ee43, 1ee46],
    [1ee48, 1ee48], [1ee4a, 1ee4a], [1ee4c, 1ee4c], [1ee50, 1ee50],
    [1ee53, 1ee53], [1ee55, 1ee56], [1ee58, 1ee58], [1ee5a, 1ee5a],
    [1ee5c, 1ee5c], [1ee5e, 1ee5e], [1ee60, 1ee60], [1ee63, 1ee63],
    [1ee65, 1ee66], [1ee6b, 1ee6b], [1ee73, 1ee73], [1ee78, 1ee78],
    [1ee7d, 1ee7d], [1ee7f, 1ee7f], [1ee8a, 1ee8a], [1ee9c, 1eea0],
    [1eea4, 1eea4], [1eeaa, 1eeaa], [1eebc, 1f0ff], [1f10b, 1f10f],
    [1f12f, 1f12f], [1f150, 1f169], [1f16d, 1f18f], [1f191, 1f1ff],
    [1f203, 1f20f], [1f23c, 1f23f], [1f249, 1f24f], [1f252, 1fbef],
    [1fbfa, 2f7ff], [2fa1e, 10ffff]**/


    namespace {
    const static UnicodeSet::run_t __none_Set_runs[] = {
    {Full, 5}, {Mixed, 7}, {Full, 1}, {Mixed, 5}, {Full, 3}, {Mixed, 3},
    {Full, 2}, {Mixed, 10}, {Full, 2}, {Mixed, 2}, {Full, 4}, {Mixed, 1},
    {Full, 4}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 1},
    {Full, 18}, {Mixed, 2}, {Full, 3}, {Mixed, 1}, {Full, 2}, {Mixed, 2},
    {Full, 7}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 1},
    {Full, 3}, {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Full, 3}, {Mixed, 1},
    {Full, 3}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 3}, {Mixed, 2},
    {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 4}, {Full, 3}, {Mixed, 1},
    {Full, 5}, {Mixed, 1}, {Full, 80}, {Mixed, 3}, {Full, 14}, {Mixed, 4},
    {Empty, 1}, {Full, 2}, {Empty, 4}, {Mixed, 1}, {Empty, 2}, {Mixed, 2},
    {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 9}, {Full, 2}, {Mixed, 3},
    {Empty, 1}, {Mixed, 3}, {Full, 1}, {Mixed, 6}, {Full, 1}, {Mixed, 1},
    {Full, 1}, {Mixed, 1}, {Full, 9}, {Empty, 4}, {Mixed, 1}, {Full, 40},
    {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 12},
    {Mixed, 1}, {Full, 7}, {Mixed, 1}, {Full, 8}, {Mixed, 1}, {Full, 2},
    {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Full, 1}, {Mixed, 8}, {Full, 1},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Empty, 1},
    {Mixed, 2}, {Empty, 12}, {Full, 916}, {Mixed, 1}, {Full, 6}, {Mixed, 1},
    {Full, 3}, {Mixed, 1}, {Full, 26}, {Mixed, 2}, {Full, 4}, {Empty, 349},
    {Mixed, 1}, {Full, 266}, {Empty, 8}, {Mixed, 2}, {Empty, 1}, {Mixed, 1},
    {Empty, 2}, {Mixed, 1}, {Full, 1}, {Mixed, 3}, {Empty, 2}, {Mixed, 2},
    {Empty, 10}, {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 6},
    {Empty, 3}, {Mixed, 2}, {Empty, 4}, {Mixed, 3}, {Full, 132}, {Mixed, 2},
    {Full, 3}, {Mixed, 1}, {Full, 16}, {Mixed, 1}, {Full, 10}, {Mixed, 1},
    {Full, 7}, {Mixed, 1}, {Full, 27}, {Mixed, 1}, {Full, 1472}, {Mixed, 2},
    {Full, 1}, {Mixed, 2}, {Full, 17}, {Empty, 2}, {Mixed, 1}, {Empty, 1},
    {Mixed, 3}, {Empty, 1}, {Mixed, 3}, {Empty, 10}, {Mixed, 1}, {Empty, 8},
    {Mixed, 1}, {Empty, 1}, {Full, 176}, {Mixed, 6}, {Full, 18}, {Mixed, 5},
    {Full, 3}, {Mixed, 3}, {Full, 76}, {Mixed, 1}, {Full, 2016},
    {Empty, 16}, {Mixed, 1}, {Full, 28719}};
    const static UnicodeSet::bitquad_t  __none_Set_quads[] = {
    0x88c37afe, 0xc1810040, 0x41810040, 0x00030000, 0x010200c0, 0x000c0c06,
    0x000000c0, 0xfffe7ffc, 0x2000000f, 0x00c00030, 0x30000000, 0xfff0003f,
    0xfe00ffff, 0xc0ffffff, 0xffffffe0, 0xffffffe4, 0xbbefffff, 0xfffe280f,
    0xfffe03ff, 0xff8083ff, 0xfdc8ffff, 0xfdff8f74, 0xfdffffff, 0x8f74ffff,
    0xff3fffff, 0x0330fff9, 0xfcc00303, 0xffffff7f, 0xffffff83, 0xfe1fffff,
    0xfff7fffa, 0xffedfdff, 0x00ffffff, 0x4fffe7ff, 0xffb7ffff, 0xb1ffffff,
    0xcfffe6ff, 0xffefffff, 0xffffe3ff, 0xfffffeff, 0xfffff27e, 0xffffe3ff,
    0x8bffffff, 0xfff7ffff, 0xfff7ffff, 0xcfffffff, 0xffffefff, 0xef7bdff7,
    0xfc17fdff, 0xdff7fffd, 0xfdffef7b, 0xffffffbf, 0xefffffff, 0xfffbaabf,
    0xd7ffffff, 0xfffffff4, 0x08008fff, 0x00004000, 0xfefff800, 0x07ffffff,
    0xf0000000, 0xfc000000, 0xc0c00000, 0x5500c0c0, 0xc0000000, 0x00200000,
    0x10300020, 0x80230000, 0xff7df800, 0xaf277f8f, 0x7f7ffc7f, 0x000cffff,
    0xe0008000, 0xfffffeff, 0xc1900110, 0x040442a8, 0x0000fc1e, 0xf3fffdff,
    0xffffbfff, 0xffff1fff, 0xffffedef, 0xfffe4faf, 0xfffffd6d, 0xfccc1ffa,
    0xfffffccc, 0xffff0fff, 0xffffc3f0, 0xfffff9ff, 0xfffff800, 0xffffefff,
    0xff8fffff, 0xefffffff, 0xcfffffff, 0xffff7fff, 0x7fffffff, 0xfff7ffff,
    0xffc00000, 0xfffffffe, 0xf8bfffff, 0xaaaaafff, 0xc924fd5a, 0x27efffff,
    0xaaaaafff, 0xc924fd5a, 0x386fffff, 0x0001ffff, 0x00038000, 0x80000000,
    0x0000ff00, 0x80000000, 0xcfffffff, 0xfffeffff, 0xfcffffff, 0x0fffffff,
    0xfffffdff, 0xfffffff0, 0x801ac000, 0x0000039a, 0x0000c000, 0xfc000000,
    0x5f07ff80, 0xa0800000, 0x00000024, 0xfffc0000, 0x0007ffff, 0xc0000000,
    0x0000ffff, 0x00030000, 0xffffff00, 0xe000ffff, 0xfc00ffff, 0x0000ffff,
    0x00080060, 0x0028f080, 0xe0000000, 0x00000001, 0x80000000, 0xe3030303,
    0xffff8080, 0xebffffff, 0xfffff7ff, 0xffff3fff, 0xffffe7ff, 0xa7ffffff,
    0xf3ffffff, 0xfeffffff, 0x3fffffff, 0xffffffe0, 0x07ffffff, 0xfffffffe,
    0x00200000, 0x20000000, 0x1400219b, 0x00000010, 0x20201840, 0x84000000,
    0x000203a0, 0x000000c0, 0x00003000, 0x00000010, 0xf5080169, 0x5569157b,
    0xa1080869, 0xf0000400, 0xf0000411, 0x0000f800, 0x00008000, 0xffff0000,
    0xffffe3ff, 0xfffeffff, 0x0000fff8, 0xf0000000, 0xfffcfe00, 0xfc00ffff,
    0xc0000000};
    }

    const static UnicodeSet none_Set{const_cast<UnicodeSet::run_t *>(__none_Set_runs), 176, 0, const_cast<UnicodeSet::bitquad_t *>(__none_Set_quads), 175, 0};

    /** Code Point Ranges for Can
    [00c0, 00c5], [00c7, 00cf], [00d1, 00d6], [00d9, 00dd], [00e0, 00e5],
    [00e7, 00ef], [00f1, 00f6], [00f9, 00fd], [00ff, 010f], [0112, 0125],
    [0128, 0130], [0134, 0137], [0139, 013e], [0143, 0148], [014c, 0151],
    [0154, 0165], [0168, 017e], [01a0, 01a1], [01af, 01b0], [01cd, 01dc],
    [01de, 01e3], [01e6, 01f0], [01f4, 01f5], [01f8, 021b], [021e, 021f],
    [0226, 0233], [0340, 0341], [0343, 0344], [0374, 0374], [037e, 037e],
    [0385, 038a], [038c, 038c], [038e, 0390], [03aa, 03b0], [03ca, 03ce],
    [03d3, 03d4], [0400, 0401], [0403, 0403], [0407, 0407], [040c, 040e],
    [0419, 0419], [0439, 0439], [0450, 0451], [0453, 0453], [0457, 0457],
    [045c, 045e], [0476, 0477], [04c1, 04c2], [04d0, 04d3], [04d6, 04d7],
    [04da, 04df], [04e2, 04e7], [04ea, 04f5], [04f8, 04f9], [0622, 0626],
    [06c0, 06c0], [06c2, 06c2], [06d3, 06d3], [0929, 0929], [0931, 0931],
    [0934, 0934], [0958, 095f], [09cb, 09cc], [09dc, 09dd], [09df, 09df],
    [0a33, 0a33], [0a36, 0a36], [0a59, 0a5b], [0a5e, 0a5e], [0b48, 0b48],
    [0b4b, 0b4c], [0b5c, 0b5d], [0b94, 0b94], [0bca, 0bcc], [0c48, 0c48],
    [0cc0, 0cc0], [0cc7, 0cc8], [0cca, 0ccb], [0d4a, 0d4c], [0dda, 0dda],
    [0ddc, 0dde], [0f43, 0f43], [0f4d, 0f4d], [0f52, 0f52], [0f57, 0f57],
    [0f5c, 0f5c], [0f69, 0f69], [0f73, 0f73], [0f75, 0f76], [0f78, 0f78],
    [0f81, 0f81], [0f93, 0f93], [0f9d, 0f9d], [0fa2, 0fa2], [0fa7, 0fa7],
    [0fac, 0fac], [0fb9, 0fb9], [1026, 1026], [1b06, 1b06], [1b08, 1b08],
    [1b0a, 1b0a], [1b0c, 1b0c], [1b0e, 1b0e], [1b12, 1b12], [1b3b, 1b3b],
    [1b3d, 1b3d], [1b40, 1b41], [1b43, 1b43], [1e00, 1e99], [1e9b, 1e9b],
    [1ea0, 1ef9], [1f00, 1f15], [1f18, 1f1d], [1f20, 1f45], [1f48, 1f4d],
    [1f50, 1f57], [1f59, 1f59], [1f5b, 1f5b], [1f5d, 1f5d], [1f5f, 1f7d],
    [1f80, 1fb4], [1fb6, 1fbc], [1fbe, 1fbe], [1fc1, 1fc4], [1fc6, 1fd3],
    [1fd6, 1fdb], [1fdd, 1fef], [1ff2, 1ff4], [1ff6, 1ffd], [2000, 2001],
    [2126, 2126], [212a, 212b], [219a, 219b], [21ae, 21ae], [21cd, 21cf],
    [2204, 2204], [2209, 2209], [220c, 220c], [2224, 2224], [2226, 2226],
    [2241, 2241], [2244, 2244], [2247, 2247], [2249, 2249], [2260, 2260],
    [2262, 2262], [226d, 2271], [2274, 2275], [2278, 2279], [2280, 2281],
    [2284, 2285], [2288, 2289], [22ac, 22af], [22e0, 22e3], [22ea, 22ed],
    [2329, 232a], [2adc, 2adc], [304c, 304c], [304e, 304e], [3050, 3050],
    [3052, 3052], [3054, 3054], [3056, 3056], [3058, 3058], [305a, 305a],
    [305c, 305c], [305e, 305e], [3060, 3060], [3062, 3062], [3065, 3065],
    [3067, 3067], [3069, 3069], [3070, 3071], [3073, 3074], [3076, 3077],
    [3079, 307a], [307c, 307d], [3094, 3094], [309e, 309e], [30ac, 30ac],
    [30ae, 30ae], [30b0, 30b0], [30b2, 30b2], [30b4, 30b4], [30b6, 30b6],
    [30b8, 30b8], [30ba, 30ba], [30bc, 30bc], [30be, 30be], [30c0, 30c0],
    [30c2, 30c2], [30c5, 30c5], [30c7, 30c7], [30c9, 30c9], [30d0, 30d1],
    [30d3, 30d4], [30d6, 30d7], [30d9, 30da], [30dc, 30dd], [30f4, 30f4],
    [30f7, 30fa], [30fe, 30fe], [ac00, d7a3], [f900, fa0d], [fa10, fa10],
    [fa12, fa12], [fa15, fa1e], [fa20, fa20], [fa22, fa22], [fa25, fa26],
    [fa2a, fa6d], [fa70, fad9], [fb1d, fb1d], [fb1f, fb1f], [fb2a, fb36],
    [fb38, fb3c], [fb3e, fb3e], [fb40, fb41], [fb43, fb44], [fb46, fb4e],
    [1109a, 1109a], [1109c, 1109c], [110ab, 110ab], [1112e, 1112f],
    [1134b, 1134c], [114bb, 114bc], [114be, 114be], [115ba, 115bb],
    [11938, 11938], [1d15e, 1d164], [1d1bb, 1d1c0], [2f800, 2fa1d]**/


    namespace {
    const static UnicodeSet::run_t __can_Set_runs[] = {
    {Empty, 6}, {Mixed, 6}, {Empty, 1}, {Mixed, 5}, {Empty, 8}, {Mixed, 5},
    {Empty, 1}, {Mixed, 4}, {Empty, 2}, {Mixed, 2}, {Empty, 9}, {Mixed, 1},
    {Empty, 4}, {Mixed, 1}, {Empty, 18}, {Mixed, 2}, {Empty, 3}, {Mixed, 1},
    {Empty, 2}, {Mixed, 2}, {Empty, 7}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
    {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 11}, {Mixed, 4},
    {Empty, 3}, {Mixed, 1}, {Empty, 86}, {Mixed, 3}, {Empty, 21}, {Full, 4},
    {Mixed, 1}, {Full, 2}, {Mixed, 2}, {Full, 1}, {Mixed, 2}, {Full, 1},
    {Mixed, 4}, {Empty, 8}, {Mixed, 1}, {Empty, 2}, {Mixed, 3}, {Empty, 1},
    {Mixed, 6}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 60},
    {Mixed, 1}, {Empty, 43}, {Mixed, 6}, {Empty, 984}, {Full, 349},
    {Mixed, 1}, {Empty, 266}, {Full, 8}, {Mixed, 2}, {Full, 1}, {Mixed, 1},
    {Full, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 169}, {Mixed, 2},
    {Empty, 3}, {Mixed, 1}, {Empty, 16}, {Mixed, 1}, {Empty, 10},
    {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 27}, {Mixed, 1},
    {Empty, 1472}, {Mixed, 2}, {Empty, 1}, {Mixed, 2}, {Empty, 2353},
    {Full, 16}, {Mixed, 1}, {Empty, 28719}};
    const static UnicodeSet::bitquad_t  __can_Set_quads[] = {
    0x3e7effbf, 0xbe7effbf, 0xfffcffff, 0x7ef1ff3f, 0xfff3f1f8, 0x7fffff3f,
    0x00018003, 0xdfffe000, 0xff31ffcf, 0xcfffffff, 0x000fffc0, 0x0000001b,
    0x40100000, 0x0001d7e0, 0x0001fc00, 0x00187c00, 0x0200708b, 0x02000000,
    0x708b0000, 0x00c00000, 0xfccf0006, 0x033ffcfc, 0x0000007c, 0x00080005,
    0x00120200, 0xff000000, 0xb0001800, 0x00480000, 0x4e000000, 0x30001900,
    0x00100000, 0x00001c00, 0x00000100, 0x00000d81, 0x00001c00, 0x74000000,
    0x10842008, 0x01680200, 0x20080002, 0x02001084, 0x00000040, 0x00045540,
    0x28000000, 0x0000000b, 0x0bffffff, 0x03ffffff, 0x3f3fffff, 0xaaff3f3f,
    0x3fffffff, 0x5fdfffff, 0xefcfffde, 0x3fdcffff, 0x00000003, 0x00000c40,
    0x0c000000, 0x00004000, 0x0000e000, 0x00001210, 0x00000050, 0x00000292,
    0x0333e005, 0x00000333, 0x0000f000, 0x00003c0f, 0x00000600, 0x10000000,
    0x55555000, 0x36db02a5, 0x40100000, 0x55555000, 0x36db02a5, 0x47900000,
    0x0000000f, 0x7fe53fff, 0xfffffc65, 0xffff3fff, 0x03ffffff, 0xa0000000,
    0x5f7ffc00, 0x00007fdb, 0x14000000, 0x00000800, 0x0000c000, 0x00001800,
    0x58000000, 0x0c000000, 0x01000000, 0xc0000000, 0x0000001f, 0xf8000000,
    0x00000001, 0x3fffffff};
    }

    const static UnicodeSet can_Set{const_cast<UnicodeSet::run_t *>(__can_Set_runs), 95, 0, const_cast<UnicodeSet::bitquad_t *>(__can_Set_quads), 92, 0};

    /** Code Point Ranges for Com
    [00a8, 00a8], [00af, 00af], [00b4, 00b5], [00b8, 00b8], [0132, 0133],
    [013f, 0140], [0149, 0149], [017f, 017f], [01c4, 01cc], [01f1, 01f3],
    [02d8, 02dd], [037a, 037a], [0384, 0384], [03d0, 03d2], [03d5, 03d6],
    [03f0, 03f2], [03f4, 03f5], [03f9, 03f9], [0587, 0587], [0675, 0678],
    [0e33, 0e33], [0eb3, 0eb3], [0edc, 0edd], [0f77, 0f77], [0f79, 0f79],
    [1e9a, 1e9a], [1fbd, 1fbd], [1fbf, 1fc0], [1ffe, 1ffe], [2002, 2006],
    [2008, 200a], [2017, 2017], [2024, 2026], [2033, 2034], [2036, 2037],
    [203c, 203c], [203e, 203e], [2047, 2049], [2057, 2057], [205f, 205f],
    [20a8, 20a8], [2100, 2101], [2103, 2103], [2105, 2107], [2109, 2109],
    [2116, 2116], [2121, 2121], [2135, 2138], [213b, 213b], [2160, 217f],
    [222c, 222d], [222f, 2230], [2474, 24b5], [2a0c, 2a0c], [2a74, 2a76],
    [2e9f, 2e9f], [2ef3, 2ef3], [2f00, 2fd5], [3036, 3036], [3038, 303a],
    [309b, 309c], [3131, 318e], [3200, 321e], [3220, 3243], [32c0, 32cb],
    [3358, 3370], [33e0, 33fe], [fb00, fb06], [fb13, fb17], [fb4f, fb4f],
    [fe49, fe4f], [1f100, 1f10a], [1f110, 1f12a], [1f240, 1f248]**/


    namespace {
    const static UnicodeSet::run_t __com_Set_runs[] = {
    {Empty, 5}, {Mixed, 1}, {Empty, 3}, {Mixed, 3}, {Empty, 2}, {Mixed, 2},
    {Empty, 6}, {Mixed, 1}, {Empty, 4}, {Mixed, 2}, {Empty, 1}, {Mixed, 2},
    {Empty, 12}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 61},
    {Mixed, 1}, {Empty, 3}, {Mixed, 2}, {Empty, 4}, {Mixed, 1},
    {Empty, 120}, {Mixed, 1}, {Empty, 8}, {Mixed, 6}, {Empty, 2},
    {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 1}, {Full, 1}, {Empty, 5},
    {Mixed, 1}, {Empty, 17}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 42},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 32}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Full, 6}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Empty, 3},
    {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3},
    {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 1592}, {Mixed, 1},
    {Empty, 1}, {Mixed, 1}, {Empty, 23}, {Mixed, 1}, {Empty, 1941},
    {Mixed, 2}, {Empty, 8}, {Mixed, 1}, {Empty, 30829}};
    const static UnicodeSet::bitquad_t  __com_Set_quads[] = {
    0x01308100, 0x800c0000, 0x00000201, 0x80000000, 0x00001ff0, 0x000e0000,
    0x3f000000, 0x04000000, 0x00000010, 0x00670000, 0x02370000, 0x00000080,
    0x01e00000, 0x00080000, 0x00080000, 0x30000000, 0x02800000, 0x04000000,
    0xa0000000, 0x00000001, 0x40000000, 0x0080077c, 0x50d80070, 0x80800380,
    0x00000100, 0x004002eb, 0x09e00002, 0x0001b000, 0xfff00000, 0x003fffff,
    0x00001000, 0x00700000, 0x80000000, 0x00080000, 0x003fffff, 0x07400000,
    0x18000000, 0xfffe0000, 0x00007fff, 0x7fffffff, 0x0000000f, 0x00000fff,
    0xff000000, 0x0001ffff, 0x7fffffff, 0x00f8007f, 0x00008000, 0x0000fe00,
    0xffff07ff, 0x000007ff, 0x000001ff};
    }

    const static UnicodeSet com_Set{const_cast<UnicodeSet::run_t *>(__com_Set_runs), 77, 0, const_cast<UnicodeSet::bitquad_t *>(__com_Set_quads), 51, 0};

    /** Code Point Ranges for Font
    [2102, 2102], [210a, 2113], [2115, 2115], [2119, 211d], [2124, 2124],
    [2128, 2128], [212c, 212d], [212f, 2131], [2133, 2134], [2139, 2139],
    [213c, 2140], [2145, 2149], [fb20, fb29], [1d400, 1d454],
    [1d456, 1d49c], [1d49e, 1d49f], [1d4a2, 1d4a2], [1d4a5, 1d4a6],
    [1d4a9, 1d4ac], [1d4ae, 1d4b9], [1d4bb, 1d4bb], [1d4bd, 1d4c3],
    [1d4c5, 1d505], [1d507, 1d50a], [1d50d, 1d514], [1d516, 1d51c],
    [1d51e, 1d539], [1d53b, 1d53e], [1d540, 1d544], [1d546, 1d546],
    [1d54a, 1d550], [1d552, 1d6a5], [1d6a8, 1d7cb], [1d7ce, 1d7ff],
    [1ee00, 1ee03], [1ee05, 1ee1f], [1ee21, 1ee22], [1ee24, 1ee24],
    [1ee27, 1ee27], [1ee29, 1ee32], [1ee34, 1ee37], [1ee39, 1ee39],
    [1ee3b, 1ee3b], [1ee42, 1ee42], [1ee47, 1ee47], [1ee49, 1ee49],
    [1ee4b, 1ee4b], [1ee4d, 1ee4f], [1ee51, 1ee52], [1ee54, 1ee54],
    [1ee57, 1ee57], [1ee59, 1ee59], [1ee5b, 1ee5b], [1ee5d, 1ee5d],
    [1ee5f, 1ee5f], [1ee61, 1ee62], [1ee64, 1ee64], [1ee67, 1ee6a],
    [1ee6c, 1ee72], [1ee74, 1ee77], [1ee79, 1ee7c], [1ee7e, 1ee7e],
    [1ee80, 1ee89], [1ee8b, 1ee9b], [1eea1, 1eea3], [1eea5, 1eea9],
    [1eeab, 1eebb], [1fbf0, 1fbf9]**/


    namespace {
    const static UnicodeSet::run_t __font_Set_runs[] = {
    {Empty, 264}, {Mixed, 3}, {Empty, 1742}, {Mixed, 1}, {Empty, 1734},
    {Full, 2}, {Mixed, 1}, {Full, 1}, {Mixed, 3}, {Full, 1}, {Mixed, 3},
    {Full, 10}, {Mixed, 1}, {Full, 8}, {Mixed, 1}, {Full, 1}, {Empty, 176},
    {Mixed, 6}, {Empty, 105}, {Mixed, 1}, {Empty, 30752}};
    const static UnicodeSet::bitquad_t  __font_Set_quads[] = {
    0x3e2ffc04, 0xf21bb110, 0x000003e1, 0x000003ff, 0xffdfffff, 0xdfffffff,
    0xebffde64, 0xffffffef, 0xdfdfe7bf, 0x7bffffff, 0xfffdfc5f, 0xffffff3f,
    0xffffcfff, 0xffffffef, 0x0af7fe96, 0xaa96ea84, 0x5ef7f796, 0x0ffffbff,
    0x0ffffbee, 0x03ff0000};
    }

    const static UnicodeSet font_Set{const_cast<UnicodeSet::run_t *>(__font_Set_runs), 21, 0, const_cast<UnicodeSet::bitquad_t *>(__font_Set_quads), 20, 0};

    /** Code Point Ranges for Nb
    [00a0, 00a0], [0f0c, 0f0c], [2007, 2007], [2011, 2011], [202f, 202f]**/


    namespace {
    const static UnicodeSet::run_t __nb_Set_runs[] = {
    {Empty, 5}, {Mixed, 1}, {Empty, 114}, {Mixed, 1}, {Empty, 135},
    {Mixed, 2}, {Empty, 34558}};
    const static UnicodeSet::bitquad_t  __nb_Set_quads[] = {
    0x00000001, 0x00001000, 0x00020080, 0x00008000};
    }

    const static UnicodeSet nb_Set{const_cast<UnicodeSet::run_t *>(__nb_Set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__nb_Set_quads), 4, 0};

    /** Code Point Ranges for Init
    [fb54, fb54], [fb58, fb58], [fb5c, fb5c], [fb60, fb60], [fb64, fb64],
    [fb68, fb68], [fb6c, fb6c], [fb70, fb70], [fb74, fb74], [fb78, fb78],
    [fb7c, fb7c], [fb80, fb80], [fb90, fb90], [fb94, fb94], [fb98, fb98],
    [fb9c, fb9c], [fba2, fba2], [fba8, fba8], [fbac, fbac], [fbd5, fbd5],
    [fbe6, fbe6], [fbe8, fbe8], [fbf8, fbf8], [fbfb, fbfb], [fbfe, fbfe],
    [fc97, fcde], [fd2d, fd33], [fd50, fd50], [fd52, fd57], [fd59, fd59],
    [fd5c, fd5d], [fd60, fd61], [fd63, fd63], [fd65, fd65], [fd68, fd68],
    [fd6b, fd6b], [fd6d, fd6d], [fd70, fd70], [fd72, fd73], [fd77, fd77],
    [fd7d, fd7d], [fd83, fd83], [fd86, fd86], [fd88, fd8a], [fd8c, fd8f],
    [fd92, fd95], [fd98, fd98], [fd9d, fd9d], [fdb4, fdb5], [fdb8, fdb8],
    [fdba, fdba], [fdc3, fdc5], [fe8b, fe8b], [fe91, fe91], [fe97, fe97],
    [fe9b, fe9b], [fe9f, fe9f], [fea3, fea3], [fea7, fea7], [feb3, feb3],
    [feb7, feb7], [febb, febb], [febf, febf], [fec3, fec3], [fec7, fec7],
    [fecb, fecb], [fecf, fecf], [fed3, fed3], [fed7, fed7], [fedb, fedb],
    [fedf, fedf], [fee3, fee3], [fee7, fee7], [feeb, feeb], [fef3, fef3]**/


    namespace {
    const static UnicodeSet::run_t __init_Set_runs[] = {
    {Empty, 2010}, {Mixed, 6}, {Empty, 4}, {Mixed, 1}, {Full, 1},
    {Mixed, 1}, {Empty, 2}, {Mixed, 6}, {Empty, 5}, {Mixed, 4},
    {Empty, 32776}};
    const static UnicodeSet::bitquad_t  __init_Set_quads[] = {
    0x11100000, 0x11111111, 0x11110001, 0x00001104, 0x00200000, 0x49000140,
    0xff800000, 0x7fffffff, 0x000fe000, 0x32fd0000, 0x208d292b, 0x213cf748,
    0x05300000, 0x00000038, 0x88820800, 0x88880088, 0x88888888, 0x00080888};
    }

    const static UnicodeSet init_Set{const_cast<UnicodeSet::run_t *>(__init_Set_runs), 11, 0, const_cast<UnicodeSet::bitquad_t *>(__init_Set_quads), 18, 0};

    /** Code Point Ranges for Med
    [fb55, fb55], [fb59, fb59], [fb5d, fb5d], [fb61, fb61], [fb65, fb65],
    [fb69, fb69], [fb6d, fb6d], [fb71, fb71], [fb75, fb75], [fb79, fb79],
    [fb7d, fb7d], [fb81, fb81], [fb91, fb91], [fb95, fb95], [fb99, fb99],
    [fb9d, fb9d], [fba3, fba3], [fba9, fba9], [fbad, fbad], [fbd6, fbd6],
    [fbe7, fbe7], [fbe9, fbe9], [fbff, fbff], [fcdf, fcf4], [fd34, fd3b],
    [fe71, fe71], [fe77, fe77], [fe79, fe79], [fe7b, fe7b], [fe7d, fe7d],
    [fe7f, fe7f], [fe8c, fe8c], [fe92, fe92], [fe98, fe98], [fe9c, fe9c],
    [fea0, fea0], [fea4, fea4], [fea8, fea8], [feb4, feb4], [feb8, feb8],
    [febc, febc], [fec0, fec0], [fec4, fec4], [fec8, fec8], [fecc, fecc],
    [fed0, fed0], [fed4, fed4], [fed8, fed8], [fedc, fedc], [fee0, fee0],
    [fee4, fee4], [fee8, fee8], [feec, feec], [fef4, fef4]**/


    namespace {
    const static UnicodeSet::run_t __med_Set_runs[] = {
    {Empty, 2010}, {Mixed, 6}, {Empty, 6}, {Mixed, 2}, {Empty, 1},
    {Mixed, 1}, {Empty, 9}, {Mixed, 5}, {Empty, 32776}};
    const static UnicodeSet::bitquad_t  __med_Set_quads[] = {
    0x22200000, 0x22222222, 0x22220002, 0x00002208, 0x00400000, 0x80000280,
    0x80000000, 0x001fffff, 0x0ff00000, 0xaa820000, 0x11041000, 0x11100111,
    0x11111111, 0x00101111};
    }

    const static UnicodeSet med_Set{const_cast<UnicodeSet::run_t *>(__med_Set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__med_Set_quads), 14, 0};

    /** Code Point Ranges for Fin
    [fb51, fb51], [fb53, fb53], [fb57, fb57], [fb5b, fb5b], [fb5f, fb5f],
    [fb63, fb63], [fb67, fb67], [fb6b, fb6b], [fb6f, fb6f], [fb73, fb73],
    [fb77, fb77], [fb7b, fb7b], [fb7f, fb7f], [fb83, fb83], [fb85, fb85],
    [fb87, fb87], [fb89, fb89], [fb8b, fb8b], [fb8d, fb8d], [fb8f, fb8f],
    [fb93, fb93], [fb97, fb97], [fb9b, fb9b], [fb9f, fb9f], [fba1, fba1],
    [fba5, fba5], [fba7, fba7], [fbab, fbab], [fbaf, fbaf], [fbb1, fbb1],
    [fbd4, fbd4], [fbd8, fbd8], [fbda, fbda], [fbdc, fbdc], [fbdf, fbdf],
    [fbe1, fbe1], [fbe3, fbe3], [fbe5, fbe5], [fbeb, fbeb], [fbed, fbed],
    [fbef, fbef], [fbf1, fbf1], [fbf3, fbf3], [fbf5, fbf5], [fbf7, fbf7],
    [fbfa, fbfa], [fbfd, fbfd], [fc64, fc96], [fd11, fd2c], [fd3c, fd3c],
    [fd51, fd51], [fd58, fd58], [fd5a, fd5b], [fd5e, fd5f], [fd62, fd62],
    [fd64, fd64], [fd66, fd67], [fd69, fd6a], [fd6c, fd6c], [fd6e, fd6f],
    [fd71, fd71], [fd74, fd76], [fd78, fd7c], [fd7e, fd82], [fd84, fd85],
    [fd87, fd87], [fd8b, fd8b], [fd96, fd97], [fd99, fd9c], [fd9e, fdb3],
    [fdb6, fdb7], [fdb9, fdb9], [fdbb, fdc2], [fdc6, fdc7], [fe82, fe82],
    [fe84, fe84], [fe86, fe86], [fe88, fe88], [fe8a, fe8a], [fe8e, fe8e],
    [fe90, fe90], [fe94, fe94], [fe96, fe96], [fe9a, fe9a], [fe9e, fe9e],
    [fea2, fea2], [fea6, fea6], [feaa, feaa], [feac, feac], [feae, feae],
    [feb0, feb0], [feb2, feb2], [feb6, feb6], [feba, feba], [febe, febe],
    [fec2, fec2], [fec6, fec6], [feca, feca], [fece, fece], [fed2, fed2],
    [fed6, fed6], [feda, feda], [fede, fede], [fee2, fee2], [fee6, fee6],
    [feea, feea], [feee, feee], [fef0, fef0], [fef2, fef2], [fef6, fef6],
    [fef8, fef8], [fefa, fefa], [fefc, fefc]**/


    namespace {
    const static UnicodeSet::run_t __fin_Set_runs[] = {
    {Empty, 2010}, {Mixed, 6}, {Empty, 3}, {Mixed, 2}, {Empty, 3},
    {Mixed, 7}, {Empty, 5}, {Mixed, 4}, {Empty, 32776}};
    const static UnicodeSet::bitquad_t  __fin_Set_quads[] = {
    0x888a0000, 0x88888888, 0x8888aaa8, 0x000288a2, 0x95100000, 0x24aaa82a,
    0xfffffff0, 0x007fffff, 0xfffe0000, 0x10001fff, 0xcd020000, 0xdf72d6d4,
    0xdec008b7, 0xfacfffff, 0x000000c7, 0x44514554, 0x44455444, 0x44444444,
    0x15454444};
    }

    const static UnicodeSet fin_Set{const_cast<UnicodeSet::run_t *>(__fin_Set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__fin_Set_quads), 19, 0};

    /** Code Point Ranges for Iso
    [fb50, fb50], [fb52, fb52], [fb56, fb56], [fb5a, fb5a], [fb5e, fb5e],
    [fb62, fb62], [fb66, fb66], [fb6a, fb6a], [fb6e, fb6e], [fb72, fb72],
    [fb76, fb76], [fb7a, fb7a], [fb7e, fb7e], [fb82, fb82], [fb84, fb84],
    [fb86, fb86], [fb88, fb88], [fb8a, fb8a], [fb8c, fb8c], [fb8e, fb8e],
    [fb92, fb92], [fb96, fb96], [fb9a, fb9a], [fb9e, fb9e], [fba0, fba0],
    [fba4, fba4], [fba6, fba6], [fbaa, fbaa], [fbae, fbae], [fbb0, fbb0],
    [fbd3, fbd3], [fbd7, fbd7], [fbd9, fbd9], [fbdb, fbdb], [fbdd, fbde],
    [fbe0, fbe0], [fbe2, fbe2], [fbe4, fbe4], [fbea, fbea], [fbec, fbec],
    [fbee, fbee], [fbf0, fbf0], [fbf2, fbf2], [fbf4, fbf4], [fbf6, fbf6],
    [fbf9, fbf9], [fbfc, fbfc], [fc00, fc63], [fcf5, fd10], [fd3d, fd3d],
    [fdf0, fdfc], [fe70, fe70], [fe72, fe72], [fe74, fe74], [fe76, fe76],
    [fe78, fe78], [fe7a, fe7a], [fe7c, fe7c], [fe7e, fe7e], [fe80, fe81],
    [fe83, fe83], [fe85, fe85], [fe87, fe87], [fe89, fe89], [fe8d, fe8d],
    [fe8f, fe8f], [fe93, fe93], [fe95, fe95], [fe99, fe99], [fe9d, fe9d],
    [fea1, fea1], [fea5, fea5], [fea9, fea9], [feab, feab], [fead, fead],
    [feaf, feaf], [feb1, feb1], [feb5, feb5], [feb9, feb9], [febd, febd],
    [fec1, fec1], [fec5, fec5], [fec9, fec9], [fecd, fecd], [fed1, fed1],
    [fed5, fed5], [fed9, fed9], [fedd, fedd], [fee1, fee1], [fee5, fee5],
    [fee9, fee9], [feed, feed], [feef, feef], [fef1, fef1], [fef5, fef5],
    [fef7, fef7], [fef9, fef9], [fefb, fefb]**/


    namespace {
    const static UnicodeSet::run_t __iso_Set_runs[] = {
    {Empty, 2010}, {Mixed, 6}, {Full, 3}, {Mixed, 1}, {Empty, 3},
    {Mixed, 3}, {Empty, 5}, {Mixed, 1}, {Empty, 3}, {Mixed, 5},
    {Empty, 32776}};
    const static UnicodeSet::bitquad_t  __iso_Set_quads[] = {
    0x44450000, 0x44444444, 0x44445554, 0x00014451, 0x6a880000, 0x12555415,
    0x0000000f, 0xffe00000, 0x0001ffff, 0x20000000, 0x1fff0000, 0x55550000,
    0x2228a2ab, 0x2222aa22, 0x22222222, 0x0aa2a222};
    }

    const static UnicodeSet iso_Set{const_cast<UnicodeSet::run_t *>(__iso_Set_runs), 11, 0, const_cast<UnicodeSet::bitquad_t *>(__iso_Set_quads), 16, 0};

    /** Code Point Ranges for Enc
    [2460, 2473], [24b6, 24ea], [3244, 3247], [3251, 327e], [3280, 32bf],
    [32d0, 32fe], [1f12b, 1f12e], [1f250, 1f251]**/


    namespace {
    const static UnicodeSet::run_t __enc_Set_runs[] = {
    {Empty, 291}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 1},
    {Empty, 106}, {Mixed, 2}, {Full, 2}, {Mixed, 2}, {Empty, 3569},
    {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 30829}};
    const static UnicodeSet::bitquad_t  __enc_Set_quads[] = {
    0x000fffff, 0xffc00000, 0x000007ff, 0xfffe00f0, 0x7fffffff, 0xffff0000,
    0x7fffffff, 0x00007800, 0x00030000};
    }

    const static UnicodeSet enc_Set{const_cast<UnicodeSet::run_t *>(__enc_Set_runs), 15, 0, const_cast<UnicodeSet::bitquad_t *>(__enc_Set_quads), 9, 0};

    /** Code Point Ranges for Sup
    [00aa, 00aa], [00b2, 00b3], [00b9, 00ba], [02b0, 02b8], [02e0, 02e4],
    [10fc, 10fc], [1d2c, 1d2e], [1d30, 1d3a], [1d3c, 1d4d], [1d4f, 1d61],
    [1d78, 1d78], [1d9b, 1dbf], [2070, 2071], [2074, 207f], [2120, 2120],
    [2122, 2122], [2c7d, 2c7d], [2d6f, 2d6f], [3192, 319f], [a69c, a69d],
    [a770, a770], [a7f8, a7f9], [ab5c, ab5f], [ab69, ab69], [1f16a, 1f16c]**/


    namespace {
    const static UnicodeSet::run_t __sup_Set_runs[] = {
    {Empty, 5}, {Mixed, 1}, {Empty, 15}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
    {Empty, 111}, {Mixed, 1}, {Empty, 97}, {Mixed, 4}, {Full, 1},
    {Empty, 21}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 89},
    {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 32}, {Mixed, 1},
    {Empty, 935}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 3},
    {Mixed, 1}, {Empty, 26}, {Mixed, 2}, {Empty, 2607}, {Mixed, 1},
    {Empty, 30836}};
    const static UnicodeSet::bitquad_t  __sup_Set_quads[] = {
    0x060c0400, 0x01ff0000, 0x0000001f, 0x10000000, 0xf7ff7000, 0xffffbfff,
    0x01000003, 0xf8000000, 0xfff30000, 0x00000005, 0x20000000, 0x00008000,
    0xfffc0000, 0x30000000, 0x00010000, 0x03000000, 0xf0000000, 0x00000200,
    0x00001c00};
    }

    const static UnicodeSet sup_Set{const_cast<UnicodeSet::run_t *>(__sup_Set_runs), 32, 0, const_cast<UnicodeSet::bitquad_t *>(__sup_Set_quads), 19, 0};

    /** Code Point Ranges for Sub
    [1d62, 1d6a], [2080, 208e], [2090, 209c], [2c7c, 2c7c]**/


    namespace {
    const static UnicodeSet::run_t __sub_Set_runs[] = {
    {Empty, 235}, {Mixed, 1}, {Empty, 24}, {Mixed, 1}, {Empty, 94},
    {Mixed, 1}, {Empty, 34460}};
    const static UnicodeSet::bitquad_t  __sub_Set_quads[] = {
    0x000007fc, 0x1fff7fff, 0x10000000};
    }

    const static UnicodeSet sub_Set{const_cast<UnicodeSet::run_t *>(__sub_Set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__sub_Set_quads), 3, 0};

    /** Code Point Ranges for Vert
    [309f, 309f], [30ff, 30ff], [fe10, fe19], [fe30, fe44], [fe47, fe48]**/


    namespace {
    const static UnicodeSet::run_t __vert_Set_runs[] = {
    {Empty, 388}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 1640},
    {Mixed, 3}, {Empty, 32781}};
    const static UnicodeSet::bitquad_t  __vert_Set_quads[] = {
    0x80000000, 0x80000000, 0x03ff0000, 0xffff0000, 0x0000019f};
    }

    const static UnicodeSet vert_Set{const_cast<UnicodeSet::run_t *>(__vert_Set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__vert_Set_quads), 5, 0};

    /** Code Point Ranges for Wide
    [3000, 3000], [ff01, ff60], [ffe0, ffe6]**/


    namespace {
    const static UnicodeSet::run_t __wide_Set_runs[] = {
    {Empty, 384}, {Mixed, 1}, {Empty, 1655}, {Mixed, 1}, {Full, 2},
    {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 32768}};
    const static UnicodeSet::bitquad_t  __wide_Set_quads[] = {
    0x00000001, 0xfffffffe, 0x00000001, 0x0000007f};
    }

    const static UnicodeSet wide_Set{const_cast<UnicodeSet::run_t *>(__wide_Set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__wide_Set_quads), 4, 0};

    /** Code Point Ranges for Nar
    [ff61, ffbe], [ffc2, ffc7], [ffca, ffcf], [ffd2, ffd7], [ffda, ffdc],
    [ffe8, ffee]**/


    namespace {
    const static UnicodeSet::run_t __nar_Set_runs[] = {
    {Empty, 2043}, {Mixed, 1}, {Full, 1}, {Mixed, 3}, {Empty, 32768}};
    const static UnicodeSet::bitquad_t  __nar_Set_quads[] = {
    0xfffffffe, 0x7fffffff, 0x1cfcfcfc, 0x00007f00};
    }

    const static UnicodeSet nar_Set{const_cast<UnicodeSet::run_t *>(__nar_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__nar_Set_quads), 4, 0};

    /** Code Point Ranges for Sml
    [fe50, fe52], [fe54, fe66], [fe68, fe6b]**/


    namespace {
    const static UnicodeSet::run_t __sml_Set_runs[] = {
    {Empty, 2034}, {Mixed, 2}, {Empty, 32780}};
    const static UnicodeSet::bitquad_t  __sml_Set_quads[] = {
    0xfff70000, 0x00000f7f};
    }

    const static UnicodeSet sml_Set{const_cast<UnicodeSet::run_t *>(__sml_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__sml_Set_quads), 2, 0};

    /** Code Point Ranges for Sqr
    [3250, 3250], [32cc, 32cf], [32ff, 3357], [3371, 33df], [33ff, 33ff],
    [1f130, 1f14f], [1f190, 1f190], [1f200, 1f202], [1f210, 1f23b]**/


    namespace {
    const static UnicodeSet::run_t __sqr_Set_runs[] = {
    {Empty, 402}, {Mixed, 1}, {Empty, 3}, {Mixed, 2}, {Full, 2}, {Mixed, 2},
    {Full, 3}, {Mixed, 1}, {Empty, 3561}, {Mixed, 2}, {Empty, 1},
    {Mixed, 1}, {Empty, 3}, {Mixed, 2}, {Empty, 30830}};
    const static UnicodeSet::bitquad_t  __sqr_Set_quads[] = {
    0x00010000, 0x0000f000, 0x80000000, 0x00ffffff, 0xfffe0000, 0x80000000,
    0xffff0000, 0x0000ffff, 0x00010000, 0xffff0007, 0x0fffffff};
    }

    const static UnicodeSet sqr_Set{const_cast<UnicodeSet::run_t *>(__sqr_Set_runs), 15, 0, const_cast<UnicodeSet::bitquad_t *>(__sqr_Set_quads), 11, 0};

    /** Code Point Ranges for Fra
    [00bc, 00be], [2150, 215f], [2189, 2189]**/


    namespace {
    const static UnicodeSet::run_t __fra_Set_runs[] = {
    {Empty, 5}, {Mixed, 1}, {Empty, 260}, {Mixed, 1}, {Empty, 1},
    {Mixed, 1}, {Empty, 34547}};
    const static UnicodeSet::bitquad_t  __fra_Set_quads[] = {
    0x70000000, 0xffff0000, 0x00000200};
    }

    const static UnicodeSet fra_Set{const_cast<UnicodeSet::run_t *>(__fra_Set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__fra_Set_quads), 3, 0};

    static EnumeratedPropertyObject property_object
        {dt,
        DT_ns::independent_prop_values,
        std::move(DT_ns::enum_names),
        std::move(DT_ns::value_names),
        std::move(DT_ns::aliases_only_map),{
        &none_Set, &can_Set, &com_Set, &font_Set, &nb_Set, &init_Set,
        &med_Set, &fin_Set, &iso_Set, &enc_Set, &sup_Set, &sub_Set,
        &vert_Set, &wide_Set, &nar_Set, &sml_Set, &sqr_Set, &fra_Set
        }};
    }
PropertyObject * get_DT_PropertyObject() {  return & DT_ns::property_object; }
}
