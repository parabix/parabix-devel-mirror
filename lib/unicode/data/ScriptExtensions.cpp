
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  ScriptExtensions
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
    namespace SCX_ns {
        /** Code Point Ranges for Zzzz
        [0378, 0379], [0380, 0383], [038b, 038b], [038d, 038d],
        [03a2, 03a2], [0530, 0530], [0557, 0558], [058b, 058c],
        [0590, 0590], [05c8, 05cf], [05eb, 05ee], [05f5, 05ff],
        [061d, 061d], [070e, 070e], [074b, 074c], [07b2, 07bf],
        [07fb, 07fc], [082e, 082f], [083f, 083f], [085c, 085d],
        [085f, 085f], [086b, 089f], [08b5, 08b5], [08c8, 08d2],
        [0984, 0984], [098d, 098e], [0991, 0992], [09a9, 09a9],
        [09b1, 09b1], [09b3, 09b5], [09ba, 09bb], [09c5, 09c6],
        [09c9, 09ca], [09cf, 09d6], [09d8, 09db], [09de, 09de],
        [09e4, 09e5], [09ff, 0a00], [0a04, 0a04], [0a0b, 0a0e],
        [0a11, 0a12], [0a29, 0a29], [0a31, 0a31], [0a34, 0a34],
        [0a37, 0a37], [0a3a, 0a3b], [0a3d, 0a3d], [0a43, 0a46],
        [0a49, 0a4a], [0a4e, 0a50], [0a52, 0a58], [0a5d, 0a5d],
        [0a5f, 0a65], [0a77, 0a80], [0a84, 0a84], [0a8e, 0a8e],
        [0a92, 0a92], [0aa9, 0aa9], [0ab1, 0ab1], [0ab4, 0ab4],
        [0aba, 0abb], [0ac6, 0ac6], [0aca, 0aca], [0ace, 0acf],
        [0ad1, 0adf], [0ae4, 0ae5], [0af2, 0af8], [0b00, 0b00],
        [0b04, 0b04], [0b0d, 0b0e], [0b11, 0b12], [0b29, 0b29],
        [0b31, 0b31], [0b34, 0b34], [0b3a, 0b3b], [0b45, 0b46],
        [0b49, 0b4a], [0b4e, 0b54], [0b58, 0b5b], [0b5e, 0b5e],
        [0b64, 0b65], [0b78, 0b81], [0b84, 0b84], [0b8b, 0b8d],
        [0b91, 0b91], [0b96, 0b98], [0b9b, 0b9b], [0b9d, 0b9d],
        [0ba0, 0ba2], [0ba5, 0ba7], [0bab, 0bad], [0bba, 0bbd],
        [0bc3, 0bc5], [0bc9, 0bc9], [0bce, 0bcf], [0bd1, 0bd6],
        [0bd8, 0be5], [0bfb, 0bff], [0c0d, 0c0d], [0c11, 0c11],
        [0c29, 0c29], [0c3a, 0c3c], [0c45, 0c45], [0c49, 0c49],
        [0c4e, 0c54], [0c57, 0c57], [0c5b, 0c5f], [0c64, 0c65],
        [0c70, 0c76], [0c8d, 0c8d], [0c91, 0c91], [0ca9, 0ca9],
        [0cb4, 0cb4], [0cba, 0cbb], [0cc5, 0cc5], [0cc9, 0cc9],
        [0cce, 0cd4], [0cd7, 0cdd], [0cdf, 0cdf], [0ce4, 0ce5],
        [0cf0, 0cf0], [0cf3, 0cff], [0d0d, 0d0d], [0d11, 0d11],
        [0d45, 0d45], [0d49, 0d49], [0d50, 0d53], [0d64, 0d65],
        [0d80, 0d80], [0d84, 0d84], [0d97, 0d99], [0db2, 0db2],
        [0dbc, 0dbc], [0dbe, 0dbf], [0dc7, 0dc9], [0dcb, 0dce],
        [0dd5, 0dd5], [0dd7, 0dd7], [0de0, 0de5], [0df0, 0df1],
        [0df5, 0e00], [0e3b, 0e3e], [0e5c, 0e80], [0e83, 0e83],
        [0e85, 0e85], [0e8b, 0e8b], [0ea4, 0ea4], [0ea6, 0ea6],
        [0ebe, 0ebf], [0ec5, 0ec5], [0ec7, 0ec7], [0ece, 0ecf],
        [0eda, 0edb], [0ee0, 0eff], [0f48, 0f48], [0f6d, 0f70],
        [0f98, 0f98], [0fbd, 0fbd], [0fcd, 0fcd], [0fdb, 0fff],
        [10c6, 10c6], [10c8, 10cc], [10ce, 10cf], [1249, 1249],
        [124e, 124f], [1257, 1257], [1259, 1259], [125e, 125f],
        [1289, 1289], [128e, 128f], [12b1, 12b1], [12b6, 12b7],
        [12bf, 12bf], [12c1, 12c1], [12c6, 12c7], [12d7, 12d7],
        [1311, 1311], [1316, 1317], [135b, 135c], [137d, 137f],
        [139a, 139f], [13f6, 13f7], [13fe, 13ff], [169d, 169f],
        [16f9, 16ff], [170d, 170d], [1715, 171f], [1737, 173f],
        [1754, 175f], [176d, 176d], [1771, 1771], [1774, 177f],
        [17de, 17df], [17ea, 17ef], [17fa, 17ff], [180f, 180f],
        [181a, 181f], [1879, 187f], [18ab, 18af], [18f6, 18ff],
        [191f, 191f], [192c, 192f], [193c, 193f], [1941, 1943],
        [196e, 196f], [1975, 197f], [19ac, 19af], [19ca, 19cf],
        [19db, 19dd], [1a1c, 1a1d], [1a5f, 1a5f], [1a7d, 1a7e],
        [1a8a, 1a8f], [1a9a, 1a9f], [1aae, 1aaf], [1ac1, 1aff],
        [1b4c, 1b4f], [1b7d, 1b7f], [1bf4, 1bfb], [1c38, 1c3a],
        [1c4a, 1c4c], [1c89, 1c8f], [1cbb, 1cbc], [1cc8, 1ccf],
        [1cfb, 1cff], [1dfa, 1dfa], [1f16, 1f17], [1f1e, 1f1f],
        [1f46, 1f47], [1f4e, 1f4f], [1f58, 1f58], [1f5a, 1f5a],
        [1f5c, 1f5c], [1f5e, 1f5e], [1f7e, 1f7f], [1fb5, 1fb5],
        [1fc5, 1fc5], [1fd4, 1fd5], [1fdc, 1fdc], [1ff0, 1ff1],
        [1ff5, 1ff5], [1fff, 1fff], [2065, 2065], [2072, 2073],
        [208f, 208f], [209d, 209f], [20c0, 20cf], [20f1, 20ff],
        [218c, 218f], [2427, 243f], [244b, 245f], [2b74, 2b75],
        [2b96, 2b96], [2c2f, 2c2f], [2c5f, 2c5f], [2cf4, 2cf8],
        [2d26, 2d26], [2d28, 2d2c], [2d2e, 2d2f], [2d68, 2d6e],
        [2d71, 2d7e], [2d97, 2d9f], [2da7, 2da7], [2daf, 2daf],
        [2db7, 2db7], [2dbf, 2dbf], [2dc7, 2dc7], [2dcf, 2dcf],
        [2dd7, 2dd7], [2ddf, 2ddf], [2e53, 2e7f], [2e9a, 2e9a],
        [2ef4, 2eff], [2fd6, 2fef], [2ffc, 2fff], [3040, 3040],
        [3097, 3098], [3100, 3104], [3130, 3130], [318f, 318f],
        [31e4, 31ef], [321f, 321f], [9ffd, 9fff], [a48d, a48f],
        [a4c7, a4cf], [a62c, a63f], [a6f8, a6ff], [a7c0, a7c1],
        [a7cb, a7f4], [a82d, a82f], [a83a, a83f], [a878, a87f],
        [a8c6, a8cd], [a8da, a8df], [a954, a95e], [a97d, a97f],
        [a9ce, a9ce], [a9da, a9dd], [a9ff, a9ff], [aa37, aa3f],
        [aa4e, aa4f], [aa5a, aa5b], [aac3, aada], [aaf7, ab00],
        [ab07, ab08], [ab0f, ab10], [ab17, ab1f], [ab27, ab27],
        [ab2f, ab2f], [ab6c, ab6f], [abee, abef], [abfa, abff],
        [d7a4, d7af], [d7c7, d7ca], [d7fc, f8ff], [fa6e, fa6f],
        [fada, faff], [fb07, fb12], [fb18, fb1c], [fb37, fb37],
        [fb3d, fb3d], [fb3f, fb3f], [fb42, fb42], [fb45, fb45],
        [fbc2, fbd2], [fd40, fd4f], [fd90, fd91], [fdc8, fdef],
        [fdfe, fdff], [fe1a, fe1f], [fe53, fe53], [fe67, fe67],
        [fe6c, fe6f], [fe75, fe75], [fefd, fefe], [ff00, ff00],
        [ffbf, ffc1], [ffc8, ffc9], [ffd0, ffd1], [ffd8, ffd9],
        [ffdd, ffdf], [ffe7, ffe7], [ffef, fff8], [fffe, ffff],
        [1000c, 1000c], [10027, 10027], [1003b, 1003b], [1003e, 1003e],
        [1004e, 1004f], [1005e, 1007f], [100fb, 100ff], [10103, 10106],
        [10134, 10136], [1018f, 1018f], [1019d, 1019f], [101a1, 101cf],
        [101fe, 1027f], [1029d, 1029f], [102d1, 102df], [102fc, 102ff],
        [10324, 1032c], [1034b, 1034f], [1037b, 1037f], [1039e, 1039e],
        [103c4, 103c7], [103d6, 103ff], [1049e, 1049f], [104aa, 104af],
        [104d4, 104d7], [104fc, 104ff], [10528, 1052f], [10564, 1056e],
        [10570, 105ff], [10737, 1073f], [10756, 1075f], [10768, 107ff],
        [10806, 10807], [10809, 10809], [10836, 10836], [10839, 1083b],
        [1083d, 1083e], [10856, 10856], [1089f, 108a6], [108b0, 108df],
        [108f3, 108f3], [108f6, 108fa], [1091c, 1091e], [1093a, 1093e],
        [10940, 1097f], [109b8, 109bb], [109d0, 109d1], [10a04, 10a04],
        [10a07, 10a0b], [10a14, 10a14], [10a18, 10a18], [10a36, 10a37],
        [10a3b, 10a3e], [10a49, 10a4f], [10a59, 10a5f], [10aa0, 10abf],
        [10ae7, 10aea], [10af7, 10aff], [10b36, 10b38], [10b56, 10b57],
        [10b73, 10b77], [10b92, 10b98], [10b9d, 10ba8], [10bb0, 10bff],
        [10c49, 10c7f], [10cb3, 10cbf], [10cf3, 10cf9], [10d28, 10d2f],
        [10d3a, 10e5f], [10e7f, 10e7f], [10eaa, 10eaa], [10eae, 10eaf],
        [10eb2, 10eff], [10f28, 10f2f], [10f5a, 10faf], [10fcc, 10fdf],
        [10ff7, 10fff], [1104e, 11051], [11070, 1107e], [110c2, 110cc],
        [110ce, 110cf], [110e9, 110ef], [110fa, 110ff], [11135, 11135],
        [11148, 1114f], [11177, 1117f], [111e0, 111e0], [111f5, 111ff],
        [11212, 11212], [1123f, 1127f], [11287, 11287], [11289, 11289],
        [1128e, 1128e], [1129e, 1129e], [112aa, 112af], [112eb, 112ef],
        [112fa, 112ff], [11304, 11304], [1130d, 1130e], [11311, 11312],
        [11329, 11329], [11331, 11331], [11334, 11334], [1133a, 1133a],
        [11345, 11346], [11349, 1134a], [1134e, 1134f], [11351, 11356],
        [11358, 1135c], [11364, 11365], [1136d, 1136f], [11375, 113ff],
        [1145c, 1145c], [11462, 1147f], [114c8, 114cf], [114da, 1157f],
        [115b6, 115b7], [115de, 115ff], [11645, 1164f], [1165a, 1165f],
        [1166d, 1167f], [116b9, 116bf], [116ca, 116ff], [1171b, 1171c],
        [1172c, 1172f], [11740, 117ff], [1183c, 1189f], [118f3, 118fe],
        [11907, 11908], [1190a, 1190b], [11914, 11914], [11917, 11917],
        [11936, 11936], [11939, 1193a], [11947, 1194f], [1195a, 1199f],
        [119a8, 119a9], [119d8, 119d9], [119e5, 119ff], [11a48, 11a4f],
        [11aa3, 11abf], [11af9, 11bff], [11c09, 11c09], [11c37, 11c37],
        [11c46, 11c4f], [11c6d, 11c6f], [11c90, 11c91], [11ca8, 11ca8],
        [11cb7, 11cff], [11d07, 11d07], [11d0a, 11d0a], [11d37, 11d39],
        [11d3b, 11d3b], [11d3e, 11d3e], [11d48, 11d4f], [11d5a, 11d5f],
        [11d66, 11d66], [11d69, 11d69], [11d8f, 11d8f], [11d92, 11d92],
        [11d99, 11d9f], [11daa, 11edf], [11ef9, 11faf], [11fb1, 11fbf],
        [11ff2, 11ffe], [1239a, 123ff], [1246f, 1246f], [12475, 1247f],
        [12544, 12fff], [1342f, 1342f], [13439, 143ff], [14647, 167ff],
        [16a39, 16a3f], [16a5f, 16a5f], [16a6a, 16a6d], [16a70, 16acf],
        [16aee, 16aef], [16af6, 16aff], [16b46, 16b4f], [16b5a, 16b5a],
        [16b62, 16b62], [16b78, 16b7c], [16b90, 16e3f], [16e9b, 16eff],
        [16f4b, 16f4e], [16f88, 16f8e], [16fa0, 16fdf], [16fe5, 16fef],
        [16ff2, 16fff], [187f8, 187ff], [18cd6, 18cff], [18d09, 1afff],
        [1b11f, 1b14f], [1b153, 1b163], [1b168, 1b16f], [1b2fc, 1bbff],
        [1bc6b, 1bc6f], [1bc7d, 1bc7f], [1bc89, 1bc8f], [1bc9a, 1bc9b],
        [1bca4, 1cfff], [1d0f6, 1d0ff], [1d127, 1d128], [1d1e9, 1d1ff],
        [1d246, 1d2df], [1d2f4, 1d2ff], [1d357, 1d35f], [1d379, 1d3ff],
        [1d455, 1d455], [1d49d, 1d49d], [1d4a0, 1d4a1], [1d4a3, 1d4a4],
        [1d4a7, 1d4a8], [1d4ad, 1d4ad], [1d4ba, 1d4ba], [1d4bc, 1d4bc],
        [1d4c4, 1d4c4], [1d506, 1d506], [1d50b, 1d50c], [1d515, 1d515],
        [1d51d, 1d51d], [1d53a, 1d53a], [1d53f, 1d53f], [1d545, 1d545],
        [1d547, 1d549], [1d551, 1d551], [1d6a6, 1d6a7], [1d7cc, 1d7cd],
        [1da8c, 1da9a], [1daa0, 1daa0], [1dab0, 1dfff], [1e007, 1e007],
        [1e019, 1e01a], [1e022, 1e022], [1e025, 1e025], [1e02b, 1e0ff],
        [1e12d, 1e12f], [1e13e, 1e13f], [1e14a, 1e14d], [1e150, 1e2bf],
        [1e2fa, 1e2fe], [1e300, 1e7ff], [1e8c5, 1e8c6], [1e8d7, 1e8ff],
        [1e94c, 1e94f], [1e95a, 1e95d], [1e960, 1ec70], [1ecb5, 1ed00],
        [1ed3e, 1edff], [1ee04, 1ee04], [1ee20, 1ee20], [1ee23, 1ee23],
        [1ee25, 1ee26], [1ee28, 1ee28], [1ee33, 1ee33], [1ee38, 1ee38],
        [1ee3a, 1ee3a], [1ee3c, 1ee41], [1ee43, 1ee46], [1ee48, 1ee48],
        [1ee4a, 1ee4a], [1ee4c, 1ee4c], [1ee50, 1ee50], [1ee53, 1ee53],
        [1ee55, 1ee56], [1ee58, 1ee58], [1ee5a, 1ee5a], [1ee5c, 1ee5c],
        [1ee5e, 1ee5e], [1ee60, 1ee60], [1ee63, 1ee63], [1ee65, 1ee66],
        [1ee6b, 1ee6b], [1ee73, 1ee73], [1ee78, 1ee78], [1ee7d, 1ee7d],
        [1ee7f, 1ee7f], [1ee8a, 1ee8a], [1ee9c, 1eea0], [1eea4, 1eea4],
        [1eeaa, 1eeaa], [1eebc, 1eeef], [1eef2, 1efff], [1f02c, 1f02f],
        [1f094, 1f09f], [1f0af, 1f0b0], [1f0c0, 1f0c0], [1f0d0, 1f0d0],
        [1f0f6, 1f0ff], [1f1ae, 1f1e5], [1f203, 1f20f], [1f23c, 1f23f],
        [1f249, 1f24f], [1f252, 1f25f], [1f266, 1f2ff], [1f6d8, 1f6df],
        [1f6ed, 1f6ef], [1f6fd, 1f6ff], [1f774, 1f77f], [1f7d9, 1f7df],
        [1f7ec, 1f7ff], [1f80c, 1f80f], [1f848, 1f84f], [1f85a, 1f85f],
        [1f888, 1f88f], [1f8ae, 1f8af], [1f8b2, 1f8ff], [1f979, 1f979],
        [1f9cc, 1f9cc], [1fa54, 1fa5f], [1fa6e, 1fa6f], [1fa75, 1fa77],
        [1fa7b, 1fa7f], [1fa87, 1fa8f], [1faa9, 1faaf], [1fab7, 1fabf],
        [1fac3, 1facf], [1fad7, 1faff], [1fb93, 1fb93], [1fbcb, 1fbef],
        [1fbfa, 1ffff], [2a6de, 2a6ff], [2b735, 2b73f], [2b81e, 2b81f],
        [2cea2, 2ceaf], [2ebe1, 2f7ff], [2fa1e, 2ffff], [3134b, e0000],
        [e0002, e001f], [e0080, e00ff], [e01f0, 10ffff]**/

        namespace {
        const static UnicodeSet::run_t __zzzz_Ext_runs[] = {
        {Empty, 27}, {Mixed, 3}, {Empty, 11}, {Mixed, 2}, {Empty, 1},
        {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 7}, {Mixed, 1},
        {Empty, 1}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Full, 1}, {Mixed, 2},
        {Empty, 5}, {Mixed, 29}, {Empty, 1}, {Mixed, 9}, {Full, 1},
        {Mixed, 3}, {Full, 1}, {Empty, 2}, {Mixed, 5}, {Full, 1},
        {Empty, 6}, {Mixed, 1}, {Empty, 11}, {Mixed, 1}, {Empty, 1},
        {Mixed, 3}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 3},
        {Empty, 2}, {Mixed, 1}, {Empty, 20}, {Mixed, 1}, {Empty, 2},
        {Mixed, 5}, {Empty, 2}, {Mixed, 3}, {Empty, 2}, {Mixed, 1},
        {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 5}, {Empty, 1},
        {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 5},
        {Full, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 3}, {Mixed, 1},
        {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 4}, {Empty, 7},
        {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 1}, {Mixed, 2},
        {Empty, 1}, {Mixed, 3}, {Empty, 3}, {Mixed, 2}, {Empty, 1},
        {Mixed, 2}, {Empty, 4}, {Mixed, 1}, {Empty, 20}, {Mixed, 2},
        {Empty, 56}, {Mixed, 2}, {Empty, 4}, {Mixed, 2}, {Empty, 4},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 4},
        {Empty, 3}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 6}, {Mixed, 2}, {Empty, 2}, {Mixed, 1},
        {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 2}, {Empty, 2},
        {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 878}, {Mixed, 1},
        {Empty, 36}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 10},
        {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 6}, {Mixed, 2},
        {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Empty, 3}, {Mixed, 2}, {Empty, 2}, {Mixed, 2},
        {Empty, 1}, {Mixed, 2}, {Empty, 3}, {Mixed, 4}, {Empty, 1},
        {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 349}, {Mixed, 3},
        {Full, 264}, {Empty, 11}, {Mixed, 1}, {Empty, 2}, {Mixed, 1},
        {Full, 1}, {Mixed, 3}, {Empty, 3}, {Mixed, 1}, {Empty, 11},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 3},
        {Empty, 1}, {Mixed, 2}, {Empty, 3}, {Mixed, 2}, {Empty, 4},
        {Mixed, 6}, {Full, 1}, {Empty, 3}, {Mixed, 3}, {Empty, 2},
        {Mixed, 4}, {Full, 4}, {Mixed, 1}, {Empty, 1}, {Mixed, 2},
        {Empty, 1}, {Mixed, 4}, {Empty, 1}, {Mixed, 1}, {Full, 1},
        {Empty, 4}, {Mixed, 4}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Full, 4}, {Empty, 9}, {Mixed, 3}, {Full, 4},
        {Mixed, 3}, {Empty, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 3},
        {Full, 2}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 3},
        {Empty, 2}, {Full, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
        {Mixed, 5}, {Full, 2}, {Empty, 2}, {Mixed, 1}, {Full, 1},
        {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Full, 9}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Full, 2}, {Empty, 1}, {Mixed, 2}, {Full, 2}, {Mixed, 3},
        {Empty, 2}, {Mixed, 2}, {Empty, 2}, {Mixed, 2}, {Empty, 1},
        {Mixed, 3}, {Empty, 3}, {Mixed, 3}, {Full, 2}, {Mixed, 2},
        {Empty, 1}, {Mixed, 5}, {Full, 4}, {Empty, 2}, {Mixed, 2},
        {Empty, 2}, {Mixed, 1}, {Full, 5}, {Empty, 1}, {Mixed, 2},
        {Full, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 1}, {Mixed, 2},
        {Full, 1}, {Mixed, 2}, {Full, 6}, {Empty, 1}, {Mixed, 1}, {Full, 3},
        {Empty, 2}, {Mixed, 4}, {Full, 2}, {Mixed, 3}, {Empty, 2},
        {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Full, 8}, {Mixed, 6}, {Full, 2}, {Mixed, 6}, {Full, 9}, {Mixed, 1},
        {Full, 5}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 28},
        {Mixed, 1}, {Full, 3}, {Empty, 3}, {Mixed, 1}, {Empty, 6},
        {Mixed, 1}, {Full, 85}, {Empty, 33}, {Mixed, 1}, {Full, 126},
        {Empty, 18}, {Mixed, 1}, {Full, 269}, {Empty, 17}, {Mixed, 3},
        {Full, 2}, {Mixed, 2}, {Empty, 2}, {Mixed, 3}, {Full, 21},
        {Empty, 2}, {Mixed, 1}, {Full, 3}, {Empty, 2}, {Mixed, 1},
        {Empty, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Empty, 191},
        {Mixed, 1}, {Empty, 38}, {Mixed, 1}, {Full, 1}, {Mixed, 1},
        {Full, 279}, {Empty, 8}, {Mixed, 1}, {Full, 1}, {Mixed, 2},
        {Empty, 11}, {Mixed, 1}, {Full, 72}, {Empty, 3}, {Mixed, 3},
        {Full, 154}, {Empty, 7}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 5}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Full, 4},
        {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Full, 4}, {Empty, 2},
        {Mixed, 1}, {Empty, 1}, {Mixed, 3}, {Empty, 1}, {Mixed, 3},
        {Empty, 10}, {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 21},
        {Mixed, 2}, {Full, 42}, {Mixed, 2}, {Full, 6}, {Empty, 1},
        {Mixed, 2}, {Full, 11}, {Empty, 1}, {Mixed, 1}, {Full, 40},
        {Empty, 6}, {Mixed, 1}, {Full, 1}, {Empty, 2}, {Mixed, 1},
        {Full, 24}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Full, 2},
        {Mixed, 2}, {Full, 6}, {Mixed, 6}, {Full, 1}, {Mixed, 1}, {Full, 8},
        {Empty, 1}, {Mixed, 1}, {Empty, 2}, {Mixed, 4}, {Empty, 5},
        {Mixed, 1}, {Full, 1}, {Mixed, 5}, {Full, 4}, {Empty, 30},
        {Mixed, 2}, {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 3},
        {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Full, 2},
        {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 3},
        {Mixed, 5}, {Full, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 1},
        {Mixed, 2}, {Full, 32}, {Empty, 1334}, {Mixed, 1}, {Full, 1},
        {Empty, 129}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 180},
        {Mixed, 1}, {Empty, 233}, {Mixed, 1}, {Full, 96}, {Empty, 16},
        {Mixed, 1}, {Full, 47}, {Empty, 154}, {Mixed, 1}, {Full, 22373},
        {Mixed, 1}, {Empty, 3}, {Full, 4}, {Empty, 7}, {Mixed, 1},
        {Full, 6128}};
        const static UnicodeSet::bitquad_t  __zzzz_Ext_quads[] = {
        0x03000000, 0x0000280f, 0x00000004, 0x00010000, 0x01800000,
        0x00011800, 0x0000ff00, 0xffe07800, 0x20000000, 0x00004000,
        0x00001800, 0xfffc0000, 0x18000000, 0x8000c000, 0xb0000000,
        0xfffff800, 0x00200000, 0x0007ff00, 0x00066010, 0x0c3a0200,
        0x4f7f8660, 0x80000030, 0x00067811, 0x2c920200, 0xa1fdc678,
        0xff80003f, 0x00044011, 0x0c120200, 0xfffec440, 0x01fc0030,
        0x00066011, 0x0c120200, 0x4f1fc660, 0xff000030, 0x29c23813,
        0x3c0038e7, 0xff7ec238, 0xf800003f, 0x00022000, 0x1c000200,
        0xf89fc220, 0x007f0030, 0x00022000, 0x0c100200, 0xbf9fc220,
        0xfff90030, 0x00022000, 0x000f0220, 0x00000030, 0x03800011,
        0xd0040000, 0x00a07b80, 0xffe3003f, 0x00000001, 0x78000000,
        0xf0000000, 0x00000829, 0xc0000050, 0x0c00c0a0, 0x00000100,
        0x0001e000, 0x01000000, 0x20000000, 0xf8002000, 0x0000df40,
        0xc280c200, 0x0000c200, 0x80c20000, 0x008000c2, 0x00c20000,
        0x18000000, 0xe0000000, 0xfc000000, 0xc0c00000, 0xe0000000,
        0xfe000000, 0xffe02000, 0xff800000, 0xfff00000, 0xfff22000,
        0xc0000000, 0xfc00fc00, 0xfc008000, 0xfe000000, 0x0000f800,
        0xffc00000, 0x80000000, 0xf000f000, 0x0000000e, 0xffe0c000,
        0x0000f000, 0x3800fc00, 0x30000000, 0x80000000, 0x60000000,
        0xfc00fc00, 0x0000c000, 0xfffffffe, 0x0000f000, 0xe0000000,
        0x0ff00000, 0x07000000, 0x00001c00, 0x0000fe00, 0x18000000,
        0x0000ff00, 0xf8000000, 0x04000000, 0xc0c00000, 0x5500c0c0,
        0xc0000000, 0x00200000, 0x10300020, 0x80230000, 0x000c0020,
        0xe0008000, 0x0000ffff, 0xfffe0000, 0x0000f000, 0xffffff80,
        0xfffff800, 0x00300000, 0x00400000, 0x00008000, 0x80000000,
        0x01f00000, 0x0000df40, 0x7ffe7f00, 0xff800000, 0x80808080,
        0x80808080, 0xfff80000, 0x04000000, 0xfff00000, 0xffc00000,
        0xf000ffff, 0x00000001, 0x01800000, 0x0000001f, 0x00010000,
        0x00008000, 0x0000fff0, 0x80000000, 0xe0000000, 0x0000e000,
        0x0000ff80, 0xfffff000, 0xff000000, 0xfffff803, 0x001fffff,
        0xfc00e000, 0xff000000, 0xfc003fc0, 0x7ff00000, 0xe0000000,
        0x3c004000, 0x80000000, 0xff800000, 0x0c00c000, 0x07fffff8,
        0xff800000, 0xff818181, 0x00008080, 0x0000f000, 0xfc00c000,
        0x0000fff0, 0x00000780, 0xf0000000, 0x0000c000, 0xfc000000,
        0x1f07ff80, 0xa0800000, 0x00000024, 0x0007fffc, 0x0000ffff,
        0x00030000, 0xffffff00, 0xc000ffff, 0xfc000000, 0x00080000,
        0x0020f080, 0x60000000, 0x00000001, 0x80000000, 0xe3030303,
        0xc1ff8080, 0x00001000, 0x48000080, 0xc000c000, 0xf8000000,
        0x00000078, 0x00700000, 0xe0008000, 0xfffffffe, 0x0000ffff,
        0xc0000000, 0xe0000000, 0xfffe0000, 0xf0000000, 0x00001ff0,
        0x0000f800, 0xf8000000, 0x40000000, 0xffc000f0, 0xc0000000,
        0x0000fc00, 0x00f00000, 0xf0000000, 0x0000ff00, 0xffff7ff0,
        0xff800000, 0xffc00000, 0xffffff00, 0x000002c0, 0x6e400000,
        0x00400000, 0x80000000, 0xffff007f, 0x07c80000, 0x70000000,
        0x7c000000, 0x0f000000, 0x00030000, 0x01100f90, 0x78c00000,
        0xfe00fe00, 0xff800780, 0x01c00000, 0x00c00000, 0x00f80000,
        0xe1fc0000, 0xffff01ff, 0xfffffe00, 0xfff80000, 0x03f80000,
        0xfc00ff00, 0x80000000, 0xfffcc400, 0x0000ff00, 0xfc000000,
        0x0000ffff, 0xfffff000, 0xff800000, 0x0003c000, 0x7fff0000,
        0x0000dffc, 0xfc00fe00, 0x00200000, 0x0000ff00, 0xff800000,
        0xffe00001, 0x00040000, 0x80000000, 0x40004280, 0x0000fc00,
        0xfc00f800, 0x00066010, 0x04120200, 0x1f7ec660, 0xffe0e030,
        0x10000000, 0xfffffffc, 0xfc00ff00, 0x00c00000, 0xc0000000,
        0xfc00ffe0, 0xffffe000, 0xfe000000, 0xfffffc00, 0x18000000,
        0x0000f000, 0xf0000000, 0x7ff80000, 0x00900d80, 0x06400000,
        0xfc00ff80, 0x00000300, 0x03000000, 0xffffffe0, 0x0000ff00,
        0xfffffff8, 0xfe000000, 0x00000200, 0x00800000, 0x0000ffc0,
        0x0000e000, 0x00030000, 0xff800100, 0x00000480, 0x4b800000,
        0xfc00ff00, 0x00000240, 0xfe048000, 0xfffffc00, 0xfe000000,
        0xfffeffff, 0x7ffc0000, 0xfc000000, 0xffe08000, 0xfffffff0,
        0xfe008000, 0xffffff80, 0xfe000000, 0x80000000, 0xffff3c00,
        0x0000ffff, 0xffc0c000, 0x0400ffc0, 0x1f000004, 0xffff0000,
        0xf8000000, 0x00007800, 0x00007f00, 0xfffcffe0, 0xff000000,
        0xffc00000, 0xfffffe00, 0x80000000, 0xfff8ffff, 0x0000ff0f,
        0xf0000000, 0xe000f800, 0x0c00fe00, 0xfffffff0, 0xffc00000,
        0x00000180, 0xfffffe00, 0xffffffc0, 0xfff00000, 0xff800000,
        0xfe000000, 0x00200000, 0x20000000, 0x1400219b, 0x00000010,
        0x20201840, 0x84000000, 0x000203a0, 0x000000c0, 0x00003000,
        0x07fff000, 0xffff0001, 0x06000080, 0xfffff824, 0xc000e000,
        0xffff3c00, 0x7c000000, 0xff800060, 0x3c00f000, 0x0001ffff,
        0xffe00000, 0x00000001, 0xc0000000, 0x00000010, 0xf5080169,
        0x5569157b, 0xa1080869, 0xf0000400, 0xf0000411, 0xfffcffff,
        0x0000f000, 0xfff00000, 0x00018000, 0x00010001, 0xffc00000,
        0xffffc000, 0x0000003f, 0x0000fff8, 0xf0000000, 0xfffcfe00,
        0xffffffc0, 0xff000000, 0xe000e000, 0xfff00000, 0xfe000000,
        0xfffff000, 0x0000f000, 0xfc00ff00, 0x0000ff00, 0xfffcc000,
        0x02000000, 0x00001000, 0xfff00000, 0xf8e0c000, 0x0000ff80,
        0xff80fe00, 0xff80fff8, 0x00080000, 0xfffff800, 0xfc00ffff,
        0xc0000000, 0xffe00000, 0xc0000000, 0x0000fffc, 0xfffffffe,
        0xc0000000, 0xfffff800, 0xfffffffd, 0xffff0000};
        }

        const static UnicodeSet zzzz_Ext{const_cast<UnicodeSet::run_t *>(__zzzz_Ext_runs), 429, 0, const_cast<UnicodeSet::bitquad_t *>(__zzzz_Ext_quads), 399, 0};

        /** Code Point Ranges for Zyyy
        [0000, 0040], [005b, 0060], [007b, 00a9], [00ab, 00b9],
        [00bb, 00bf], [00d7, 00d7], [00f7, 00f7], [02b9, 02df],
        [02e5, 02e9], [02ec, 02ff], [0374, 0374], [037e, 037e],
        [0385, 0385], [0387, 0387], [0605, 0605], [06dd, 06dd],
        [08e2, 08e2], [0e3f, 0e3f], [0fd5, 0fd8], [16eb, 16ed],
        [2000, 200b], [200e, 202e], [2030, 2064], [2066, 2070],
        [2074, 207e], [2080, 208e], [20a0, 20bf], [2100, 2125],
        [2127, 2129], [212c, 2131], [2133, 214d], [214f, 215f],
        [2189, 218b], [2190, 2426], [2440, 244a], [2460, 27ff],
        [2900, 2b73], [2b76, 2b95], [2b97, 2bff], [2e00, 2e42],
        [2e44, 2e52], [2ff0, 2ffb], [3000, 3000], [3004, 3004],
        [3012, 3012], [3020, 3020], [3036, 3036], [3248, 325f],
        [327f, 327f], [32b1, 32bf], [32cc, 32cf], [3371, 337a],
        [3380, 33df], [33ff, 33ff], [4dc0, 4dff], [a708, a721],
        [a788, a78a], [ab5b, ab5b], [ab6a, ab6b], [fd3e, fd3f],
        [fe10, fe19], [fe30, fe44], [fe47, fe52], [fe54, fe66],
        [fe68, fe6b], [feff, feff], [ff01, ff20], [ff3b, ff40],
        [ff5b, ff60], [ffe0, ffe6], [ffe8, ffee], [fff9, fffd],
        [10190, 1019c], [101d0, 101fc], [16fe2, 16fe3], [1d000, 1d0f5],
        [1d100, 1d126], [1d129, 1d166], [1d16a, 1d17a], [1d183, 1d184],
        [1d18c, 1d1a9], [1d1ae, 1d1e8], [1d2e0, 1d2f3], [1d300, 1d356],
        [1d372, 1d378], [1d400, 1d454], [1d456, 1d49c], [1d49e, 1d49f],
        [1d4a2, 1d4a2], [1d4a5, 1d4a6], [1d4a9, 1d4ac], [1d4ae, 1d4b9],
        [1d4bb, 1d4bb], [1d4bd, 1d4c3], [1d4c5, 1d505], [1d507, 1d50a],
        [1d50d, 1d514], [1d516, 1d51c], [1d51e, 1d539], [1d53b, 1d53e],
        [1d540, 1d544], [1d546, 1d546], [1d54a, 1d550], [1d552, 1d6a5],
        [1d6a8, 1d7cb], [1d7ce, 1d7ff], [1ec71, 1ecb4], [1ed01, 1ed3d],
        [1f000, 1f02b], [1f030, 1f093], [1f0a0, 1f0ae], [1f0b1, 1f0bf],
        [1f0c1, 1f0cf], [1f0d1, 1f0f5], [1f100, 1f1ad], [1f1e6, 1f1ff],
        [1f201, 1f202], [1f210, 1f23b], [1f240, 1f248], [1f260, 1f265],
        [1f300, 1f6d7], [1f6e0, 1f6ec], [1f6f0, 1f6fc], [1f700, 1f773],
        [1f780, 1f7d8], [1f7e0, 1f7eb], [1f800, 1f80b], [1f810, 1f847],
        [1f850, 1f859], [1f860, 1f887], [1f890, 1f8ad], [1f8b0, 1f8b1],
        [1f900, 1f978], [1f97a, 1f9cb], [1f9cd, 1fa53], [1fa60, 1fa6d],
        [1fa70, 1fa74], [1fa78, 1fa7a], [1fa80, 1fa86], [1fa90, 1faa8],
        [1fab0, 1fab6], [1fac0, 1fac2], [1fad0, 1fad6], [1fb00, 1fb92],
        [1fb94, 1fbca], [1fbf0, 1fbf9], [e0001, e0001], [e0020, e007f]**/

        namespace {
        const static UnicodeSet::run_t __zyyy_Ext_runs[] = {
        {Full, 2}, {Mixed, 2}, {Full, 1}, {Mixed, 3}, {Empty, 13},
        {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 2},
        {Empty, 19}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 16},
        {Mixed, 1}, {Empty, 41}, {Mixed, 1}, {Empty, 12}, {Mixed, 1},
        {Empty, 56}, {Mixed, 1}, {Empty, 72}, {Mixed, 2}, {Full, 1},
        {Mixed, 2}, {Full, 1}, {Empty, 2}, {Full, 1}, {Mixed, 2},
        {Empty, 1}, {Mixed, 1}, {Full, 20}, {Mixed, 2}, {Full, 29},
        {Empty, 8}, {Full, 19}, {Mixed, 2}, {Full, 3}, {Empty, 16},
        {Full, 2}, {Mixed, 1}, {Empty, 12}, {Mixed, 3}, {Empty, 16},
        {Mixed, 2}, {Empty, 1}, {Mixed, 2}, {Empty, 4}, {Mixed, 1},
        {Full, 3}, {Mixed, 1}, {Empty, 206}, {Full, 2}, {Empty, 712},
        {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Empty, 29}, {Mixed, 2},
        {Empty, 653}, {Mixed, 1}, {Empty, 6}, {Mixed, 4}, {Empty, 3},
        {Mixed, 5}, {Empty, 3}, {Mixed, 1}, {Empty, 12}, {Mixed, 1},
        {Empty, 1}, {Mixed, 2}, {Empty, 879}, {Mixed, 1}, {Empty, 768},
        {Full, 7}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 3},
        {Full, 1}, {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Full, 2},
        {Mixed, 2}, {Empty, 4}, {Full, 2}, {Mixed, 1}, {Full, 1},
        {Mixed, 3}, {Full, 1}, {Mixed, 3}, {Full, 10}, {Mixed, 1},
        {Full, 8}, {Mixed, 1}, {Full, 1}, {Empty, 163}, {Mixed, 1},
        {Full, 1}, {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 22},
        {Full, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 4}, {Full, 5}, {Mixed, 1},
        {Empty, 1}, {Mixed, 5}, {Empty, 4}, {Full, 30}, {Mixed, 2},
        {Full, 3}, {Mixed, 1}, {Full, 2}, {Mixed, 3}, {Full, 1}, {Mixed, 1},
        {Full, 1}, {Mixed, 2}, {Empty, 2}, {Full, 3}, {Mixed, 1}, {Full, 2},
        {Mixed, 1}, {Full, 3}, {Mixed, 5}, {Empty, 1}, {Full, 4},
        {Mixed, 1}, {Full, 1}, {Mixed, 2}, {Empty, 24608}, {Mixed, 1},
        {Full, 3}, {Empty, 6140}};
        const static UnicodeSet::bitquad_t  __zyyy_Ext_quads[] = {
        0xf8000001, 0xf8000001, 0xfbfffbff, 0x00800000, 0x00800000,
        0xfe000000, 0xfffff3e0, 0x40100000, 0x000000a0, 0x00000020,
        0x20000000, 0x00000004, 0x80000000, 0x01e00000, 0x00003800,
        0xffffcfff, 0xffff7fff, 0x7ff1ffdf, 0x00007fff, 0xfffbf3bf,
        0xffffbfff, 0xffff0e00, 0x0000007f, 0x000007ff, 0xffcfffff,
        0xffbfffff, 0x0007fff7, 0x0fff0000, 0x00040011, 0x00400001,
        0xffffff00, 0x80000000, 0xfffe0000, 0x0000f000, 0x07fe0000,
        0x80000000, 0xffffff00, 0x00000003, 0x00000700, 0x08000000,
        0x00000c00, 0xc0000000, 0x03ff0000, 0xffff0000, 0xfff7ff9f,
        0x00000f7f, 0x80000000, 0xfffffffe, 0xf8000001, 0xf8000001,
        0x00000001, 0x3e007f7f, 0x1fff0000, 0xffff0000, 0x1fffffff,
        0x0000000c, 0x003fffff, 0xfffffe7f, 0x07fffc7f, 0xfffff018,
        0xffffc3ff, 0x000001ff, 0x000fffff, 0x007fffff, 0x01fc0000,
        0xffdfffff, 0xdfffffff, 0xebffde64, 0xffffffef, 0xdfdfe7bf,
        0x7bffffff, 0xfffdfc5f, 0xffffff3f, 0xffffcfff, 0xfffe0000,
        0x001fffff, 0xfffffffe, 0x3fffffff, 0xffff0fff, 0x000fffff,
        0xfffe7fff, 0xfffefffe, 0x003fffff, 0x00003fff, 0xffffffc0,
        0xffff0006, 0x0fffffff, 0x000001ff, 0x0000003f, 0x00ffffff,
        0x1fff1fff, 0x000fffff, 0x01ffffff, 0x00000fff, 0xffff0fff,
        0x03ff00ff, 0xffff00ff, 0x00033fff, 0xfdffffff, 0xffffefff,
        0x000fffff, 0x071f3fff, 0xffff007f, 0x007f01ff, 0x007f0007,
        0xfff7ffff, 0x000007ff, 0x03ff0000, 0x00000002};
        }

        const static UnicodeSet zyyy_Ext{const_cast<UnicodeSet::run_t *>(__zyyy_Ext_runs), 141, 0, const_cast<UnicodeSet::bitquad_t *>(__zyyy_Ext_quads), 109, 0};

        /** Code Point Ranges for Latn
        [0041, 005a], [0061, 007a], [00aa, 00aa], [00ba, 00ba],
        [00c0, 00d6], [00d8, 00f6], [00f8, 02b8], [02e0, 02e4],
        [0363, 036f], [0485, 0486], [0951, 0952], [10fb, 10fb],
        [1d00, 1d25], [1d2c, 1d5c], [1d62, 1d65], [1d6b, 1d77],
        [1d79, 1dbe], [1e00, 1eff], [202f, 202f], [2071, 2071],
        [207f, 207f], [2090, 209c], [20f0, 20f0], [212a, 212b],
        [2132, 2132], [214e, 214e], [2160, 2188], [2c60, 2c7f],
        [a700, a707], [a722, a787], [a78b, a7bf], [a7c2, a7ca],
        [a7f5, a7ff], [a92e, a92e], [ab30, ab5a], [ab5c, ab64],
        [ab66, ab69], [fb00, fb06], [ff21, ff3a], [ff41, ff5a]**/

        namespace {
        const static UnicodeSet::run_t __latn_Ext_runs[] = {
        {Empty, 2}, {Mixed, 2}, {Empty, 1}, {Mixed, 3}, {Full, 13},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
        {Empty, 8}, {Mixed, 1}, {Empty, 37}, {Mixed, 1}, {Empty, 60},
        {Mixed, 1}, {Empty, 96}, {Full, 1}, {Mixed, 3}, {Full, 1},
        {Mixed, 1}, {Empty, 2}, {Full, 8}, {Empty, 9}, {Mixed, 1},
        {Empty, 1}, {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Empty, 1},
        {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Empty, 86}, {Full, 1},
        {Empty, 980}, {Mixed, 2}, {Full, 2}, {Mixed, 1}, {Full, 1},
        {Mixed, 2}, {Empty, 9}, {Mixed, 1}, {Empty, 15}, {Mixed, 3},
        {Empty, 636}, {Mixed, 1}, {Empty, 32}, {Mixed, 2}, {Empty, 32773}};
        const static UnicodeSet::bitquad_t  __latn_Ext_quads[] = {
        0x07fffffe, 0x07fffffe, 0x04000400, 0xff7fffff, 0xff7fffff,
        0x01ffffff, 0x0000001f, 0x0000fff8, 0x00000060, 0x00060000,
        0x08000000, 0xfffff03f, 0x1fffffff, 0xfefff83c, 0x7fffffff,
        0x00008000, 0x80020000, 0x1fff0000, 0x00010000, 0x00040c00,
        0x00004000, 0x000001ff, 0x000000ff, 0xfffffffc, 0xfffff8ff,
        0x000007fc, 0xffe00000, 0x00004000, 0xffff0000, 0xf7ffffff,
        0x000003df, 0x0000007f, 0x07fffffe, 0x07fffffe};
        }

        const static UnicodeSet latn_Ext{const_cast<UnicodeSet::run_t *>(__latn_Ext_runs), 50, 0, const_cast<UnicodeSet::bitquad_t *>(__latn_Ext_quads), 34, 0};

        /** Code Point Ranges for Grek
        [0342, 0342], [0345, 0345], [0370, 0373], [0375, 0377],
        [037a, 037d], [037f, 037f], [0384, 0384], [0386, 0386],
        [0388, 038a], [038c, 038c], [038e, 03a1], [03a3, 03e1],
        [03f0, 03ff], [1d26, 1d2a], [1d5d, 1d61], [1d66, 1d6a],
        [1dbf, 1dc1], [1f00, 1f15], [1f18, 1f1d], [1f20, 1f45],
        [1f48, 1f4d], [1f50, 1f57], [1f59, 1f59], [1f5b, 1f5b],
        [1f5d, 1f5d], [1f5f, 1f7d], [1f80, 1fb4], [1fb6, 1fc4],
        [1fc6, 1fd3], [1fd6, 1fdb], [1fdd, 1fef], [1ff2, 1ff4],
        [1ff6, 1ffe], [2126, 2126], [ab65, ab65], [10140, 1018e],
        [101a0, 101a0], [1d200, 1d245]**/

        namespace {
        const static UnicodeSet::run_t __grek_Ext_runs[] = {
        {Empty, 26}, {Mixed, 4}, {Full, 1}, {Mixed, 1}, {Empty, 201},
        {Mixed, 3}, {Empty, 1}, {Mixed, 2}, {Empty, 9}, {Mixed, 1},
        {Full, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 3}, {Empty, 9},
        {Mixed, 1}, {Empty, 1105}, {Mixed, 1}, {Empty, 686}, {Full, 2},
        {Mixed, 2}, {Empty, 1666}, {Full, 2}, {Mixed, 1}, {Empty, 31085}};
        const static UnicodeSet::bitquad_t  __grek_Ext_quads[] = {
        0x00000024, 0xbcef0000, 0xffffd750, 0xfffffffb, 0xffff0003,
        0x000007c0, 0xe0000000, 0x000007c3, 0x80000000, 0x00000003,
        0x3f3fffff, 0xaaff3f3f, 0x3fffffff, 0xffdfffff, 0xefcfffdf,
        0x7fdcffff, 0x00000040, 0x00000020, 0x00007fff, 0x00000001,
        0x0000003f};
        }

        const static UnicodeSet grek_Ext{const_cast<UnicodeSet::run_t *>(__grek_Ext_runs), 25, 0, const_cast<UnicodeSet::bitquad_t *>(__grek_Ext_quads), 21, 0};

        /** Code Point Ranges for Cyrl
        [0400, 052f], [1c80, 1c88], [1d2b, 1d2b], [1d78, 1d78],
        [1df8, 1df8], [2de0, 2dff], [2e43, 2e43], [a640, a69f],
        [fe2e, fe2f]**/

        namespace {
        const static UnicodeSet::run_t __cyrl_Ext_runs[] = {
        {Empty, 32}, {Full, 9}, {Mixed, 1}, {Empty, 186}, {Mixed, 1},
        {Empty, 4}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 127}, {Full, 1}, {Empty, 2}, {Mixed, 1},
        {Empty, 959}, {Full, 3}, {Empty, 700}, {Mixed, 1}, {Empty, 32782}};
        const static UnicodeSet::bitquad_t  __cyrl_Ext_quads[] = {
        0x0000ffff, 0x000001ff, 0x00000800, 0x01000000, 0x01000000,
        0x00000008, 0x0000c000};
        }

        const static UnicodeSet cyrl_Ext{const_cast<UnicodeSet::run_t *>(__cyrl_Ext_runs), 20, 0, const_cast<UnicodeSet::bitquad_t *>(__cyrl_Ext_quads), 7, 0};

        /** Code Point Ranges for Armn
        [0531, 0556], [0559, 058a], [058d, 058f], [fb13, fb17]**/

        namespace {
        const static UnicodeSet::run_t __armn_Ext_runs[] = {
        {Empty, 41}, {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Empty, 1963},
        {Mixed, 1}, {Empty, 32807}};
        const static UnicodeSet::bitquad_t  __armn_Ext_quads[] = {
        0xfffe0000, 0xfe7fffff, 0x0000e7ff, 0x00f80000};
        }

        const static UnicodeSet armn_Ext{const_cast<UnicodeSet::run_t *>(__armn_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__armn_Ext_quads), 4, 0};

        /** Code Point Ranges for Hebr
        [0591, 05c7], [05d0, 05ea], [05ef, 05f4], [fb1d, fb36],
        [fb38, fb3c], [fb3e, fb3e], [fb40, fb41], [fb43, fb44],
        [fb46, fb4f]**/

        namespace {
        const static UnicodeSet::run_t __hebr_Ext_runs[] = {
        {Empty, 44}, {Mixed, 1}, {Full, 1}, {Mixed, 2}, {Empty, 1960},
        {Mixed, 3}, {Empty, 32805}};
        const static UnicodeSet::bitquad_t  __hebr_Ext_quads[] = {
        0xfffe0000, 0xffff00ff, 0x001f87ff, 0xe0000000, 0x5f7fffff,
        0x0000ffdb};
        }

        const static UnicodeSet hebr_Ext{const_cast<UnicodeSet::run_t *>(__hebr_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__hebr_Ext_quads), 6, 0};

        /** Code Point Ranges for Arab
        [0600, 0604], [0606, 061c], [061e, 06dc], [06de, 06ff],
        [0750, 077f], [08a0, 08b4], [08b6, 08c7], [08d3, 08e1],
        [08e3, 08ff], [fb50, fbc1], [fbd3, fd3d], [fd50, fd8f],
        [fd92, fdc7], [fdf0, fdfd], [fe70, fe74], [fe76, fefc],
        [102e0, 102fb], [10e60, 10e7e], [1ee00, 1ee03], [1ee05, 1ee1f],
        [1ee21, 1ee22], [1ee24, 1ee24], [1ee27, 1ee27], [1ee29, 1ee32],
        [1ee34, 1ee37], [1ee39, 1ee39], [1ee3b, 1ee3b], [1ee42, 1ee42],
        [1ee47, 1ee47], [1ee49, 1ee49], [1ee4b, 1ee4b], [1ee4d, 1ee4f],
        [1ee51, 1ee52], [1ee54, 1ee54], [1ee57, 1ee57], [1ee59, 1ee59],
        [1ee5b, 1ee5b], [1ee5d, 1ee5d], [1ee5f, 1ee5f], [1ee61, 1ee62],
        [1ee64, 1ee64], [1ee67, 1ee6a], [1ee6c, 1ee72], [1ee74, 1ee77],
        [1ee79, 1ee7c], [1ee7e, 1ee7e], [1ee80, 1ee89], [1ee8b, 1ee9b],
        [1eea1, 1eea3], [1eea5, 1eea9], [1eeab, 1eebb], [1eef0, 1eef1]**/

        namespace {
        const static UnicodeSet::run_t __arab_Ext_runs[] = {
        {Empty, 48}, {Mixed, 1}, {Full, 5}, {Mixed, 1}, {Full, 1},
        {Empty, 2}, {Mixed, 1}, {Full, 1}, {Empty, 9}, {Mixed, 3},
        {Empty, 1938}, {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Full, 10},
        {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 2},
        {Empty, 3}, {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Empty, 31},
        {Mixed, 1}, {Empty, 91}, {Mixed, 1}, {Empty, 1788}, {Mixed, 6},
        {Empty, 1}, {Mixed, 1}, {Empty, 30856}};
        const static UnicodeSet::bitquad_t  __arab_Ext_quads[] = {
        0xdfffffdf, 0xdfffffff, 0xffff0000, 0xffdfffff, 0xfff800ff,
        0xfffffffb, 0xffff0000, 0xfff80003, 0x3fffffff, 0xffff0000,
        0xfffcffff, 0x000000ff, 0x3fff0000, 0xffdf0000, 0x1fffffff,
        0x0fffffff, 0x7fffffff, 0xffffffef, 0x0af7fe96, 0xaa96ea84,
        0x5ef7f796, 0x0ffffbff, 0x0ffffbee, 0x00030000};
        }

        const static UnicodeSet arab_Ext{const_cast<UnicodeSet::run_t *>(__arab_Ext_runs), 33, 0, const_cast<UnicodeSet::bitquad_t *>(__arab_Ext_quads), 24, 0};

        /** Code Point Ranges for Syrc
        [060c, 060c], [061b, 061c], [061f, 061f], [0640, 0640],
        [064b, 0655], [0670, 0670], [0700, 070d], [070f, 074a],
        [074d, 074f], [0860, 086a], [1df8, 1df8]**/

        namespace {
        const static UnicodeSet::run_t __syrc_Ext_runs[] = {
        {Empty, 48}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 4},
        {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 8}, {Mixed, 1},
        {Empty, 171}, {Mixed, 1}, {Empty, 34576}};
        const static UnicodeSet::bitquad_t  __syrc_Ext_quads[] = {
        0x98001000, 0x003ff801, 0x00010000, 0xffffbfff, 0x0000e7ff,
        0x000007ff, 0x01000000};
        }

        const static UnicodeSet syrc_Ext{const_cast<UnicodeSet::run_t *>(__syrc_Ext_runs), 13, 0, const_cast<UnicodeSet::bitquad_t *>(__syrc_Ext_quads), 7, 0};

        /** Code Point Ranges for Thaa
        [060c, 060c], [061b, 061c], [061f, 061f], [0660, 0669],
        [0780, 07b1], [fdf2, fdf2], [fdfd, fdfd]**/

        namespace {
        const static UnicodeSet::run_t __thaa_Ext_runs[] = {
        {Empty, 48}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 8},
        {Full, 1}, {Mixed, 1}, {Empty, 1969}, {Mixed, 1}, {Empty, 32784}};
        const static UnicodeSet::bitquad_t  __thaa_Ext_quads[] = {
        0x98001000, 0x000003ff, 0x0003ffff, 0x20040000};
        }

        const static UnicodeSet thaa_Ext{const_cast<UnicodeSet::run_t *>(__thaa_Ext_runs), 10, 0, const_cast<UnicodeSet::bitquad_t *>(__thaa_Ext_quads), 4, 0};

        /** Code Point Ranges for Deva
        [0900, 0952], [0955, 097f], [1cd0, 1cf6], [1cf8, 1cf9],
        [20f0, 20f0], [a830, a839], [a8e0, a8ff]**/

        namespace {
        const static UnicodeSet::run_t __deva_Ext_runs[] = {
        {Empty, 72}, {Full, 2}, {Mixed, 1}, {Full, 1}, {Empty, 154},
        {Mixed, 2}, {Empty, 31}, {Mixed, 1}, {Empty, 1081}, {Mixed, 1},
        {Empty, 5}, {Full, 1}, {Empty, 33464}};
        const static UnicodeSet::bitquad_t  __deva_Ext_quads[] = {
        0xffe7ffff, 0xffff0000, 0x037fffff, 0x00010000, 0x03ff0000};
        }

        const static UnicodeSet deva_Ext{const_cast<UnicodeSet::run_t *>(__deva_Ext_runs), 13, 0, const_cast<UnicodeSet::bitquad_t *>(__deva_Ext_quads), 5, 0};

        /** Code Point Ranges for Beng
        [0951, 0952], [0964, 0965], [0980, 0983], [0985, 098c],
        [098f, 0990], [0993, 09a8], [09aa, 09b0], [09b2, 09b2],
        [09b6, 09b9], [09bc, 09c4], [09c7, 09c8], [09cb, 09ce],
        [09d7, 09d7], [09dc, 09dd], [09df, 09e3], [09e6, 09fe],
        [1cd0, 1cd0], [1cd2, 1cd2], [1cd5, 1cd6], [1cd8, 1cd8],
        [1ce1, 1ce1], [1cea, 1cea], [1ced, 1ced], [1cf2, 1cf2],
        [1cf5, 1cf7], [a8f1, a8f1]**/

        namespace {
        const static UnicodeSet::run_t __beng_Ext_runs[] = {
        {Empty, 74}, {Mixed, 6}, {Empty, 150}, {Mixed, 2}, {Empty, 1119},
        {Mixed, 1}, {Empty, 33464}};
        const static UnicodeSet::bitquad_t  __beng_Ext_quads[] = {
        0x00060000, 0x00000030, 0xfff99fef, 0xf3c5fdff, 0xb080799f,
        0x7fffffcf, 0x01650000, 0x00e42402, 0x00020000};
        }

        const static UnicodeSet beng_Ext{const_cast<UnicodeSet::run_t *>(__beng_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__beng_Ext_quads), 9, 0};

        /** Code Point Ranges for Guru
        [0951, 0952], [0964, 0965], [0a01, 0a03], [0a05, 0a0a],
        [0a0f, 0a10], [0a13, 0a28], [0a2a, 0a30], [0a32, 0a33],
        [0a35, 0a36], [0a38, 0a39], [0a3c, 0a3c], [0a3e, 0a42],
        [0a47, 0a48], [0a4b, 0a4d], [0a51, 0a51], [0a59, 0a5c],
        [0a5e, 0a5e], [0a66, 0a76], [a830, a839]**/

        namespace {
        const static UnicodeSet::run_t __guru_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 4}, {Mixed, 4}, {Empty, 1261},
        {Mixed, 1}, {Empty, 33470}};
        const static UnicodeSet::bitquad_t  __guru_Ext_quads[] = {
        0x00060000, 0x00000030, 0xfff987ee, 0xd36dfdff, 0x5e023987,
        0x007fffc0, 0x03ff0000};
        }

        const static UnicodeSet guru_Ext{const_cast<UnicodeSet::run_t *>(__guru_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__guru_Ext_quads), 7, 0};

        /** Code Point Ranges for Gujr
        [0951, 0952], [0964, 0965], [0a81, 0a83], [0a85, 0a8d],
        [0a8f, 0a91], [0a93, 0aa8], [0aaa, 0ab0], [0ab2, 0ab3],
        [0ab5, 0ab9], [0abc, 0ac5], [0ac7, 0ac9], [0acb, 0acd],
        [0ad0, 0ad0], [0ae0, 0ae3], [0ae6, 0af1], [0af9, 0aff],
        [a830, a839]**/

        namespace {
        const static UnicodeSet::run_t __gujr_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 8}, {Mixed, 4}, {Empty, 1257},
        {Mixed, 1}, {Empty, 33470}};
        const static UnicodeSet::bitquad_t  __gujr_Ext_quads[] = {
        0x00060000, 0x00000030, 0xfffbbfee, 0xf3edfdff, 0x00013bbf,
        0xfe03ffcf, 0x03ff0000};
        }

        const static UnicodeSet gujr_Ext{const_cast<UnicodeSet::run_t *>(__gujr_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__gujr_Ext_quads), 7, 0};

        /** Code Point Ranges for Orya
        [0951, 0952], [0964, 0965], [0b01, 0b03], [0b05, 0b0c],
        [0b0f, 0b10], [0b13, 0b28], [0b2a, 0b30], [0b32, 0b33],
        [0b35, 0b39], [0b3c, 0b44], [0b47, 0b48], [0b4b, 0b4d],
        [0b55, 0b57], [0b5c, 0b5d], [0b5f, 0b63], [0b66, 0b77],
        [1cda, 1cda], [1cf2, 1cf2]**/

        namespace {
        const static UnicodeSet::run_t __orya_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 12}, {Mixed, 4}, {Empty, 138},
        {Mixed, 2}, {Empty, 34584}};
        const static UnicodeSet::bitquad_t  __orya_Ext_quads[] = {
        0x00060000, 0x00000030, 0xfff99fee, 0xf3edfdff, 0xb0e0399f,
        0x00ffffcf, 0x04000000, 0x00040000};
        }

        const static UnicodeSet orya_Ext{const_cast<UnicodeSet::run_t *>(__orya_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__orya_Ext_quads), 8, 0};

        /** Code Point Ranges for Taml
        [0951, 0952], [0964, 0965], [0b82, 0b83], [0b85, 0b8a],
        [0b8e, 0b90], [0b92, 0b95], [0b99, 0b9a], [0b9c, 0b9c],
        [0b9e, 0b9f], [0ba3, 0ba4], [0ba8, 0baa], [0bae, 0bb9],
        [0bbe, 0bc2], [0bc6, 0bc8], [0bca, 0bcd], [0bd0, 0bd0],
        [0bd7, 0bd7], [0be6, 0bfa], [1cda, 1cda], [a8f3, a8f3],
        [11301, 11301], [11303, 11303], [1133b, 1133c], [11fc0, 11ff1],
        [11fff, 11fff]**/

        namespace {
        const static UnicodeSet::run_t __taml_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 16}, {Mixed, 4}, {Empty, 134},
        {Mixed, 1}, {Empty, 1120}, {Mixed, 1}, {Empty, 848}, {Mixed, 2},
        {Empty, 100}, {Full, 1}, {Mixed, 1}, {Empty, 32512}};
        const static UnicodeSet::bitquad_t  __taml_Ext_quads[] = {
        0x00060000, 0x00000030, 0xd63dc7ec, 0xc3ffc718, 0x00813dc7,
        0x07ffffc0, 0x04000000, 0x00080000, 0x0000000a, 0x18000000,
        0x8003ffff};
        }

        const static UnicodeSet taml_Ext{const_cast<UnicodeSet::run_t *>(__taml_Ext_runs), 14, 0, const_cast<UnicodeSet::bitquad_t *>(__taml_Ext_quads), 11, 0};

        /** Code Point Ranges for Telu
        [0951, 0952], [0964, 0965], [0c00, 0c0c], [0c0e, 0c10],
        [0c12, 0c28], [0c2a, 0c39], [0c3d, 0c44], [0c46, 0c48],
        [0c4a, 0c4d], [0c55, 0c56], [0c58, 0c5a], [0c60, 0c63],
        [0c66, 0c6f], [0c77, 0c7f], [1cda, 1cda], [1cf2, 1cf2]**/

        namespace {
        const static UnicodeSet::run_t __telu_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 20}, {Mixed, 4}, {Empty, 130},
        {Mixed, 2}, {Empty, 34584}};
        const static UnicodeSet::bitquad_t  __telu_Ext_quads[] = {
        0x00060000, 0x00000030, 0xfffddfff, 0xe3fffdff, 0x07603ddf,
        0xff80ffcf, 0x04000000, 0x00040000};
        }

        const static UnicodeSet telu_Ext{const_cast<UnicodeSet::run_t *>(__telu_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__telu_Ext_quads), 8, 0};

        /** Code Point Ranges for Knda
        [0951, 0952], [0964, 0965], [0c80, 0c8c], [0c8e, 0c90],
        [0c92, 0ca8], [0caa, 0cb3], [0cb5, 0cb9], [0cbc, 0cc4],
        [0cc6, 0cc8], [0cca, 0ccd], [0cd5, 0cd6], [0cde, 0cde],
        [0ce0, 0ce3], [0ce6, 0cef], [0cf1, 0cf2], [1cd0, 1cd0],
        [1cd2, 1cd2], [1cda, 1cda], [1cf2, 1cf2], [1cf4, 1cf4],
        [a830, a835]**/

        namespace {
        const static UnicodeSet::run_t __knda_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 24}, {Mixed, 4}, {Empty, 126},
        {Mixed, 2}, {Empty, 1113}, {Mixed, 1}, {Empty, 33470}};
        const static UnicodeSet::bitquad_t  __knda_Ext_quads[] = {
        0x00060000, 0x00000030, 0xfffddfff, 0xf3effdff, 0x40603ddf,
        0x0006ffcf, 0x04050000, 0x00140000, 0x003f0000};
        }

        const static UnicodeSet knda_Ext{const_cast<UnicodeSet::run_t *>(__knda_Ext_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__knda_Ext_quads), 9, 0};

        /** Code Point Ranges for Mlym
        [0951, 0952], [0964, 0965], [0d00, 0d0c], [0d0e, 0d10],
        [0d12, 0d44], [0d46, 0d48], [0d4a, 0d4f], [0d54, 0d63],
        [0d66, 0d7f], [1cda, 1cda], [a830, a832]**/

        namespace {
        const static UnicodeSet::run_t __mlym_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 28}, {Mixed, 1}, {Full, 1},
        {Mixed, 2}, {Empty, 122}, {Mixed, 1}, {Empty, 1114}, {Mixed, 1},
        {Empty, 33470}};
        const static UnicodeSet::bitquad_t  __mlym_Ext_quads[] = {
        0x00060000, 0x00000030, 0xfffddfff, 0xfff0fddf, 0xffffffcf,
        0x04000000, 0x00070000};
        }

        const static UnicodeSet mlym_Ext{const_cast<UnicodeSet::run_t *>(__mlym_Ext_runs), 11, 0, const_cast<UnicodeSet::bitquad_t *>(__mlym_Ext_quads), 7, 0};

        /** Code Point Ranges for Sinh
        [0964, 0965], [0d81, 0d83], [0d85, 0d96], [0d9a, 0db1],
        [0db3, 0dbb], [0dbd, 0dbd], [0dc0, 0dc6], [0dca, 0dca],
        [0dcf, 0dd4], [0dd6, 0dd6], [0dd8, 0ddf], [0de6, 0def],
        [0df2, 0df4], [111e1, 111f4]**/

        namespace {
        const static UnicodeSet::run_t __sinh_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 32}, {Mixed, 4}, {Empty, 2079},
        {Mixed, 1}, {Empty, 32624}};
        const static UnicodeSet::bitquad_t  __sinh_Ext_quads[] = {
        0x00000030, 0xfc7fffee, 0x2ffbffff, 0xff5f847f, 0x001cffc0,
        0x001ffffe};
        }

        const static UnicodeSet sinh_Ext{const_cast<UnicodeSet::run_t *>(__sinh_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__sinh_Ext_quads), 6, 0};

        /** Code Point Ranges for Thai
        [0e01, 0e3a], [0e40, 0e5b]**/

        namespace {
        const static UnicodeSet::run_t __thai_Ext_runs[] = {
        {Empty, 112}, {Mixed, 3}, {Empty, 34701}};
        const static UnicodeSet::bitquad_t  __thai_Ext_quads[] = {
        0xfffffffe, 0x07ffffff, 0x0fffffff};
        }

        const static UnicodeSet thai_Ext{const_cast<UnicodeSet::run_t *>(__thai_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__thai_Ext_quads), 3, 0};

        /** Code Point Ranges for Laoo
        [0e81, 0e82], [0e84, 0e84], [0e86, 0e8a], [0e8c, 0ea3],
        [0ea5, 0ea5], [0ea7, 0ebd], [0ec0, 0ec4], [0ec6, 0ec6],
        [0ec8, 0ecd], [0ed0, 0ed9], [0edc, 0edf]**/

        namespace {
        const static UnicodeSet::run_t __laoo_Ext_runs[] = {
        {Empty, 116}, {Mixed, 3}, {Empty, 34697}};
        const static UnicodeSet::bitquad_t  __laoo_Ext_quads[] = {
        0xfffff7d6, 0x3fffffaf, 0xf3ff3f5f};
        }

        const static UnicodeSet laoo_Ext{const_cast<UnicodeSet::run_t *>(__laoo_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__laoo_Ext_quads), 3, 0};

        /** Code Point Ranges for Tibt
        [0f00, 0f47], [0f49, 0f6c], [0f71, 0f97], [0f99, 0fbc],
        [0fbe, 0fcc], [0fce, 0fd4], [0fd9, 0fda]**/

        namespace {
        const static UnicodeSet::run_t __tibt_Ext_runs[] = {
        {Empty, 120}, {Full, 2}, {Mixed, 5}, {Empty, 34689}};
        const static UnicodeSet::bitquad_t  __tibt_Ext_quads[] = {
        0xfffffeff, 0xfffe1fff, 0xfeffffff, 0xdfffffff, 0x061fdfff};
        }

        const static UnicodeSet tibt_Ext{const_cast<UnicodeSet::run_t *>(__tibt_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__tibt_Ext_quads), 5, 0};

        /** Code Point Ranges for Mymr
        [1000, 109f], [a92e, a92e], [a9e0, a9fe], [aa60, aa7f]**/

        namespace {
        const static UnicodeSet::run_t __mymr_Ext_runs[] = {
        {Empty, 128}, {Full, 5}, {Empty, 1220}, {Mixed, 1}, {Empty, 5},
        {Mixed, 1}, {Empty, 3}, {Full, 1}, {Empty, 33452}};
        const static UnicodeSet::bitquad_t  __mymr_Ext_quads[] = {
        0x00004000, 0x7fffffff};
        }

        const static UnicodeSet mymr_Ext{const_cast<UnicodeSet::run_t *>(__mymr_Ext_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__mymr_Ext_quads), 2, 0};

        /** Code Point Ranges for Geor
        [10a0, 10c5], [10c7, 10c7], [10cd, 10cd], [10d0, 10ff],
        [1c90, 1cba], [1cbd, 1cbf], [2d00, 2d25], [2d27, 2d27],
        [2d2d, 2d2d]**/

        namespace {
        const static UnicodeSet::run_t __geor_Ext_runs[] = {
        {Empty, 133}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Empty, 92},
        {Mixed, 2}, {Empty, 130}, {Full, 1}, {Mixed, 1}, {Empty, 34454}};
        const static UnicodeSet::bitquad_t  __geor_Ext_quads[] = {
        0xffff20bf, 0xffff0000, 0xe7ffffff, 0x000020bf};
        }

        const static UnicodeSet geor_Ext{const_cast<UnicodeSet::run_t *>(__geor_Ext_runs), 10, 0, const_cast<UnicodeSet::bitquad_t *>(__geor_Ext_quads), 4, 0};

        /** Code Point Ranges for Hang
        [1100, 11ff], [3001, 3003], [3008, 3011], [3013, 301f],
        [302e, 3030], [3037, 3037], [30fb, 30fb], [3131, 318e],
        [3200, 321e], [3260, 327e], [a960, a97c], [ac00, d7a3],
        [d7b0, d7c6], [d7cb, d7fb], [fe45, fe46], [ff61, ff65],
        [ffa0, ffbe], [ffc2, ffc7], [ffca, ffcf], [ffd2, ffd7],
        [ffda, ffdc]**/

        namespace {
        const static UnicodeSet::run_t __hang_Ext_runs[] = {
        {Empty, 136}, {Full, 8}, {Empty, 240}, {Mixed, 2}, {Empty, 5},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 1},
        {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 951},
        {Mixed, 1}, {Empty, 20}, {Full, 349}, {Mixed, 3}, {Empty, 306},
        {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 1}, {Mixed, 2},
        {Empty, 32769}};
        const static UnicodeSet::bitquad_t  __hang_Ext_quads[] = {
        0xfffbff0e, 0x0081c000, 0x08000000, 0xfffe0000, 0x00007fff,
        0x7fffffff, 0x7fffffff, 0x1fffffff, 0xffff000f, 0xfffff87f,
        0x0fffffff, 0x00000060, 0x0000003e, 0x7fffffff, 0x1cfcfcfc};
        }

        const static UnicodeSet hang_Ext{const_cast<UnicodeSet::run_t *>(__hang_Ext_runs), 26, 0, const_cast<UnicodeSet::bitquad_t *>(__hang_Ext_quads), 15, 0};

        /** Code Point Ranges for Ethi
        [1200, 1248], [124a, 124d], [1250, 1256], [1258, 1258],
        [125a, 125d], [1260, 1288], [128a, 128d], [1290, 12b0],
        [12b2, 12b5], [12b8, 12be], [12c0, 12c0], [12c2, 12c5],
        [12c8, 12d6], [12d8, 1310], [1312, 1315], [1318, 135a],
        [135d, 137c], [1380, 1399], [2d80, 2d96], [2da0, 2da6],
        [2da8, 2dae], [2db0, 2db6], [2db8, 2dbe], [2dc0, 2dc6],
        [2dc8, 2dce], [2dd0, 2dd6], [2dd8, 2dde], [ab01, ab06],
        [ab09, ab0e], [ab11, ab16], [ab20, ab26], [ab28, ab2e]**/

        namespace {
        const static UnicodeSet::run_t __ethi_Ext_runs[] = {
        {Empty, 144}, {Full, 2}, {Mixed, 1}, {Full, 1}, {Mixed, 3},
        {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 3}, {Empty, 207},
        {Mixed, 3}, {Empty, 1001}, {Mixed, 2}, {Empty, 33446}};
        const static UnicodeSet::bitquad_t  __ethi_Ext_quads[] = {
        0x3d7f3dff, 0xffff3dff, 0x7f3dffff, 0xff7fff3d, 0xff3dffff,
        0xe7ffffff, 0x1fffffff, 0x03ffffff, 0x007fffff, 0x7f7f7f7f,
        0x7f7f7f7f, 0x007e7e7e, 0x00007f7f};
        }

        const static UnicodeSet ethi_Ext{const_cast<UnicodeSet::run_t *>(__ethi_Ext_runs), 14, 0, const_cast<UnicodeSet::bitquad_t *>(__ethi_Ext_quads), 13, 0};

        /** Code Point Ranges for Cher
        [13a0, 13f5], [13f8, 13fd], [ab70, abbf]**/

        namespace {
        const static UnicodeSet::run_t __cher_Ext_runs[] = {
        {Empty, 157}, {Full, 2}, {Mixed, 1}, {Empty, 1211}, {Mixed, 1},
        {Full, 2}, {Empty, 33442}};
        const static UnicodeSet::bitquad_t  __cher_Ext_quads[] = {
        0x3f3fffff, 0xffff0000};
        }

        const static UnicodeSet cher_Ext{const_cast<UnicodeSet::run_t *>(__cher_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__cher_Ext_quads), 2, 0};

        /** Code Point Ranges for Cans
        [1400, 167f], [18b0, 18f5]**/

        namespace {
        const static UnicodeSet::run_t __cans_Ext_runs[] = {
        {Empty, 160}, {Full, 20}, {Empty, 17}, {Mixed, 1}, {Full, 1},
        {Mixed, 1}, {Empty, 34616}};
        const static UnicodeSet::bitquad_t  __cans_Ext_quads[] = {
        0xffff0000, 0x003fffff};
        }

        const static UnicodeSet cans_Ext{const_cast<UnicodeSet::run_t *>(__cans_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__cans_Ext_quads), 2, 0};

        /** Code Point Ranges for Ogam
        [1680, 169c]**/

        namespace {
        const static UnicodeSet::run_t __ogam_Ext_runs[] = {
        {Empty, 180}, {Mixed, 1}, {Empty, 34635}};
        const static UnicodeSet::bitquad_t  __ogam_Ext_quads[] = {
        0x1fffffff};
        }

        const static UnicodeSet ogam_Ext{const_cast<UnicodeSet::run_t *>(__ogam_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ogam_Ext_quads), 1, 0};

        /** Code Point Ranges for Runr
        [16a0, 16ea], [16ee, 16f8]**/

        namespace {
        const static UnicodeSet::run_t __runr_Ext_runs[] = {
        {Empty, 181}, {Full, 2}, {Mixed, 1}, {Empty, 34632}};
        const static UnicodeSet::bitquad_t  __runr_Ext_quads[] = {
        0x01ffc7ff};
        }

        const static UnicodeSet runr_Ext{const_cast<UnicodeSet::run_t *>(__runr_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__runr_Ext_quads), 1, 0};

        /** Code Point Ranges for Khmr
        [1780, 17dd], [17e0, 17e9], [17f0, 17f9], [19e0, 19ff]**/

        namespace {
        const static UnicodeSet::run_t __khmr_Ext_runs[] = {
        {Empty, 188}, {Full, 2}, {Mixed, 2}, {Empty, 15}, {Full, 1},
        {Empty, 34608}};
        const static UnicodeSet::bitquad_t  __khmr_Ext_quads[] = {
        0x3fffffff, 0x03ff03ff};
        }

        const static UnicodeSet khmr_Ext{const_cast<UnicodeSet::run_t *>(__khmr_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__khmr_Ext_quads), 2, 0};

        /** Code Point Ranges for Mong
        [1800, 180e], [1810, 1819], [1820, 1878], [1880, 18aa],
        [202f, 202f], [11660, 1166c]**/

        namespace {
        const static UnicodeSet::run_t __mong_Ext_runs[] = {
        {Empty, 192}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 1},
        {Mixed, 1}, {Empty, 59}, {Mixed, 1}, {Empty, 1969}, {Mixed, 1},
        {Empty, 32588}};
        const static UnicodeSet::bitquad_t  __mong_Ext_quads[] = {
        0x03ff7fff, 0x01ffffff, 0x000007ff, 0x00008000, 0x00001fff};
        }

        const static UnicodeSet mong_Ext{const_cast<UnicodeSet::run_t *>(__mong_Ext_runs), 11, 0, const_cast<UnicodeSet::bitquad_t *>(__mong_Ext_quads), 5, 0};

        /** Code Point Ranges for Hira
        [3001, 3003], [3008, 3011], [3013, 301f], [3030, 3035],
        [3037, 3037], [303c, 303d], [3041, 3096], [3099, 30a0],
        [30fb, 30fc], [fe45, fe46], [ff61, ff65], [ff70, ff70],
        [ff9e, ff9f], [1b001, 1b11e], [1b150, 1b152], [1f200, 1f200]**/

        namespace {
        const static UnicodeSet::run_t __hira_Ext_runs[] = {
        {Empty, 384}, {Mixed, 3}, {Full, 1}, {Mixed, 2}, {Empty, 1},
        {Mixed, 1}, {Empty, 1642}, {Mixed, 1}, {Empty, 8}, {Mixed, 2},
        {Empty, 1411}, {Mixed, 1}, {Full, 7}, {Mixed, 1}, {Empty, 1},
        {Mixed, 1}, {Empty, 517}, {Mixed, 1}, {Empty, 30831}};
        const static UnicodeSet::bitquad_t  __hira_Ext_quads[] = {
        0xfffbff0e, 0x30bf0000, 0xfffffffe, 0xfe7fffff, 0x00000001,
        0x18000000, 0x00000060, 0x0001003e, 0xc0000000, 0xfffffffe,
        0x7fffffff, 0x00070000, 0x00000001};
        }

        const static UnicodeSet hira_Ext{const_cast<UnicodeSet::run_t *>(__hira_Ext_runs), 19, 0, const_cast<UnicodeSet::bitquad_t *>(__hira_Ext_quads), 13, 0};

        /** Code Point Ranges for Kana
        [3001, 3003], [3008, 3011], [3013, 301f], [3030, 3035],
        [3037, 3037], [303c, 303d], [3099, 309c], [30a0, 30ff],
        [31f0, 31ff], [32d0, 32fe], [3300, 3357], [fe45, fe46],
        [ff61, ff9f], [1b000, 1b000], [1b164, 1b167]**/

        namespace {
        const static UnicodeSet::run_t __kana_Ext_runs[] = {
        {Empty, 384}, {Mixed, 2}, {Empty, 2}, {Mixed, 1}, {Full, 3},
        {Empty, 7}, {Mixed, 1}, {Empty, 6}, {Mixed, 2}, {Full, 2},
        {Mixed, 1}, {Empty, 1623}, {Mixed, 1}, {Empty, 8}, {Mixed, 1},
        {Full, 1}, {Empty, 1411}, {Mixed, 1}, {Empty, 10}, {Mixed, 1},
        {Empty, 31348}};
        const static UnicodeSet::bitquad_t  __kana_Ext_quads[] = {
        0xfffbff0e, 0x30bf0000, 0x1e000000, 0xffff0000, 0xffff0000,
        0x7fffffff, 0x00ffffff, 0x00000060, 0xfffffffe, 0x00000001,
        0x000000f0};
        }

        const static UnicodeSet kana_Ext{const_cast<UnicodeSet::run_t *>(__kana_Ext_runs), 21, 0, const_cast<UnicodeSet::bitquad_t *>(__kana_Ext_quads), 11, 0};

        /** Code Point Ranges for Bopo
        [02ea, 02eb], [3001, 3003], [3008, 3011], [3013, 301f],
        [302a, 302d], [3030, 3030], [3037, 3037], [30fb, 30fb],
        [3105, 312f], [31a0, 31bf], [fe45, fe46], [ff61, ff65]**/

        namespace {
        const static UnicodeSet::run_t __bopo_Ext_runs[] = {
        {Empty, 23}, {Mixed, 1}, {Empty, 360}, {Mixed, 2}, {Empty, 5},
        {Mixed, 3}, {Empty, 3}, {Full, 1}, {Empty, 1636}, {Mixed, 1},
        {Empty, 8}, {Mixed, 1}, {Empty, 32772}};
        const static UnicodeSet::bitquad_t  __bopo_Ext_quads[] = {
        0x00000c00, 0xfffbff0e, 0x00813c00, 0x08000000, 0xffffffe0,
        0x0000ffff, 0x00000060, 0x0000003e};
        }

        const static UnicodeSet bopo_Ext{const_cast<UnicodeSet::run_t *>(__bopo_Ext_runs), 13, 0, const_cast<UnicodeSet::bitquad_t *>(__bopo_Ext_quads), 8, 0};

        /** Code Point Ranges for Hani
        [2e80, 2e99], [2e9b, 2ef3], [2f00, 2fd5], [3001, 3003],
        [3005, 3011], [3013, 301f], [3021, 302d], [3030, 3030],
        [3037, 303f], [30fb, 30fb], [3190, 319f], [31c0, 31e3],
        [3220, 3247], [3280, 32b0], [32c0, 32cb], [32ff, 32ff],
        [3358, 3370], [337b, 337f], [33e0, 33fe], [3400, 4dbf],
        [4e00, 9ffc], [a700, a707], [f900, fa6d], [fa70, fad9],
        [fe45, fe46], [ff61, ff65], [16ff0, 16ff1], [1d360, 1d371],
        [1f250, 1f251], [20000, 2a6dd], [2a700, 2b734], [2b740, 2b81d],
        [2b820, 2cea1], [2ceb0, 2ebe0], [2f800, 2fa1d], [30000, 3134a]**/

        namespace {
        const static UnicodeSet::run_t __hani_Ext_runs[] = {
        {Empty, 372}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 6},
        {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 5}, {Mixed, 1},
        {Empty, 4}, {Mixed, 1}, {Empty, 1}, {Full, 1}, {Mixed, 1},
        {Empty, 1}, {Full, 1}, {Mixed, 1}, {Empty, 1}, {Full, 1},
        {Mixed, 3}, {Empty, 2}, {Mixed, 2}, {Empty, 3}, {Mixed, 1},
        {Full, 206}, {Empty, 2}, {Full, 655}, {Mixed, 1}, {Empty, 56},
        {Mixed, 1}, {Empty, 655}, {Full, 11}, {Mixed, 1}, {Full, 2},
        {Mixed, 1}, {Empty, 27}, {Mixed, 1}, {Empty, 8}, {Mixed, 1},
        {Empty, 899}, {Mixed, 1}, {Empty, 795}, {Mixed, 1}, {Empty, 246},
        {Mixed, 1}, {Empty, 109}, {Full, 1334}, {Mixed, 1}, {Empty, 1},
        {Full, 129}, {Mixed, 1}, {Full, 6}, {Mixed, 1}, {Full, 180},
        {Mixed, 1}, {Full, 233}, {Mixed, 1}, {Empty, 96}, {Full, 16},
        {Mixed, 1}, {Empty, 47}, {Full, 154}, {Mixed, 1}, {Empty, 28517}};
        const static UnicodeSet::bitquad_t  __hani_Ext_quads[] = {
        0xfbffffff, 0x000fffff, 0x003fffff, 0xfffbffee, 0xff813ffe,
        0x08000000, 0xffff0000, 0x0000000f, 0x000000ff, 0x0001ffff,
        0x00000fff, 0x80000000, 0xff000000, 0xf801ffff, 0x7fffffff,
        0x1fffffff, 0x000000ff, 0xffff3fff, 0x03ffffff, 0x00000060,
        0x0000003e, 0x00030000, 0x0003ffff, 0x00030000, 0x3fffffff,
        0x001fffff, 0x3fffffff, 0xffff0003, 0x00000001, 0x3fffffff,
        0x000007ff};
        }

        const static UnicodeSet hani_Ext{const_cast<UnicodeSet::run_t *>(__hani_Ext_runs), 65, 0, const_cast<UnicodeSet::bitquad_t *>(__hani_Ext_quads), 31, 0};

        /** Code Point Ranges for Yiii
        [3001, 3002], [3008, 3011], [3014, 301b], [30fb, 30fb],
        [a000, a48c], [a490, a4c6], [ff61, ff65]**/

        namespace {
        const static UnicodeSet::run_t __yiii_Ext_runs[] = {
        {Empty, 384}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 888},
        {Full, 36}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 724},
        {Mixed, 1}, {Empty, 32772}};
        const static UnicodeSet::bitquad_t  __yiii_Ext_quads[] = {
        0x0ff3ff06, 0x08000000, 0xffff1fff, 0x0000007f, 0x0000003e};
        }

        const static UnicodeSet yiii_Ext{const_cast<UnicodeSet::run_t *>(__yiii_Ext_runs), 12, 0, const_cast<UnicodeSet::bitquad_t *>(__yiii_Ext_quads), 5, 0};

        /** Code Point Ranges for Ital
        [10300, 10323], [1032d, 1032f]**/

        namespace {
        const static UnicodeSet::run_t __ital_Ext_runs[] = {
        {Empty, 2072}, {Full, 1}, {Mixed, 1}, {Empty, 32742}};
        const static UnicodeSet::bitquad_t  __ital_Ext_quads[] = {
        0x0000e00f};
        }

        const static UnicodeSet ital_Ext{const_cast<UnicodeSet::run_t *>(__ital_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__ital_Ext_quads), 1, 0};

        /** Code Point Ranges for Goth
        [10330, 1034a]**/

        namespace {
        const static UnicodeSet::run_t __goth_Ext_runs[] = {
        {Empty, 2073}, {Mixed, 2}, {Empty, 32741}};
        const static UnicodeSet::bitquad_t  __goth_Ext_quads[] = {
        0xffff0000, 0x000007ff};
        }

        const static UnicodeSet goth_Ext{const_cast<UnicodeSet::run_t *>(__goth_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__goth_Ext_quads), 2, 0};

        /** Code Point Ranges for Dsrt
        [10400, 1044f]**/

        namespace {
        const static UnicodeSet::run_t __dsrt_Ext_runs[] = {
        {Empty, 2080}, {Full, 2}, {Mixed, 1}, {Empty, 32733}};
        const static UnicodeSet::bitquad_t  __dsrt_Ext_quads[] = {
        0x0000ffff};
        }

        const static UnicodeSet dsrt_Ext{const_cast<UnicodeSet::run_t *>(__dsrt_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__dsrt_Ext_quads), 1, 0};

        /** Code Point Ranges for Zinh
        [0300, 0341], [0343, 0344], [0346, 0362], [0953, 0954],
        [1ab0, 1ac0], [1dc2, 1df7], [1df9, 1df9], [1dfb, 1dff],
        [200c, 200d], [20d0, 20ef], [fe00, fe0f], [fe20, fe2d],
        [101fd, 101fd], [1d167, 1d169], [1d17b, 1d182], [1d185, 1d18b],
        [1d1aa, 1d1ad], [e0100, e01ef]**/

        namespace {
        const static UnicodeSet::run_t __zinh_Ext_runs[] = {
        {Empty, 24}, {Full, 2}, {Mixed, 2}, {Empty, 46}, {Mixed, 1},
        {Empty, 138}, {Mixed, 2}, {Empty, 23}, {Mixed, 2}, {Empty, 16},
        {Mixed, 1}, {Empty, 5}, {Mixed, 2}, {Empty, 1768}, {Mixed, 2},
        {Empty, 29}, {Mixed, 1}, {Empty, 1659}, {Mixed, 3}, {Empty, 24954},
        {Full, 7}, {Mixed, 1}, {Empty, 6128}};
        const static UnicodeSet::bitquad_t  __zinh_Ext_quads[] = {
        0xffffffdb, 0x00000007, 0x00180000, 0xffff0000, 0x00000001,
        0xfffffffc, 0xfaffffff, 0x00003000, 0xffff0000, 0x0000ffff,
        0x0000ffff, 0x00003fff, 0x20000000, 0xf8000380, 0x00000fe7,
        0x00003c00, 0x0000ffff};
        }

        const static UnicodeSet zinh_Ext{const_cast<UnicodeSet::run_t *>(__zinh_Ext_runs), 23, 0, const_cast<UnicodeSet::bitquad_t *>(__zinh_Ext_quads), 17, 0};

        /** Code Point Ranges for Tglg
        [1700, 170c], [170e, 1714], [1735, 1736]**/

        namespace {
        const static UnicodeSet::run_t __tglg_Ext_runs[] = {
        {Empty, 184}, {Mixed, 2}, {Empty, 34630}};
        const static UnicodeSet::bitquad_t  __tglg_Ext_quads[] = {
        0x001fdfff, 0x00600000};
        }

        const static UnicodeSet tglg_Ext{const_cast<UnicodeSet::run_t *>(__tglg_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__tglg_Ext_quads), 2, 0};

        /** Code Point Ranges for Hano
        [1720, 1736]**/

        namespace {
        const static UnicodeSet::run_t __hano_Ext_runs[] = {
        {Empty, 185}, {Mixed, 1}, {Empty, 34630}};
        const static UnicodeSet::bitquad_t  __hano_Ext_quads[] = {
        0x007fffff};
        }

        const static UnicodeSet hano_Ext{const_cast<UnicodeSet::run_t *>(__hano_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__hano_Ext_quads), 1, 0};

        /** Code Point Ranges for Buhd
        [1735, 1736], [1740, 1753]**/

        namespace {
        const static UnicodeSet::run_t __buhd_Ext_runs[] = {
        {Empty, 185}, {Mixed, 2}, {Empty, 34629}};
        const static UnicodeSet::bitquad_t  __buhd_Ext_quads[] = {
        0x00600000, 0x000fffff};
        }

        const static UnicodeSet buhd_Ext{const_cast<UnicodeSet::run_t *>(__buhd_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__buhd_Ext_quads), 2, 0};

        /** Code Point Ranges for Tagb
        [1735, 1736], [1760, 176c], [176e, 1770], [1772, 1773]**/

        namespace {
        const static UnicodeSet::run_t __tagb_Ext_runs[] = {
        {Empty, 185}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 34628}};
        const static UnicodeSet::bitquad_t  __tagb_Ext_quads[] = {
        0x00600000, 0x000ddfff};
        }

        const static UnicodeSet tagb_Ext{const_cast<UnicodeSet::run_t *>(__tagb_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__tagb_Ext_quads), 2, 0};

        /** Code Point Ranges for Limb
        [0965, 0965], [1900, 191e], [1920, 192b], [1930, 193b],
        [1940, 1940], [1944, 194f]**/

        namespace {
        const static UnicodeSet::run_t __limb_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 124}, {Mixed, 3}, {Empty, 34613}};
        const static UnicodeSet::bitquad_t  __limb_Ext_quads[] = {
        0x00000020, 0x7fffffff, 0x0fff0fff, 0x0000fff1};
        }

        const static UnicodeSet limb_Ext{const_cast<UnicodeSet::run_t *>(__limb_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__limb_Ext_quads), 4, 0};

        /** Code Point Ranges for Tale
        [1040, 1049], [1950, 196d], [1970, 1974]**/

        namespace {
        const static UnicodeSet::run_t __tale_Ext_runs[] = {
        {Empty, 130}, {Mixed, 1}, {Empty, 71}, {Mixed, 2}, {Empty, 34612}};
        const static UnicodeSet::bitquad_t  __tale_Ext_quads[] = {
        0x000003ff, 0xffff0000, 0x001f3fff};
        }

        const static UnicodeSet tale_Ext{const_cast<UnicodeSet::run_t *>(__tale_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__tale_Ext_quads), 3, 0};

        /** Code Point Ranges for Linb
        [10000, 1000b], [1000d, 10026], [10028, 1003a], [1003c, 1003d],
        [1003f, 1004d], [10050, 1005d], [10080, 100fa], [10100, 10102],
        [10107, 10133], [10137, 1013f]**/

        namespace {
        const static UnicodeSet::run_t __linb_Ext_runs[] = {
        {Empty, 2048}, {Mixed, 3}, {Empty, 1}, {Full, 3}, {Mixed, 3},
        {Empty, 32758}};
        const static UnicodeSet::bitquad_t  __linb_Ext_quads[] = {
        0xffffefff, 0xb7ffff7f, 0x3fff3fff, 0x07ffffff, 0xffffff87,
        0xff8fffff};
        }

        const static UnicodeSet linb_Ext{const_cast<UnicodeSet::run_t *>(__linb_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__linb_Ext_quads), 6, 0};

        /** Code Point Ranges for Ugar
        [10380, 1039d], [1039f, 1039f]**/

        namespace {
        const static UnicodeSet::run_t __ugar_Ext_runs[] = {
        {Empty, 2076}, {Mixed, 1}, {Empty, 32739}};
        const static UnicodeSet::bitquad_t  __ugar_Ext_quads[] = {
        0xbfffffff};
        }

        const static UnicodeSet ugar_Ext{const_cast<UnicodeSet::run_t *>(__ugar_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ugar_Ext_quads), 1, 0};

        /** Code Point Ranges for Shaw
        [10450, 1047f]**/

        namespace {
        const static UnicodeSet::run_t __shaw_Ext_runs[] = {
        {Empty, 2082}, {Mixed, 1}, {Full, 1}, {Empty, 32732}};
        const static UnicodeSet::bitquad_t  __shaw_Ext_quads[] = {
        0xffff0000};
        }

        const static UnicodeSet shaw_Ext{const_cast<UnicodeSet::run_t *>(__shaw_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__shaw_Ext_quads), 1, 0};

        /** Code Point Ranges for Osma
        [10480, 1049d], [104a0, 104a9]**/

        namespace {
        const static UnicodeSet::run_t __osma_Ext_runs[] = {
        {Empty, 2084}, {Mixed, 2}, {Empty, 32730}};
        const static UnicodeSet::bitquad_t  __osma_Ext_quads[] = {
        0x3fffffff, 0x000003ff};
        }

        const static UnicodeSet osma_Ext{const_cast<UnicodeSet::run_t *>(__osma_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__osma_Ext_quads), 2, 0};

        /** Code Point Ranges for Cprt
        [10100, 10102], [10107, 10133], [10137, 1013f], [10800, 10805],
        [10808, 10808], [1080a, 10835], [10837, 10838], [1083c, 1083c],
        [1083f, 1083f]**/

        namespace {
        const static UnicodeSet::run_t __cprt_Ext_runs[] = {
        {Empty, 2056}, {Mixed, 2}, {Empty, 54}, {Mixed, 2}, {Empty, 32702}};
        const static UnicodeSet::bitquad_t  __cprt_Ext_quads[] = {
        0xffffff87, 0xff8fffff, 0xfffffd3f, 0x91bfffff};
        }

        const static UnicodeSet cprt_Ext{const_cast<UnicodeSet::run_t *>(__cprt_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__cprt_Ext_quads), 4, 0};

        /** Code Point Ranges for Brai
        [2800, 28ff]**/

        namespace {
        const static UnicodeSet::run_t __brai_Ext_runs[] = {
        {Empty, 320}, {Full, 8}, {Empty, 34488}};
        const static UnicodeSet::bitquad_t * const __brai_Ext_quads = nullptr;
        }

        const static UnicodeSet brai_Ext{const_cast<UnicodeSet::run_t *>(__brai_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__brai_Ext_quads), 0, 0};

        /** Code Point Ranges for Bugi
        [1a00, 1a1b], [1a1e, 1a1f], [a9cf, a9cf]**/

        namespace {
        const static UnicodeSet::run_t __bugi_Ext_runs[] = {
        {Empty, 208}, {Mixed, 1}, {Empty, 1149}, {Mixed, 1}, {Empty, 33457}};
        const static UnicodeSet::bitquad_t  __bugi_Ext_quads[] = {
        0xcfffffff, 0x00008000};
        }

        const static UnicodeSet bugi_Ext{const_cast<UnicodeSet::run_t *>(__bugi_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__bugi_Ext_quads), 2, 0};

        /** Code Point Ranges for Copt
        [03e2, 03ef], [2c80, 2cf3], [2cf9, 2cff], [102e0, 102fb]**/

        namespace {
        const static UnicodeSet::run_t __copt_Ext_runs[] = {
        {Empty, 31}, {Mixed, 1}, {Empty, 324}, {Full, 3}, {Mixed, 1},
        {Empty, 1711}, {Mixed, 1}, {Empty, 32744}};
        const static UnicodeSet::bitquad_t  __copt_Ext_quads[] = {
        0x0000fffc, 0xfe0fffff, 0x0fffffff};
        }

        const static UnicodeSet copt_Ext{const_cast<UnicodeSet::run_t *>(__copt_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__copt_Ext_quads), 3, 0};

        /** Code Point Ranges for Talu
        [1980, 19ab], [19b0, 19c9], [19d0, 19da], [19de, 19df]**/

        namespace {
        const static UnicodeSet::run_t __talu_Ext_runs[] = {
        {Empty, 204}, {Full, 1}, {Mixed, 2}, {Empty, 34609}};
        const static UnicodeSet::bitquad_t  __talu_Ext_quads[] = {
        0xffff0fff, 0xc7ff03ff};
        }

        const static UnicodeSet talu_Ext{const_cast<UnicodeSet::run_t *>(__talu_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__talu_Ext_quads), 2, 0};

        /** Code Point Ranges for Glag
        [0484, 0484], [0487, 0487], [2c00, 2c2e], [2c30, 2c5e],
        [2e43, 2e43], [a66f, a66f], [1e000, 1e006], [1e008, 1e018],
        [1e01b, 1e021], [1e023, 1e024], [1e026, 1e02a]**/

        namespace {
        const static UnicodeSet::run_t __glag_Ext_runs[] = {
        {Empty, 36}, {Mixed, 1}, {Empty, 315}, {Full, 1}, {Mixed, 2},
        {Empty, 15}, {Mixed, 1}, {Empty, 960}, {Mixed, 1}, {Empty, 2508},
        {Mixed, 2}, {Empty, 30974}};
        const static UnicodeSet::bitquad_t  __glag_Ext_quads[] = {
        0x00000090, 0xffff7fff, 0x7fffffff, 0x00000008, 0x00008000,
        0xf9ffff7f, 0x000007db};
        }

        const static UnicodeSet glag_Ext{const_cast<UnicodeSet::run_t *>(__glag_Ext_runs), 12, 0, const_cast<UnicodeSet::bitquad_t *>(__glag_Ext_quads), 7, 0};

        /** Code Point Ranges for Tfng
        [2d30, 2d67], [2d6f, 2d70], [2d7f, 2d7f]**/

        namespace {
        const static UnicodeSet::run_t __tfng_Ext_runs[] = {
        {Empty, 361}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 34452}};
        const static UnicodeSet::bitquad_t  __tfng_Ext_quads[] = {
        0xffff0000, 0x800180ff};
        }

        const static UnicodeSet tfng_Ext{const_cast<UnicodeSet::run_t *>(__tfng_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__tfng_Ext_quads), 2, 0};

        /** Code Point Ranges for Sylo
        [0964, 0965], [09e6, 09ef], [a800, a82c]**/

        namespace {
        const static UnicodeSet::run_t __sylo_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 1264},
        {Full, 1}, {Mixed, 1}, {Empty, 33470}};
        const static UnicodeSet::bitquad_t  __sylo_Ext_quads[] = {
        0x00000030, 0x0000ffc0, 0x00001fff};
        }

        const static UnicodeSet sylo_Ext{const_cast<UnicodeSet::run_t *>(__sylo_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__sylo_Ext_quads), 3, 0};

        /** Code Point Ranges for Xpeo
        [103a0, 103c3], [103c8, 103d5]**/

        namespace {
        const static UnicodeSet::run_t __xpeo_Ext_runs[] = {
        {Empty, 2077}, {Full, 1}, {Mixed, 1}, {Empty, 32737}};
        const static UnicodeSet::bitquad_t  __xpeo_Ext_quads[] = {
        0x003fff0f};
        }

        const static UnicodeSet xpeo_Ext{const_cast<UnicodeSet::run_t *>(__xpeo_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__xpeo_Ext_quads), 1, 0};

        /** Code Point Ranges for Khar
        [10a00, 10a03], [10a05, 10a06], [10a0c, 10a13], [10a15, 10a17],
        [10a19, 10a35], [10a38, 10a3a], [10a3f, 10a48], [10a50, 10a58]**/

        namespace {
        const static UnicodeSet::run_t __khar_Ext_runs[] = {
        {Empty, 2128}, {Mixed, 3}, {Empty, 32685}};
        const static UnicodeSet::bitquad_t  __khar_Ext_quads[] = {
        0xfeeff06f, 0x873fffff, 0x01ff01ff};
        }

        const static UnicodeSet khar_Ext{const_cast<UnicodeSet::run_t *>(__khar_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__khar_Ext_quads), 3, 0};

        /** Code Point Ranges for Bali
        [1b00, 1b4b], [1b50, 1b7c]**/

        namespace {
        const static UnicodeSet::run_t __bali_Ext_runs[] = {
        {Empty, 216}, {Full, 2}, {Mixed, 2}, {Empty, 34596}};
        const static UnicodeSet::bitquad_t  __bali_Ext_quads[] = {
        0xffff0fff, 0x1fffffff};
        }

        const static UnicodeSet bali_Ext{const_cast<UnicodeSet::run_t *>(__bali_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__bali_Ext_quads), 2, 0};

        /** Code Point Ranges for Xsux
        [12000, 12399], [12400, 1246e], [12470, 12474], [12480, 12543]**/

        namespace {
        const static UnicodeSet::run_t __xsux_Ext_runs[] = {
        {Empty, 2304}, {Full, 28}, {Mixed, 1}, {Empty, 3}, {Full, 3},
        {Mixed, 1}, {Full, 6}, {Mixed, 1}, {Empty, 32469}};
        const static UnicodeSet::bitquad_t  __xsux_Ext_quads[] = {
        0x03ffffff, 0x001f7fff, 0x0000000f};
        }

        const static UnicodeSet xsux_Ext{const_cast<UnicodeSet::run_t *>(__xsux_Ext_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__xsux_Ext_quads), 3, 0};

        /** Code Point Ranges for Phnx
        [10900, 1091b], [1091f, 1091f]**/

        namespace {
        const static UnicodeSet::run_t __phnx_Ext_runs[] = {
        {Empty, 2120}, {Mixed, 1}, {Empty, 32695}};
        const static UnicodeSet::bitquad_t  __phnx_Ext_quads[] = {
        0x8fffffff};
        }

        const static UnicodeSet phnx_Ext{const_cast<UnicodeSet::run_t *>(__phnx_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__phnx_Ext_quads), 1, 0};

        /** Code Point Ranges for Phag
        [1802, 1803], [1805, 1805], [a840, a877]**/

        namespace {
        const static UnicodeSet::run_t __phag_Ext_runs[] = {
        {Empty, 192}, {Mixed, 1}, {Empty, 1153}, {Full, 1}, {Mixed, 1},
        {Empty, 33468}};
        const static UnicodeSet::bitquad_t  __phag_Ext_quads[] = {
        0x0000002c, 0x00ffffff};
        }

        const static UnicodeSet phag_Ext{const_cast<UnicodeSet::run_t *>(__phag_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__phag_Ext_quads), 2, 0};

        /** Code Point Ranges for Nkoo
        [07c0, 07fa], [07fd, 07ff]**/

        namespace {
        const static UnicodeSet::run_t __nkoo_Ext_runs[] = {
        {Empty, 62}, {Full, 1}, {Mixed, 1}, {Empty, 34752}};
        const static UnicodeSet::bitquad_t  __nkoo_Ext_quads[] = {
        0xe7ffffff};
        }

        const static UnicodeSet nkoo_Ext{const_cast<UnicodeSet::run_t *>(__nkoo_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__nkoo_Ext_quads), 1, 0};

        /** Code Point Ranges for Sund
        [1b80, 1bbf], [1cc0, 1cc7]**/

        namespace {
        const static UnicodeSet::run_t __sund_Ext_runs[] = {
        {Empty, 220}, {Full, 2}, {Empty, 8}, {Mixed, 1}, {Empty, 34585}};
        const static UnicodeSet::bitquad_t  __sund_Ext_quads[] = {
        0x000000ff};
        }

        const static UnicodeSet sund_Ext{const_cast<UnicodeSet::run_t *>(__sund_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__sund_Ext_quads), 1, 0};

        /** Code Point Ranges for Lepc
        [1c00, 1c37], [1c3b, 1c49], [1c4d, 1c4f]**/

        namespace {
        const static UnicodeSet::run_t __lepc_Ext_runs[] = {
        {Empty, 224}, {Full, 1}, {Mixed, 2}, {Empty, 34589}};
        const static UnicodeSet::bitquad_t  __lepc_Ext_quads[] = {
        0xf8ffffff, 0x0000e3ff};
        }

        const static UnicodeSet lepc_Ext{const_cast<UnicodeSet::run_t *>(__lepc_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__lepc_Ext_quads), 2, 0};

        /** Code Point Ranges for Olck
        [1c50, 1c7f]**/

        namespace {
        const static UnicodeSet::run_t __olck_Ext_runs[] = {
        {Empty, 226}, {Mixed, 1}, {Full, 1}, {Empty, 34588}};
        const static UnicodeSet::bitquad_t  __olck_Ext_quads[] = {
        0xffff0000};
        }

        const static UnicodeSet olck_Ext{const_cast<UnicodeSet::run_t *>(__olck_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__olck_Ext_quads), 1, 0};

        /** Code Point Ranges for Vaii
        [a500, a62b]**/

        namespace {
        const static UnicodeSet::run_t __vaii_Ext_runs[] = {
        {Empty, 1320}, {Full, 9}, {Mixed, 1}, {Empty, 33486}};
        const static UnicodeSet::bitquad_t  __vaii_Ext_quads[] = {
        0x00000fff};
        }

        const static UnicodeSet vaii_Ext{const_cast<UnicodeSet::run_t *>(__vaii_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__vaii_Ext_quads), 1, 0};

        /** Code Point Ranges for Saur
        [a880, a8c5], [a8ce, a8d9]**/

        namespace {
        const static UnicodeSet::run_t __saur_Ext_runs[] = {
        {Empty, 1348}, {Full, 2}, {Mixed, 1}, {Empty, 33465}};
        const static UnicodeSet::bitquad_t  __saur_Ext_quads[] = {
        0x03ffc03f};
        }

        const static UnicodeSet saur_Ext{const_cast<UnicodeSet::run_t *>(__saur_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__saur_Ext_quads), 1, 0};

        /** Code Point Ranges for Kali
        [a900, a92f]**/

        namespace {
        const static UnicodeSet::run_t __kali_Ext_runs[] = {
        {Empty, 1352}, {Full, 1}, {Mixed, 1}, {Empty, 33462}};
        const static UnicodeSet::bitquad_t  __kali_Ext_quads[] = {
        0x0000ffff};
        }

        const static UnicodeSet kali_Ext{const_cast<UnicodeSet::run_t *>(__kali_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__kali_Ext_quads), 1, 0};

        /** Code Point Ranges for Rjng
        [a930, a953], [a95f, a95f]**/

        namespace {
        const static UnicodeSet::run_t __rjng_Ext_runs[] = {
        {Empty, 1353}, {Mixed, 2}, {Empty, 33461}};
        const static UnicodeSet::bitquad_t  __rjng_Ext_quads[] = {
        0xffff0000, 0x800fffff};
        }

        const static UnicodeSet rjng_Ext{const_cast<UnicodeSet::run_t *>(__rjng_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__rjng_Ext_quads), 2, 0};

        /** Code Point Ranges for Lyci
        [10280, 1029c]**/

        namespace {
        const static UnicodeSet::run_t __lyci_Ext_runs[] = {
        {Empty, 2068}, {Mixed, 1}, {Empty, 32747}};
        const static UnicodeSet::bitquad_t  __lyci_Ext_quads[] = {
        0x1fffffff};
        }

        const static UnicodeSet lyci_Ext{const_cast<UnicodeSet::run_t *>(__lyci_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__lyci_Ext_quads), 1, 0};

        /** Code Point Ranges for Cari
        [102a0, 102d0]**/

        namespace {
        const static UnicodeSet::run_t __cari_Ext_runs[] = {
        {Empty, 2069}, {Full, 1}, {Mixed, 1}, {Empty, 32745}};
        const static UnicodeSet::bitquad_t  __cari_Ext_quads[] = {
        0x0001ffff};
        }

        const static UnicodeSet cari_Ext{const_cast<UnicodeSet::run_t *>(__cari_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__cari_Ext_quads), 1, 0};

        /** Code Point Ranges for Lydi
        [10920, 10939], [1093f, 1093f]**/

        namespace {
        const static UnicodeSet::run_t __lydi_Ext_runs[] = {
        {Empty, 2121}, {Mixed, 1}, {Empty, 32694}};
        const static UnicodeSet::bitquad_t  __lydi_Ext_quads[] = {
        0x83ffffff};
        }

        const static UnicodeSet lydi_Ext{const_cast<UnicodeSet::run_t *>(__lydi_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__lydi_Ext_quads), 1, 0};

        /** Code Point Ranges for Cham
        [aa00, aa36], [aa40, aa4d], [aa50, aa59], [aa5c, aa5f]**/

        namespace {
        const static UnicodeSet::run_t __cham_Ext_runs[] = {
        {Empty, 1360}, {Full, 1}, {Mixed, 2}, {Empty, 33453}};
        const static UnicodeSet::bitquad_t  __cham_Ext_quads[] = {
        0x007fffff, 0xf3ff3fff};
        }

        const static UnicodeSet cham_Ext{const_cast<UnicodeSet::run_t *>(__cham_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__cham_Ext_quads), 2, 0};

        /** Code Point Ranges for Lana
        [1a20, 1a5e], [1a60, 1a7c], [1a7f, 1a89], [1a90, 1a99],
        [1aa0, 1aad]**/

        namespace {
        const static UnicodeSet::run_t __lana_Ext_runs[] = {
        {Empty, 209}, {Full, 1}, {Mixed, 4}, {Empty, 34602}};
        const static UnicodeSet::bitquad_t  __lana_Ext_quads[] = {
        0x7fffffff, 0x9fffffff, 0x03ff03ff, 0x00003fff};
        }

        const static UnicodeSet lana_Ext{const_cast<UnicodeSet::run_t *>(__lana_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__lana_Ext_quads), 4, 0};

        /** Code Point Ranges for Tavt
        [aa80, aac2], [aadb, aadf]**/

        namespace {
        const static UnicodeSet::run_t __tavt_Ext_runs[] = {
        {Empty, 1364}, {Full, 2}, {Mixed, 1}, {Empty, 33449}};
        const static UnicodeSet::bitquad_t  __tavt_Ext_quads[] = {
        0xf8000007};
        }

        const static UnicodeSet tavt_Ext{const_cast<UnicodeSet::run_t *>(__tavt_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__tavt_Ext_quads), 1, 0};

        /** Code Point Ranges for Avst
        [10b00, 10b35], [10b39, 10b3f]**/

        namespace {
        const static UnicodeSet::run_t __avst_Ext_runs[] = {
        {Empty, 2136}, {Full, 1}, {Mixed, 1}, {Empty, 32678}};
        const static UnicodeSet::bitquad_t  __avst_Ext_quads[] = {
        0xfe3fffff};
        }

        const static UnicodeSet avst_Ext{const_cast<UnicodeSet::run_t *>(__avst_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__avst_Ext_quads), 1, 0};

        /** Code Point Ranges for Egyp
        [13000, 1342e], [13430, 13438]**/

        namespace {
        const static UnicodeSet::run_t __egyp_Ext_runs[] = {
        {Empty, 2432}, {Full, 33}, {Mixed, 1}, {Empty, 32350}};
        const static UnicodeSet::bitquad_t  __egyp_Ext_quads[] = {
        0x01ff7fff};
        }

        const static UnicodeSet egyp_Ext{const_cast<UnicodeSet::run_t *>(__egyp_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__egyp_Ext_quads), 1, 0};

        /** Code Point Ranges for Samr
        [0800, 082d], [0830, 083e]**/

        namespace {
        const static UnicodeSet::run_t __samr_Ext_runs[] = {
        {Empty, 64}, {Full, 1}, {Mixed, 1}, {Empty, 34750}};
        const static UnicodeSet::bitquad_t  __samr_Ext_quads[] = {
        0x7fff3fff};
        }

        const static UnicodeSet samr_Ext{const_cast<UnicodeSet::run_t *>(__samr_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__samr_Ext_quads), 1, 0};

        /** Code Point Ranges for Lisu
        [a4d0, a4ff], [11fb0, 11fb0]**/

        namespace {
        const static UnicodeSet::run_t __lisu_Ext_runs[] = {
        {Empty, 1318}, {Mixed, 1}, {Full, 1}, {Empty, 981}, {Mixed, 1},
        {Empty, 32514}};
        const static UnicodeSet::bitquad_t  __lisu_Ext_quads[] = {
        0xffff0000, 0x00010000};
        }

        const static UnicodeSet lisu_Ext{const_cast<UnicodeSet::run_t *>(__lisu_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__lisu_Ext_quads), 2, 0};

        /** Code Point Ranges for Bamu
        [a6a0, a6f7], [16800, 16a38]**/

        namespace {
        const static UnicodeSet::run_t __bamu_Ext_runs[] = {
        {Empty, 1333}, {Full, 2}, {Mixed, 1}, {Empty, 1544}, {Full, 17},
        {Mixed, 1}, {Empty, 31918}};
        const static UnicodeSet::bitquad_t  __bamu_Ext_quads[] = {
        0x00ffffff, 0x01ffffff};
        }

        const static UnicodeSet bamu_Ext{const_cast<UnicodeSet::run_t *>(__bamu_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__bamu_Ext_quads), 2, 0};

        /** Code Point Ranges for Java
        [a980, a9cd], [a9cf, a9d9], [a9de, a9df]**/

        namespace {
        const static UnicodeSet::run_t __java_Ext_runs[] = {
        {Empty, 1356}, {Full, 2}, {Mixed, 1}, {Empty, 33457}};
        const static UnicodeSet::bitquad_t  __java_Ext_quads[] = {
        0xc3ffbfff};
        }

        const static UnicodeSet java_Ext{const_cast<UnicodeSet::run_t *>(__java_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__java_Ext_quads), 1, 0};

        /** Code Point Ranges for Mtei
        [aae0, aaf6], [abc0, abed], [abf0, abf9]**/

        namespace {
        const static UnicodeSet::run_t __mtei_Ext_runs[] = {
        {Empty, 1367}, {Mixed, 1}, {Empty, 6}, {Full, 1}, {Mixed, 1},
        {Empty, 33440}};
        const static UnicodeSet::bitquad_t  __mtei_Ext_quads[] = {
        0x007fffff, 0x03ff3fff};
        }

        const static UnicodeSet mtei_Ext{const_cast<UnicodeSet::run_t *>(__mtei_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__mtei_Ext_quads), 2, 0};

        /** Code Point Ranges for Armi
        [10840, 10855], [10857, 1085f]**/

        namespace {
        const static UnicodeSet::run_t __armi_Ext_runs[] = {
        {Empty, 2114}, {Mixed, 1}, {Empty, 32701}};
        const static UnicodeSet::bitquad_t  __armi_Ext_quads[] = {
        0xffbfffff};
        }

        const static UnicodeSet armi_Ext{const_cast<UnicodeSet::run_t *>(__armi_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__armi_Ext_quads), 1, 0};

        /** Code Point Ranges for Sarb
        [10a60, 10a7f]**/

        namespace {
        const static UnicodeSet::run_t __sarb_Ext_runs[] = {
        {Empty, 2131}, {Full, 1}, {Empty, 32684}};
        const static UnicodeSet::bitquad_t * const __sarb_Ext_quads = nullptr;
        }

        const static UnicodeSet sarb_Ext{const_cast<UnicodeSet::run_t *>(__sarb_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__sarb_Ext_quads), 0, 0};

        /** Code Point Ranges for Prti
        [10b40, 10b55], [10b58, 10b5f]**/

        namespace {
        const static UnicodeSet::run_t __prti_Ext_runs[] = {
        {Empty, 2138}, {Mixed, 1}, {Empty, 32677}};
        const static UnicodeSet::bitquad_t  __prti_Ext_quads[] = {
        0xff3fffff};
        }

        const static UnicodeSet prti_Ext{const_cast<UnicodeSet::run_t *>(__prti_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__prti_Ext_quads), 1, 0};

        /** Code Point Ranges for Phli
        [10b60, 10b72], [10b78, 10b7f]**/

        namespace {
        const static UnicodeSet::run_t __phli_Ext_runs[] = {
        {Empty, 2139}, {Mixed, 1}, {Empty, 32676}};
        const static UnicodeSet::bitquad_t  __phli_Ext_quads[] = {
        0xff07ffff};
        }

        const static UnicodeSet phli_Ext{const_cast<UnicodeSet::run_t *>(__phli_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__phli_Ext_quads), 1, 0};

        /** Code Point Ranges for Orkh
        [10c00, 10c48]**/

        namespace {
        const static UnicodeSet::run_t __orkh_Ext_runs[] = {
        {Empty, 2144}, {Full, 2}, {Mixed, 1}, {Empty, 32669}};
        const static UnicodeSet::bitquad_t  __orkh_Ext_quads[] = {
        0x000001ff};
        }

        const static UnicodeSet orkh_Ext{const_cast<UnicodeSet::run_t *>(__orkh_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__orkh_Ext_quads), 1, 0};

        /** Code Point Ranges for Kthi
        [0966, 096f], [a830, a839], [11080, 110c1], [110cd, 110cd]**/

        namespace {
        const static UnicodeSet::run_t __kthi_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 1269}, {Mixed, 1}, {Empty, 834},
        {Full, 2}, {Mixed, 1}, {Empty, 32633}};
        const static UnicodeSet::bitquad_t  __kthi_Ext_quads[] = {
        0x0000ffc0, 0x03ff0000, 0x00002003};
        }

        const static UnicodeSet kthi_Ext{const_cast<UnicodeSet::run_t *>(__kthi_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__kthi_Ext_quads), 3, 0};

        /** Code Point Ranges for Batk
        [1bc0, 1bf3], [1bfc, 1bff]**/

        namespace {
        const static UnicodeSet::run_t __batk_Ext_runs[] = {
        {Empty, 222}, {Full, 1}, {Mixed, 1}, {Empty, 34592}};
        const static UnicodeSet::bitquad_t  __batk_Ext_quads[] = {
        0xf00fffff};
        }

        const static UnicodeSet batk_Ext{const_cast<UnicodeSet::run_t *>(__batk_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__batk_Ext_quads), 1, 0};

        /** Code Point Ranges for Brah
        [11000, 1104d], [11052, 1106f], [1107f, 1107f]**/

        namespace {
        const static UnicodeSet::run_t __brah_Ext_runs[] = {
        {Empty, 2176}, {Full, 2}, {Mixed, 2}, {Empty, 32636}};
        const static UnicodeSet::bitquad_t  __brah_Ext_quads[] = {
        0xfffc3fff, 0x8000ffff};
        }

        const static UnicodeSet brah_Ext{const_cast<UnicodeSet::run_t *>(__brah_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__brah_Ext_quads), 2, 0};

        /** Code Point Ranges for Mand
        [0640, 0640], [0840, 085b], [085e, 085e]**/

        namespace {
        const static UnicodeSet::run_t __mand_Ext_runs[] = {
        {Empty, 50}, {Mixed, 1}, {Empty, 15}, {Mixed, 1}, {Empty, 34749}};
        const static UnicodeSet::bitquad_t  __mand_Ext_quads[] = {
        0x00000001, 0x4fffffff};
        }

        const static UnicodeSet mand_Ext{const_cast<UnicodeSet::run_t *>(__mand_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__mand_Ext_quads), 2, 0};

        /** Code Point Ranges for Cakm
        [09e6, 09ef], [1040, 1049], [11100, 11134], [11136, 11147]**/

        namespace {
        const static UnicodeSet::run_t __cakm_Ext_runs[] = {
        {Empty, 79}, {Mixed, 1}, {Empty, 50}, {Mixed, 1}, {Empty, 2053},
        {Full, 1}, {Mixed, 2}, {Empty, 32629}};
        const static UnicodeSet::bitquad_t  __cakm_Ext_quads[] = {
        0x0000ffc0, 0x000003ff, 0xffdfffff, 0x000000ff};
        }

        const static UnicodeSet cakm_Ext{const_cast<UnicodeSet::run_t *>(__cakm_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__cakm_Ext_quads), 4, 0};

        /** Code Point Ranges for Merc
        [109a0, 109b7], [109bc, 109cf], [109d2, 109ff]**/

        namespace {
        const static UnicodeSet::run_t __merc_Ext_runs[] = {
        {Empty, 2125}, {Mixed, 2}, {Full, 1}, {Empty, 32688}};
        const static UnicodeSet::bitquad_t  __merc_Ext_quads[] = {
        0xf0ffffff, 0xfffcffff};
        }

        const static UnicodeSet merc_Ext{const_cast<UnicodeSet::run_t *>(__merc_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__merc_Ext_quads), 2, 0};

        /** Code Point Ranges for Mero
        [10980, 1099f]**/

        namespace {
        const static UnicodeSet::run_t __mero_Ext_runs[] = {
        {Empty, 2124}, {Full, 1}, {Empty, 32691}};
        const static UnicodeSet::bitquad_t * const __mero_Ext_quads = nullptr;
        }

        const static UnicodeSet mero_Ext{const_cast<UnicodeSet::run_t *>(__mero_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__mero_Ext_quads), 0, 0};

        /** Code Point Ranges for Plrd
        [16f00, 16f4a], [16f4f, 16f87], [16f8f, 16f9f]**/

        namespace {
        const static UnicodeSet::run_t __plrd_Ext_runs[] = {
        {Empty, 2936}, {Full, 2}, {Mixed, 1}, {Full, 1}, {Mixed, 1},
        {Empty, 31875}};
        const static UnicodeSet::bitquad_t  __plrd_Ext_quads[] = {
        0xffff87ff, 0xffff80ff};
        }

        const static UnicodeSet plrd_Ext{const_cast<UnicodeSet::run_t *>(__plrd_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__plrd_Ext_quads), 2, 0};

        /** Code Point Ranges for Shrd
        [0951, 0951], [1cd7, 1cd7], [1cd9, 1cd9], [1cdc, 1cdd],
        [1ce0, 1ce0], [11180, 111df]**/

        namespace {
        const static UnicodeSet::run_t __shrd_Ext_runs[] = {
        {Empty, 74}, {Mixed, 1}, {Empty, 155}, {Mixed, 2}, {Empty, 1956},
        {Full, 3}, {Empty, 32625}};
        const static UnicodeSet::bitquad_t  __shrd_Ext_quads[] = {
        0x00020000, 0x32800000, 0x00000001};
        }

        const static UnicodeSet shrd_Ext{const_cast<UnicodeSet::run_t *>(__shrd_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__shrd_Ext_quads), 3, 0};

        /** Code Point Ranges for Sora
        [110d0, 110e8], [110f0, 110f9]**/

        namespace {
        const static UnicodeSet::run_t __sora_Ext_runs[] = {
        {Empty, 2182}, {Mixed, 2}, {Empty, 32632}};
        const static UnicodeSet::bitquad_t  __sora_Ext_quads[] = {
        0xffff0000, 0x03ff01ff};
        }

        const static UnicodeSet sora_Ext{const_cast<UnicodeSet::run_t *>(__sora_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__sora_Ext_quads), 2, 0};

        /** Code Point Ranges for Takr
        [0964, 0965], [a830, a839], [11680, 116b8], [116c0, 116c9]**/

        namespace {
        const static UnicodeSet::run_t __takr_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 1269}, {Mixed, 1}, {Empty, 882},
        {Full, 1}, {Mixed, 2}, {Empty, 32585}};
        const static UnicodeSet::bitquad_t  __takr_Ext_quads[] = {
        0x00000030, 0x03ff0000, 0x01ffffff, 0x000003ff};
        }

        const static UnicodeSet takr_Ext{const_cast<UnicodeSet::run_t *>(__takr_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__takr_Ext_quads), 4, 0};

        /** Code Point Ranges for Aghb
        [10530, 10563], [1056f, 1056f]**/

        namespace {
        const static UnicodeSet::run_t __aghb_Ext_runs[] = {
        {Empty, 2089}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 32724}};
        const static UnicodeSet::bitquad_t  __aghb_Ext_quads[] = {
        0xffff0000, 0x0000800f};
        }

        const static UnicodeSet aghb_Ext{const_cast<UnicodeSet::run_t *>(__aghb_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__aghb_Ext_quads), 2, 0};

        /** Code Point Ranges for Bass
        [16ad0, 16aed], [16af0, 16af5]**/

        namespace {
        const static UnicodeSet::run_t __bass_Ext_runs[] = {
        {Empty, 2902}, {Mixed, 2}, {Empty, 31912}};
        const static UnicodeSet::bitquad_t  __bass_Ext_quads[] = {
        0xffff0000, 0x003f3fff};
        }

        const static UnicodeSet bass_Ext{const_cast<UnicodeSet::run_t *>(__bass_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__bass_Ext_quads), 2, 0};

        /** Code Point Ranges for Dupl
        [1bc00, 1bc6a], [1bc70, 1bc7c], [1bc80, 1bc88], [1bc90, 1bc99],
        [1bc9c, 1bca3]**/

        namespace {
        const static UnicodeSet::run_t __dupl_Ext_runs[] = {
        {Empty, 3552}, {Full, 3}, {Mixed, 3}, {Empty, 31258}};
        const static UnicodeSet::bitquad_t  __dupl_Ext_quads[] = {
        0x1fff07ff, 0xf3ff01ff, 0x0000000f};
        }

        const static UnicodeSet dupl_Ext{const_cast<UnicodeSet::run_t *>(__dupl_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__dupl_Ext_quads), 3, 0};

        /** Code Point Ranges for Elba
        [10500, 10527]**/

        namespace {
        const static UnicodeSet::run_t __elba_Ext_runs[] = {
        {Empty, 2088}, {Full, 1}, {Mixed, 1}, {Empty, 32726}};
        const static UnicodeSet::bitquad_t  __elba_Ext_quads[] = {
        0x000000ff};
        }

        const static UnicodeSet elba_Ext{const_cast<UnicodeSet::run_t *>(__elba_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__elba_Ext_quads), 1, 0};

        /** Code Point Ranges for Gran
        [0951, 0952], [0964, 0965], [0be6, 0bf3], [1cd0, 1cd0],
        [1cd2, 1cd3], [1cf2, 1cf4], [1cf8, 1cf9], [20f0, 20f0],
        [11300, 11303], [11305, 1130c], [1130f, 11310], [11313, 11328],
        [1132a, 11330], [11332, 11333], [11335, 11339], [1133b, 11344],
        [11347, 11348], [1134b, 1134d], [11350, 11350], [11357, 11357],
        [1135d, 11363], [11366, 1136c], [11370, 11374], [11fd0, 11fd1],
        [11fd3, 11fd3]**/

        namespace {
        const static UnicodeSet::run_t __gran_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 19}, {Mixed, 1}, {Empty, 134},
        {Mixed, 2}, {Empty, 31}, {Mixed, 1}, {Empty, 1936}, {Mixed, 4},
        {Empty, 98}, {Mixed, 1}, {Empty, 32513}};
        const static UnicodeSet::bitquad_t  __gran_Ext_quads[] = {
        0x00060000, 0x00000030, 0x000fffc0, 0x000d0000, 0x031c0000,
        0x00010000, 0xfff99fef, 0xfbedfdff, 0xe081399f, 0x001f1fcf,
        0x000b0000};
        }

        const static UnicodeSet gran_Ext{const_cast<UnicodeSet::run_t *>(__gran_Ext_runs), 13, 0, const_cast<UnicodeSet::bitquad_t *>(__gran_Ext_quads), 11, 0};

        /** Code Point Ranges for Hmng
        [16b00, 16b45], [16b50, 16b59], [16b5b, 16b61], [16b63, 16b77],
        [16b7d, 16b8f]**/

        namespace {
        const static UnicodeSet::run_t __hmng_Ext_runs[] = {
        {Empty, 2904}, {Full, 2}, {Mixed, 3}, {Empty, 31907}};
        const static UnicodeSet::bitquad_t  __hmng_Ext_quads[] = {
        0xfbff003f, 0xe0fffffb, 0x0000ffff};
        }

        const static UnicodeSet hmng_Ext{const_cast<UnicodeSet::run_t *>(__hmng_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__hmng_Ext_quads), 3, 0};

        /** Code Point Ranges for Khoj
        [0ae6, 0aef], [a830, a839], [11200, 11211], [11213, 1123e]**/

        namespace {
        const static UnicodeSet::run_t __khoj_Ext_runs[] = {
        {Empty, 87}, {Mixed, 1}, {Empty, 1257}, {Mixed, 1}, {Empty, 846},
        {Mixed, 2}, {Empty, 32622}};
        const static UnicodeSet::bitquad_t  __khoj_Ext_quads[] = {
        0x0000ffc0, 0x03ff0000, 0xfffbffff, 0x7fffffff};
        }

        const static UnicodeSet khoj_Ext{const_cast<UnicodeSet::run_t *>(__khoj_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__khoj_Ext_quads), 4, 0};

        /** Code Point Ranges for Lina
        [10107, 10133], [10600, 10736], [10740, 10755], [10760, 10767]**/

        namespace {
        const static UnicodeSet::run_t __lina_Ext_runs[] = {
        {Empty, 2056}, {Mixed, 2}, {Empty, 38}, {Full, 9}, {Mixed, 3},
        {Empty, 32708}};
        const static UnicodeSet::bitquad_t  __lina_Ext_quads[] = {
        0xffffff80, 0x000fffff, 0x007fffff, 0x003fffff, 0x000000ff};
        }

        const static UnicodeSet lina_Ext{const_cast<UnicodeSet::run_t *>(__lina_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__lina_Ext_quads), 5, 0};

        /** Code Point Ranges for Mahj
        [0964, 096f], [a830, a839], [11150, 11176]**/

        namespace {
        const static UnicodeSet::run_t __mahj_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 1269}, {Mixed, 1}, {Empty, 840},
        {Mixed, 2}, {Empty, 32628}};
        const static UnicodeSet::bitquad_t  __mahj_Ext_quads[] = {
        0x0000fff0, 0x03ff0000, 0xffff0000, 0x007fffff};
        }

        const static UnicodeSet mahj_Ext{const_cast<UnicodeSet::run_t *>(__mahj_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__mahj_Ext_quads), 4, 0};

        /** Code Point Ranges for Mani
        [0640, 0640], [10ac0, 10ae6], [10aeb, 10af6]**/

        namespace {
        const static UnicodeSet::run_t __mani_Ext_runs[] = {
        {Empty, 50}, {Mixed, 1}, {Empty, 2083}, {Full, 1}, {Mixed, 1},
        {Empty, 32680}};
        const static UnicodeSet::bitquad_t  __mani_Ext_quads[] = {
        0x00000001, 0x007ff87f};
        }

        const static UnicodeSet mani_Ext{const_cast<UnicodeSet::run_t *>(__mani_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__mani_Ext_quads), 2, 0};

        /** Code Point Ranges for Mend
        [1e800, 1e8c4], [1e8c7, 1e8d6]**/

        namespace {
        const static UnicodeSet::run_t __mend_Ext_runs[] = {
        {Empty, 3904}, {Full, 6}, {Mixed, 1}, {Empty, 30905}};
        const static UnicodeSet::bitquad_t  __mend_Ext_quads[] = {
        0x007fff9f};
        }

        const static UnicodeSet mend_Ext{const_cast<UnicodeSet::run_t *>(__mend_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__mend_Ext_quads), 1, 0};

        /** Code Point Ranges for Modi
        [a830, a839], [11600, 11644], [11650, 11659]**/

        namespace {
        const static UnicodeSet::run_t __modi_Ext_runs[] = {
        {Empty, 1345}, {Mixed, 1}, {Empty, 878}, {Full, 2}, {Mixed, 1},
        {Empty, 32589}};
        const static UnicodeSet::bitquad_t  __modi_Ext_quads[] = {
        0x03ff0000, 0x03ff001f};
        }

        const static UnicodeSet modi_Ext{const_cast<UnicodeSet::run_t *>(__modi_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__modi_Ext_quads), 2, 0};

        /** Code Point Ranges for Mroo
        [16a40, 16a5e], [16a60, 16a69], [16a6e, 16a6f]**/

        namespace {
        const static UnicodeSet::run_t __mroo_Ext_runs[] = {
        {Empty, 2898}, {Mixed, 2}, {Empty, 31916}};
        const static UnicodeSet::bitquad_t  __mroo_Ext_quads[] = {
        0x7fffffff, 0x0000c3ff};
        }

        const static UnicodeSet mroo_Ext{const_cast<UnicodeSet::run_t *>(__mroo_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__mroo_Ext_quads), 2, 0};

        /** Code Point Ranges for Narb
        [10a80, 10a9f]**/

        namespace {
        const static UnicodeSet::run_t __narb_Ext_runs[] = {
        {Empty, 2132}, {Full, 1}, {Empty, 32683}};
        const static UnicodeSet::bitquad_t * const __narb_Ext_quads = nullptr;
        }

        const static UnicodeSet narb_Ext{const_cast<UnicodeSet::run_t *>(__narb_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__narb_Ext_quads), 0, 0};

        /** Code Point Ranges for Nbat
        [10880, 1089e], [108a7, 108af]**/

        namespace {
        const static UnicodeSet::run_t __nbat_Ext_runs[] = {
        {Empty, 2116}, {Mixed, 2}, {Empty, 32698}};
        const static UnicodeSet::bitquad_t  __nbat_Ext_quads[] = {
        0x7fffffff, 0x0000ff80};
        }

        const static UnicodeSet nbat_Ext{const_cast<UnicodeSet::run_t *>(__nbat_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__nbat_Ext_quads), 2, 0};

        /** Code Point Ranges for Palm
        [10860, 1087f]**/

        namespace {
        const static UnicodeSet::run_t __palm_Ext_runs[] = {
        {Empty, 2115}, {Full, 1}, {Empty, 32700}};
        const static UnicodeSet::bitquad_t * const __palm_Ext_quads = nullptr;
        }

        const static UnicodeSet palm_Ext{const_cast<UnicodeSet::run_t *>(__palm_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__palm_Ext_quads), 0, 0};

        /** Code Point Ranges for Pauc
        [11ac0, 11af8]**/

        namespace {
        const static UnicodeSet::run_t __pauc_Ext_runs[] = {
        {Empty, 2262}, {Full, 1}, {Mixed, 1}, {Empty, 32552}};
        const static UnicodeSet::bitquad_t  __pauc_Ext_quads[] = {
        0x01ffffff};
        }

        const static UnicodeSet pauc_Ext{const_cast<UnicodeSet::run_t *>(__pauc_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__pauc_Ext_quads), 1, 0};

        /** Code Point Ranges for Perm
        [0483, 0483], [10350, 1037a]**/

        namespace {
        const static UnicodeSet::run_t __perm_Ext_runs[] = {
        {Empty, 36}, {Mixed, 1}, {Empty, 2037}, {Mixed, 2}, {Empty, 32740}};
        const static UnicodeSet::bitquad_t  __perm_Ext_quads[] = {
        0x00000008, 0xffff0000, 0x07ffffff};
        }

        const static UnicodeSet perm_Ext{const_cast<UnicodeSet::run_t *>(__perm_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__perm_Ext_quads), 3, 0};

        /** Code Point Ranges for Phlp
        [0640, 0640], [10b80, 10b91], [10b99, 10b9c], [10ba9, 10baf]**/

        namespace {
        const static UnicodeSet::run_t __phlp_Ext_runs[] = {
        {Empty, 50}, {Mixed, 1}, {Empty, 2089}, {Mixed, 2}, {Empty, 32674}};
        const static UnicodeSet::bitquad_t  __phlp_Ext_quads[] = {
        0x00000001, 0x1e03ffff, 0x0000fe00};
        }

        const static UnicodeSet phlp_Ext{const_cast<UnicodeSet::run_t *>(__phlp_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__phlp_Ext_quads), 3, 0};

        /** Code Point Ranges for Sidd
        [11580, 115b5], [115b8, 115dd]**/

        namespace {
        const static UnicodeSet::run_t __sidd_Ext_runs[] = {
        {Empty, 2220}, {Full, 1}, {Mixed, 2}, {Empty, 32593}};
        const static UnicodeSet::bitquad_t  __sidd_Ext_quads[] = {
        0xff3fffff, 0x3fffffff};
        }

        const static UnicodeSet sidd_Ext{const_cast<UnicodeSet::run_t *>(__sidd_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__sidd_Ext_quads), 2, 0};

        /** Code Point Ranges for Sind
        [0964, 0965], [a830, a839], [112b0, 112ea], [112f0, 112f9]**/

        namespace {
        const static UnicodeSet::run_t __sind_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 1269}, {Mixed, 1}, {Empty, 851},
        {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 32616}};
        const static UnicodeSet::bitquad_t  __sind_Ext_quads[] = {
        0x00000030, 0x03ff0000, 0xffff0000, 0x03ff07ff};
        }

        const static UnicodeSet sind_Ext{const_cast<UnicodeSet::run_t *>(__sind_Ext_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__sind_Ext_quads), 4, 0};

        /** Code Point Ranges for Tirh
        [0951, 0952], [0964, 0965], [1cf2, 1cf2], [a830, a839],
        [11480, 114c7], [114d0, 114d9]**/

        namespace {
        const static UnicodeSet::run_t __tirh_Ext_runs[] = {
        {Empty, 74}, {Mixed, 2}, {Empty, 155}, {Mixed, 1}, {Empty, 1113},
        {Mixed, 1}, {Empty, 866}, {Full, 2}, {Mixed, 1}, {Empty, 32601}};
        const static UnicodeSet::bitquad_t  __tirh_Ext_quads[] = {
        0x00060000, 0x00000030, 0x00040000, 0x03ff0000, 0x03ff00ff};
        }

        const static UnicodeSet tirh_Ext{const_cast<UnicodeSet::run_t *>(__tirh_Ext_runs), 10, 0, const_cast<UnicodeSet::bitquad_t *>(__tirh_Ext_quads), 5, 0};

        /** Code Point Ranges for Wara
        [118a0, 118f2], [118ff, 118ff]**/

        namespace {
        const static UnicodeSet::run_t __wara_Ext_runs[] = {
        {Empty, 2245}, {Full, 2}, {Mixed, 1}, {Empty, 32568}};
        const static UnicodeSet::bitquad_t  __wara_Ext_quads[] = {
        0x8007ffff};
        }

        const static UnicodeSet wara_Ext{const_cast<UnicodeSet::run_t *>(__wara_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__wara_Ext_quads), 1, 0};

        /** Code Point Ranges for Ahom
        [11700, 1171a], [1171d, 1172b], [11730, 1173f]**/

        namespace {
        const static UnicodeSet::run_t __ahom_Ext_runs[] = {
        {Empty, 2232}, {Mixed, 2}, {Empty, 32582}};
        const static UnicodeSet::bitquad_t  __ahom_Ext_quads[] = {
        0xe7ffffff, 0xffff0fff};
        }

        const static UnicodeSet ahom_Ext{const_cast<UnicodeSet::run_t *>(__ahom_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ahom_Ext_quads), 2, 0};

        /** Code Point Ranges for Hluw
        [14400, 14646]**/

        namespace {
        const static UnicodeSet::run_t __hluw_Ext_runs[] = {
        {Empty, 2592}, {Full, 18}, {Mixed, 1}, {Empty, 32205}};
        const static UnicodeSet::bitquad_t  __hluw_Ext_quads[] = {
        0x0000007f};
        }

        const static UnicodeSet hluw_Ext{const_cast<UnicodeSet::run_t *>(__hluw_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__hluw_Ext_quads), 1, 0};

        /** Code Point Ranges for Hatr
        [108e0, 108f2], [108f4, 108f5], [108fb, 108ff]**/

        namespace {
        const static UnicodeSet::run_t __hatr_Ext_runs[] = {
        {Empty, 2119}, {Mixed, 1}, {Empty, 32696}};
        const static UnicodeSet::bitquad_t  __hatr_Ext_quads[] = {
        0xf837ffff};
        }

        const static UnicodeSet hatr_Ext{const_cast<UnicodeSet::run_t *>(__hatr_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__hatr_Ext_quads), 1, 0};

        /** Code Point Ranges for Mult
        [0a66, 0a6f], [11280, 11286], [11288, 11288], [1128a, 1128d],
        [1128f, 1129d], [1129f, 112a9]**/

        namespace {
        const static UnicodeSet::run_t __mult_Ext_runs[] = {
        {Empty, 83}, {Mixed, 1}, {Empty, 2112}, {Mixed, 2}, {Empty, 32618}};
        const static UnicodeSet::bitquad_t  __mult_Ext_quads[] = {
        0x0000ffc0, 0xbfffbd7f, 0x000003ff};
        }

        const static UnicodeSet mult_Ext{const_cast<UnicodeSet::run_t *>(__mult_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__mult_Ext_quads), 3, 0};

        /** Code Point Ranges for Hung
        [10c80, 10cb2], [10cc0, 10cf2], [10cfa, 10cff]**/

        namespace {
        const static UnicodeSet::run_t __hung_Ext_runs[] = {
        {Empty, 2148}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 1},
        {Empty, 32664}};
        const static UnicodeSet::bitquad_t  __hung_Ext_quads[] = {
        0x0007ffff, 0xfc07ffff};
        }

        const static UnicodeSet hung_Ext{const_cast<UnicodeSet::run_t *>(__hung_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__hung_Ext_quads), 2, 0};

        /** Code Point Ranges for Sgnw
        [1d800, 1da8b], [1da9b, 1da9f], [1daa1, 1daaf]**/

        namespace {
        const static UnicodeSet::run_t __sgnw_Ext_runs[] = {
        {Empty, 3776}, {Full, 20}, {Mixed, 2}, {Empty, 31018}};
        const static UnicodeSet::bitquad_t  __sgnw_Ext_quads[] = {
        0xf8000fff, 0x0000fffe};
        }

        const static UnicodeSet sgnw_Ext{const_cast<UnicodeSet::run_t *>(__sgnw_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__sgnw_Ext_quads), 2, 0};

        /** Code Point Ranges for Adlm
        [0640, 0640], [1e900, 1e94b], [1e950, 1e959], [1e95e, 1e95f]**/

        namespace {
        const static UnicodeSet::run_t __adlm_Ext_runs[] = {
        {Empty, 50}, {Mixed, 1}, {Empty, 3861}, {Full, 2}, {Mixed, 1},
        {Empty, 30901}};
        const static UnicodeSet::bitquad_t  __adlm_Ext_quads[] = {
        0x00000001, 0xc3ff0fff};
        }

        const static UnicodeSet adlm_Ext{const_cast<UnicodeSet::run_t *>(__adlm_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__adlm_Ext_quads), 2, 0};

        /** Code Point Ranges for Bhks
        [11c00, 11c08], [11c0a, 11c36], [11c38, 11c45], [11c50, 11c6c]**/

        namespace {
        const static UnicodeSet::run_t __bhks_Ext_runs[] = {
        {Empty, 2272}, {Mixed, 4}, {Empty, 32540}};
        const static UnicodeSet::bitquad_t  __bhks_Ext_quads[] = {
        0xfffffdff, 0xff7fffff, 0xffff003f, 0x00001fff};
        }

        const static UnicodeSet bhks_Ext{const_cast<UnicodeSet::run_t *>(__bhks_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__bhks_Ext_quads), 4, 0};

        /** Code Point Ranges for Marc
        [11c70, 11c8f], [11c92, 11ca7], [11ca9, 11cb6]**/

        namespace {
        const static UnicodeSet::run_t __marc_Ext_runs[] = {
        {Empty, 2275}, {Mixed, 3}, {Empty, 32538}};
        const static UnicodeSet::bitquad_t  __marc_Ext_quads[] = {
        0xffff0000, 0xfffcffff, 0x007ffeff};
        }

        const static UnicodeSet marc_Ext{const_cast<UnicodeSet::run_t *>(__marc_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__marc_Ext_quads), 3, 0};

        /** Code Point Ranges for Newa
        [11400, 1145b], [1145d, 11461]**/

        namespace {
        const static UnicodeSet::run_t __newa_Ext_runs[] = {
        {Empty, 2208}, {Full, 2}, {Mixed, 2}, {Empty, 32604}};
        const static UnicodeSet::bitquad_t  __newa_Ext_quads[] = {
        0xefffffff, 0x00000003};
        }

        const static UnicodeSet newa_Ext{const_cast<UnicodeSet::run_t *>(__newa_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__newa_Ext_quads), 2, 0};

        /** Code Point Ranges for Osge
        [104b0, 104d3], [104d8, 104fb]**/

        namespace {
        const static UnicodeSet::run_t __osge_Ext_runs[] = {
        {Empty, 2085}, {Mixed, 3}, {Empty, 32728}};
        const static UnicodeSet::bitquad_t  __osge_Ext_quads[] = {
        0xffff0000, 0xff0fffff, 0x0fffffff};
        }

        const static UnicodeSet osge_Ext{const_cast<UnicodeSet::run_t *>(__osge_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__osge_Ext_quads), 3, 0};

        /** Code Point Ranges for Tang
        [16fe0, 16fe0], [17000, 187f7], [18800, 18aff], [18d00, 18d08]**/

        namespace {
        const static UnicodeSet::run_t __tang_Ext_runs[] = {
        {Empty, 2943}, {Mixed, 1}, {Full, 191}, {Mixed, 1}, {Full, 24},
        {Empty, 16}, {Mixed, 1}, {Empty, 31639}};
        const static UnicodeSet::bitquad_t  __tang_Ext_quads[] = {
        0x00000001, 0x00ffffff, 0x000001ff};
        }

        const static UnicodeSet tang_Ext{const_cast<UnicodeSet::run_t *>(__tang_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__tang_Ext_quads), 3, 0};

        /** Code Point Ranges for Gonm
        [0964, 0965], [11d00, 11d06], [11d08, 11d09], [11d0b, 11d36],
        [11d3a, 11d3a], [11d3c, 11d3d], [11d3f, 11d47], [11d50, 11d59]**/

        namespace {
        const static UnicodeSet::run_t __gonm_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 2204}, {Mixed, 3}, {Empty, 32533}};
        const static UnicodeSet::bitquad_t  __gonm_Ext_quads[] = {
        0x00000030, 0xfffffb7f, 0xb47fffff, 0x03ff00ff};
        }

        const static UnicodeSet gonm_Ext{const_cast<UnicodeSet::run_t *>(__gonm_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__gonm_Ext_quads), 4, 0};

        /** Code Point Ranges for Nshu
        [16fe1, 16fe1], [1b170, 1b2fb]**/

        namespace {
        const static UnicodeSet::run_t __nshu_Ext_runs[] = {
        {Empty, 2943}, {Mixed, 1}, {Empty, 523}, {Mixed, 1}, {Full, 11},
        {Mixed, 1}, {Empty, 31336}};
        const static UnicodeSet::bitquad_t  __nshu_Ext_quads[] = {
        0x00000002, 0xffff0000, 0x0fffffff};
        }

        const static UnicodeSet nshu_Ext{const_cast<UnicodeSet::run_t *>(__nshu_Ext_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__nshu_Ext_quads), 3, 0};

        /** Code Point Ranges for Soyo
        [11a50, 11aa2]**/

        namespace {
        const static UnicodeSet::run_t __soyo_Ext_runs[] = {
        {Empty, 2258}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Empty, 32554}};
        const static UnicodeSet::bitquad_t  __soyo_Ext_quads[] = {
        0xffff0000, 0x00000007};
        }

        const static UnicodeSet soyo_Ext{const_cast<UnicodeSet::run_t *>(__soyo_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__soyo_Ext_quads), 2, 0};

        /** Code Point Ranges for Zanb
        [11a00, 11a47]**/

        namespace {
        const static UnicodeSet::run_t __zanb_Ext_runs[] = {
        {Empty, 2256}, {Full, 2}, {Mixed, 1}, {Empty, 32557}};
        const static UnicodeSet::bitquad_t  __zanb_Ext_quads[] = {
        0x000000ff};
        }

        const static UnicodeSet zanb_Ext{const_cast<UnicodeSet::run_t *>(__zanb_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__zanb_Ext_quads), 1, 0};

        /** Code Point Ranges for Dogr
        [0964, 096f], [a830, a839], [11800, 1183b]**/

        namespace {
        const static UnicodeSet::run_t __dogr_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 1269}, {Mixed, 1}, {Empty, 894},
        {Full, 1}, {Mixed, 1}, {Empty, 32574}};
        const static UnicodeSet::bitquad_t  __dogr_Ext_quads[] = {
        0x0000fff0, 0x03ff0000, 0x0fffffff};
        }

        const static UnicodeSet dogr_Ext{const_cast<UnicodeSet::run_t *>(__dogr_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__dogr_Ext_quads), 3, 0};

        /** Code Point Ranges for Gong
        [0964, 0965], [11d60, 11d65], [11d67, 11d68], [11d6a, 11d8e],
        [11d90, 11d91], [11d93, 11d98], [11da0, 11da9]**/

        namespace {
        const static UnicodeSet::run_t __gong_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 2207}, {Mixed, 3}, {Empty, 32530}};
        const static UnicodeSet::bitquad_t  __gong_Ext_quads[] = {
        0x00000030, 0xfffffdbf, 0x01fb7fff, 0x000003ff};
        }

        const static UnicodeSet gong_Ext{const_cast<UnicodeSet::run_t *>(__gong_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__gong_Ext_quads), 4, 0};

        /** Code Point Ranges for Maka
        [11ee0, 11ef8]**/

        namespace {
        const static UnicodeSet::run_t __maka_Ext_runs[] = {
        {Empty, 2295}, {Mixed, 1}, {Empty, 32520}};
        const static UnicodeSet::bitquad_t  __maka_Ext_quads[] = {
        0x01ffffff};
        }

        const static UnicodeSet maka_Ext{const_cast<UnicodeSet::run_t *>(__maka_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__maka_Ext_quads), 1, 0};

        /** Code Point Ranges for Medf
        [16e40, 16e9a]**/

        namespace {
        const static UnicodeSet::run_t __medf_Ext_runs[] = {
        {Empty, 2930}, {Full, 2}, {Mixed, 1}, {Empty, 31883}};
        const static UnicodeSet::bitquad_t  __medf_Ext_quads[] = {
        0x07ffffff};
        }

        const static UnicodeSet medf_Ext{const_cast<UnicodeSet::run_t *>(__medf_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__medf_Ext_quads), 1, 0};

        /** Code Point Ranges for Rohg
        [060c, 060c], [061b, 061b], [061f, 061f], [0640, 0640],
        [06d4, 06d4], [10d00, 10d27], [10d30, 10d39]**/

        namespace {
        const static UnicodeSet::run_t __rohg_Ext_runs[] = {
        {Empty, 48}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 3},
        {Mixed, 1}, {Empty, 2097}, {Full, 1}, {Mixed, 1}, {Empty, 32662}};
        const static UnicodeSet::bitquad_t  __rohg_Ext_quads[] = {
        0x88001000, 0x00000001, 0x00100000, 0x03ff00ff};
        }

        const static UnicodeSet rohg_Ext{const_cast<UnicodeSet::run_t *>(__rohg_Ext_runs), 10, 0, const_cast<UnicodeSet::bitquad_t *>(__rohg_Ext_quads), 4, 0};

        /** Code Point Ranges for Sogd
        [0640, 0640], [10f30, 10f59]**/

        namespace {
        const static UnicodeSet::run_t __sogd_Ext_runs[] = {
        {Empty, 50}, {Mixed, 1}, {Empty, 2118}, {Mixed, 2}, {Empty, 32645}};
        const static UnicodeSet::bitquad_t  __sogd_Ext_quads[] = {
        0x00000001, 0xffff0000, 0x03ffffff};
        }

        const static UnicodeSet sogd_Ext{const_cast<UnicodeSet::run_t *>(__sogd_Ext_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__sogd_Ext_quads), 3, 0};

        /** Code Point Ranges for Sogo
        [10f00, 10f27]**/

        namespace {
        const static UnicodeSet::run_t __sogo_Ext_runs[] = {
        {Empty, 2168}, {Full, 1}, {Mixed, 1}, {Empty, 32646}};
        const static UnicodeSet::bitquad_t  __sogo_Ext_quads[] = {
        0x000000ff};
        }

        const static UnicodeSet sogo_Ext{const_cast<UnicodeSet::run_t *>(__sogo_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__sogo_Ext_quads), 1, 0};

        /** Code Point Ranges for Elym
        [10fe0, 10ff6]**/

        namespace {
        const static UnicodeSet::run_t __elym_Ext_runs[] = {
        {Empty, 2175}, {Mixed, 1}, {Empty, 32640}};
        const static UnicodeSet::bitquad_t  __elym_Ext_quads[] = {
        0x007fffff};
        }

        const static UnicodeSet elym_Ext{const_cast<UnicodeSet::run_t *>(__elym_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__elym_Ext_quads), 1, 0};

        /** Code Point Ranges for Nand
        [0964, 0965], [0ce6, 0cef], [1ce9, 1ce9], [1cf2, 1cf2],
        [1cfa, 1cfa], [a830, a835], [119a0, 119a7], [119aa, 119d7],
        [119da, 119e4]**/

        namespace {
        const static UnicodeSet::run_t __nand_Ext_runs[] = {
        {Empty, 75}, {Mixed, 1}, {Empty, 27}, {Mixed, 1}, {Empty, 127},
        {Mixed, 1}, {Empty, 1113}, {Mixed, 1}, {Empty, 907}, {Mixed, 3},
        {Empty, 32560}};
        const static UnicodeSet::bitquad_t  __nand_Ext_quads[] = {
        0x00000030, 0x0000ffc0, 0x04040200, 0x003f0000, 0xfffffcff,
        0xfcffffff, 0x0000001f};
        }

        const static UnicodeSet nand_Ext{const_cast<UnicodeSet::run_t *>(__nand_Ext_runs), 11, 0, const_cast<UnicodeSet::bitquad_t *>(__nand_Ext_quads), 7, 0};

        /** Code Point Ranges for Hmnp
        [1e100, 1e12c], [1e130, 1e13d], [1e140, 1e149], [1e14e, 1e14f]**/

        namespace {
        const static UnicodeSet::run_t __hmnp_Ext_runs[] = {
        {Empty, 3848}, {Full, 1}, {Mixed, 2}, {Empty, 30965}};
        const static UnicodeSet::bitquad_t  __hmnp_Ext_quads[] = {
        0x3fff1fff, 0x0000c3ff};
        }

        const static UnicodeSet hmnp_Ext{const_cast<UnicodeSet::run_t *>(__hmnp_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__hmnp_Ext_quads), 2, 0};

        /** Code Point Ranges for Wcho
        [1e2c0, 1e2f9], [1e2ff, 1e2ff]**/

        namespace {
        const static UnicodeSet::run_t __wcho_Ext_runs[] = {
        {Empty, 3862}, {Full, 1}, {Mixed, 1}, {Empty, 30952}};
        const static UnicodeSet::bitquad_t  __wcho_Ext_quads[] = {
        0x83ffffff};
        }

        const static UnicodeSet wcho_Ext{const_cast<UnicodeSet::run_t *>(__wcho_Ext_runs), 4, 0, const_cast<UnicodeSet::bitquad_t *>(__wcho_Ext_quads), 1, 0};

        /** Code Point Ranges for Chrs
        [10fb0, 10fcb]**/

        namespace {
        const static UnicodeSet::run_t __chrs_Ext_runs[] = {
        {Empty, 2173}, {Mixed, 2}, {Empty, 32641}};
        const static UnicodeSet::bitquad_t  __chrs_Ext_quads[] = {
        0xffff0000, 0x00000fff};
        }

        const static UnicodeSet chrs_Ext{const_cast<UnicodeSet::run_t *>(__chrs_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__chrs_Ext_quads), 2, 0};

        /** Code Point Ranges for Diak
        [11900, 11906], [11909, 11909], [1190c, 11913], [11915, 11916],
        [11918, 11935], [11937, 11938], [1193b, 11946], [11950, 11959]**/

        namespace {
        const static UnicodeSet::run_t __diak_Ext_runs[] = {
        {Empty, 2248}, {Mixed, 3}, {Empty, 32565}};
        const static UnicodeSet::bitquad_t  __diak_Ext_quads[] = {
        0xff6ff27f, 0xf9bfffff, 0x03ff007f};
        }

        const static UnicodeSet diak_Ext{const_cast<UnicodeSet::run_t *>(__diak_Ext_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__diak_Ext_quads), 3, 0};

        /** Code Point Ranges for Kits
        [16fe4, 16fe4], [18b00, 18cd5]**/

        namespace {
        const static UnicodeSet::run_t __kits_Ext_runs[] = {
        {Empty, 2943}, {Mixed, 1}, {Empty, 216}, {Full, 14}, {Mixed, 1},
        {Empty, 31641}};
        const static UnicodeSet::bitquad_t  __kits_Ext_quads[] = {
        0x00000010, 0x003fffff};
        }

        const static UnicodeSet kits_Ext{const_cast<UnicodeSet::run_t *>(__kits_Ext_runs), 6, 0, const_cast<UnicodeSet::bitquad_t *>(__kits_Ext_quads), 2, 0};

        /** Code Point Ranges for Yezi
        [060c, 060c], [061b, 061b], [061f, 061f], [0660, 0669],
        [10e80, 10ea9], [10eab, 10ead], [10eb0, 10eb1]**/

        namespace {
        const static UnicodeSet::run_t __yezi_Ext_runs[] = {
        {Empty, 48}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 2112},
        {Full, 1}, {Mixed, 1}, {Empty, 32650}};
        const static UnicodeSet::bitquad_t  __yezi_Ext_quads[] = {
        0x88001000, 0x000003ff, 0x00033bff};
        }

        const static UnicodeSet yezi_Ext{const_cast<UnicodeSet::run_t *>(__yezi_Ext_runs), 8, 0, const_cast<UnicodeSet::bitquad_t *>(__yezi_Ext_quads), 3, 0};

        /** Code Point Ranges for Hrkt
        **/

        namespace {
        const static UnicodeSet::run_t __hrkt_Ext_runs[] = {
        {Empty, 34816}};
        const static UnicodeSet::bitquad_t * const __hrkt_Ext_quads = nullptr;
        }

        const static UnicodeSet hrkt_Ext{const_cast<UnicodeSet::run_t *>(__hrkt_Ext_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__hrkt_Ext_quads), 0, 0};

        static ExtensionPropertyObject property_object
       {scx,
        UCD::sc,
       {&zzzz_Ext, &zyyy_Ext, &latn_Ext, &grek_Ext, &cyrl_Ext, &armn_Ext,
        &hebr_Ext, &arab_Ext, &syrc_Ext, &thaa_Ext, &deva_Ext, &beng_Ext,
        &guru_Ext, &gujr_Ext, &orya_Ext, &taml_Ext, &telu_Ext, &knda_Ext,
        &mlym_Ext, &sinh_Ext, &thai_Ext, &laoo_Ext, &tibt_Ext, &mymr_Ext,
        &geor_Ext, &hang_Ext, &ethi_Ext, &cher_Ext, &cans_Ext, &ogam_Ext,
        &runr_Ext, &khmr_Ext, &mong_Ext, &hira_Ext, &kana_Ext, &bopo_Ext,
        &hani_Ext, &yiii_Ext, &ital_Ext, &goth_Ext, &dsrt_Ext, &zinh_Ext,
        &tglg_Ext, &hano_Ext, &buhd_Ext, &tagb_Ext, &limb_Ext, &tale_Ext,
        &linb_Ext, &ugar_Ext, &shaw_Ext, &osma_Ext, &cprt_Ext, &brai_Ext,
        &bugi_Ext, &copt_Ext, &talu_Ext, &glag_Ext, &tfng_Ext, &sylo_Ext,
        &xpeo_Ext, &khar_Ext, &bali_Ext, &xsux_Ext, &phnx_Ext, &phag_Ext,
        &nkoo_Ext, &sund_Ext, &lepc_Ext, &olck_Ext, &vaii_Ext, &saur_Ext,
        &kali_Ext, &rjng_Ext, &lyci_Ext, &cari_Ext, &lydi_Ext, &cham_Ext,
        &lana_Ext, &tavt_Ext, &avst_Ext, &egyp_Ext, &samr_Ext, &lisu_Ext,
        &bamu_Ext, &java_Ext, &mtei_Ext, &armi_Ext, &sarb_Ext, &prti_Ext,
        &phli_Ext, &orkh_Ext, &kthi_Ext, &batk_Ext, &brah_Ext, &mand_Ext,
        &cakm_Ext, &merc_Ext, &mero_Ext, &plrd_Ext, &shrd_Ext, &sora_Ext,
        &takr_Ext, &aghb_Ext, &bass_Ext, &dupl_Ext, &elba_Ext, &gran_Ext,
        &hmng_Ext, &khoj_Ext, &lina_Ext, &mahj_Ext, &mani_Ext, &mend_Ext,
        &modi_Ext, &mroo_Ext, &narb_Ext, &nbat_Ext, &palm_Ext, &pauc_Ext,
        &perm_Ext, &phlp_Ext, &sidd_Ext, &sind_Ext, &tirh_Ext, &wara_Ext,
        &ahom_Ext, &hluw_Ext, &hatr_Ext, &mult_Ext, &hung_Ext, &sgnw_Ext,
        &adlm_Ext, &bhks_Ext, &marc_Ext, &newa_Ext, &osge_Ext, &tang_Ext,
        &gonm_Ext, &nshu_Ext, &soyo_Ext, &zanb_Ext, &dogr_Ext, &gong_Ext,
        &maka_Ext, &medf_Ext, &rohg_Ext, &sogd_Ext, &sogo_Ext, &elym_Ext,
        &nand_Ext, &hmnp_Ext, &wcho_Ext, &chrs_Ext, &diak_Ext, &kits_Ext,
        &yezi_Ext, &hrkt_Ext
        }};
    }

PropertyObject * get_SCX_PropertyObject() {  return & SCX_ns::property_object; }
}
