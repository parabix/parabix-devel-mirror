
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  PropertyAliases
 */

#include <string>
#include <unicode/data/PropertyAliases.h>
#include <unordered_map>
#include <vector>

namespace UCD {
    const static std::vector<std::string> property_enum_name = {
        "cjkAccountingNumeric", "cjkOtherNumeric", "cjkPrimaryNumeric",
        "nv", "cf", "cjkCompatibilityVariant", "dm", "FC_NFKC", "lc",
        "NFKC_CF", "scf", "slc", "stc", "suc", "tc", "uc", "bmg", "bpb",
        "cjkIICore", "cjkIRG_GSource", "cjkIRG_HSource", "cjkIRG_JSource",
        "cjkIRG_KPSource", "cjkIRG_KSource", "cjkIRG_MSource",
        "cjkIRG_SSource", "cjkIRG_TSource", "cjkIRG_UKSource",
        "cjkIRG_USource", "cjkIRG_VSource", "cjkRSUnicode", "EqUIdeo",
        "isc", "JSN", "na", "na1", "Name_Alias", "scx", "age", "blk", "sc",
        "bc", "bpt", "ccc", "dt", "ea", "gc", "GCB", "hst", "InPC", "InSC",
        "jg", "jt", "lb", "NFC_QC", "NFD_QC", "NFKC_QC", "NFKD_QC", "nt",
        "SB", "vo", "WB", "AHex", "Alpha", "Bidi_C", "Bidi_M", "Cased",
        "CE", "CI", "Comp_Ex", "CWCF", "CWCM", "CWKCF", "CWL", "CWT", "CWU",
        "Dash", "Dep", "DI", "Dia", "EBase", "EComp", "EMod", "Emoji",
        "EPres", "Ext", "ExtPict", "Gr_Base", "Gr_Ext", "Gr_Link", "Hex",
        "Hyphen", "IDC", "Ideo", "IDS", "IDSB", "IDST", "Join_C", "LOE",
        "Lower", "Math", "NChar", "OAlpha", "ODI", "OGr_Ext", "OIDC",
        "OIDS", "OLower", "OMath", "OUpper", "Pat_Syn", "Pat_WS", "PCM",
        "QMark", "Radical", "RI", "SD", "STerm", "Term", "UIdeo", "Upper",
        "VS", "WSpace", "XIDC", "XIDS", "XO_NFC", "XO_NFD", "XO_NFKC",
        "XO_NFKD", "emoji", "emojipresentation", "emojimodifier",
        "emojimodifierbase", "emojicomponent", "extendedpictographic",
        "alnum", "xdigit", "blank", "print", "word", "graph", "g", "w"};
    const static std::vector<std::string> property_full_name = {
        "kAccountingNumeric", "kOtherNumeric", "kPrimaryNumeric",
        "Numeric_Value", "Case_Folding", "kCompatibilityVariant",
        "Decomposition_Mapping", "FC_NFKC_Closure", "Lowercase_Mapping",
        "NFKC_Casefold", "Simple_Case_Folding", "Simple_Lowercase_Mapping",
        "Simple_Titlecase_Mapping", "Simple_Uppercase_Mapping",
        "Titlecase_Mapping", "Uppercase_Mapping", "Bidi_Mirroring_Glyph",
        "Bidi_Paired_Bracket", "kIICore", "kIRG_GSource", "kIRG_HSource",
        "kIRG_JSource", "kIRG_KPSource", "kIRG_KSource", "kIRG_MSource",
        "kIRG_SSource", "kIRG_TSource", "kIRG_UKSource", "kIRG_USource",
        "kIRG_VSource", "kRSUnicode", "Equivalent_Unified_Ideograph",
        "ISO_Comment", "Jamo_Short_Name", "Name", "Unicode_1_Name",
        "Name_Alias", "Script_Extensions", "Age", "Block", "Script",
        "Bidi_Class", "Bidi_Paired_Bracket_Type",
        "Canonical_Combining_Class", "Decomposition_Type",
        "East_Asian_Width", "General_Category", "Grapheme_Cluster_Break",
        "Hangul_Syllable_Type", "Indic_Positional_Category",
        "Indic_Syllabic_Category", "Joining_Group", "Joining_Type",
        "Line_Break", "NFC_Quick_Check", "NFD_Quick_Check",
        "NFKC_Quick_Check", "NFKD_Quick_Check", "Numeric_Type",
        "Sentence_Break", "Vertical_Orientation", "Word_Break",
        "ASCII_Hex_Digit", "Alphabetic", "Bidi_Control", "Bidi_Mirrored",
        "Cased", "Composition_Exclusion", "Case_Ignorable",
        "Full_Composition_Exclusion", "Changes_When_Casefolded",
        "Changes_When_Casemapped", "Changes_When_NFKC_Casefolded",
        "Changes_When_Lowercased", "Changes_When_Titlecased",
        "Changes_When_Uppercased", "Dash", "Deprecated",
        "Default_Ignorable_Code_Point", "Diacritic", "Emoji_Modifier_Base",
        "Emoji_Component", "Emoji_Modifier", "Emoji", "Emoji_Presentation",
        "Extender", "Extended_Pictographic", "Grapheme_Base",
        "Grapheme_Extend", "Grapheme_Link", "Hex_Digit", "Hyphen",
        "ID_Continue", "Ideographic", "ID_Start", "IDS_Binary_Operator",
        "IDS_Trinary_Operator", "Join_Control", "Logical_Order_Exception",
        "Lowercase", "Math", "Noncharacter_Code_Point", "Other_Alphabetic",
        "Other_Default_Ignorable_Code_Point", "Other_Grapheme_Extend",
        "Other_ID_Continue", "Other_ID_Start", "Other_Lowercase",
        "Other_Math", "Other_Uppercase", "Pattern_Syntax",
        "Pattern_White_Space", "Prepended_Concatenation_Mark",
        "Quotation_Mark", "Radical", "Regional_Indicator", "Soft_Dotted",
        "Sentence_Terminal", "Terminal_Punctuation", "Unified_Ideograph",
        "Uppercase", "Variation_Selector", "White_Space", "XID_Continue",
        "XID_Start", "Expands_On_NFC", "Expands_On_NFD", "Expands_On_NFKC",
        "Expands_On_NFKD", "Emoji", "Emoji_Presentation", "Emoji_Modifier",
        "Emoji_Modifier_Base", "Emoji_Component", "Extended_Pictographic",
        "alnum", "xdigit", "blank", "print", "word", "graph", "g", "w"};
    static std::unordered_map<std::string, int> alias_map {{
        {"age", age}, {"ahex", AHex}, {"alnum", alnum}, {"alpha", Alpha},
        {"alphabetic", Alpha}, {"asciihexdigit", AHex}, {"bc", bc},
        {"bidic", Bidi_C}, {"bidiclass", bc}, {"bidicontrol", Bidi_C},
        {"bidim", Bidi_M}, {"bidimirrored", Bidi_M},
        {"bidimirroringglyph", bmg}, {"bidipairedbracket", bpb},
        {"bidipairedbrackettype", bpt}, {"blank", blank}, {"blk", blk},
        {"block", blk}, {"bmg", bmg}, {"bpb", bpb}, {"bpt", bpt},
        {"canonicalcombiningclass", ccc}, {"cased", Cased},
        {"casefolding", cf}, {"caseignorable", CI}, {"ccc", ccc},
        {"ce", CE}, {"cf", cf}, {"changeswhencasefolded", CWCF},
        {"changeswhencasemapped", CWCM}, {"changeswhenlowercased", CWL},
        {"changeswhennfkccasefolded", CWKCF},
        {"changeswhentitlecased", CWT}, {"changeswhenuppercased", CWU},
        {"ci", CI}, {"cjkaccountingnumeric", cjkAccountingNumeric},
        {"cjkcompatibilityvariant", cjkCompatibilityVariant},
        {"cjkiicore", cjkIICore}, {"cjkirggsource", cjkIRG_GSource},
        {"cjkirghsource", cjkIRG_HSource},
        {"cjkirgjsource", cjkIRG_JSource},
        {"cjkirgkpsource", cjkIRG_KPSource},
        {"cjkirgksource", cjkIRG_KSource},
        {"cjkirgmsource", cjkIRG_MSource},
        {"cjkirgssource", cjkIRG_SSource},
        {"cjkirgtsource", cjkIRG_TSource},
        {"cjkirguksource", cjkIRG_UKSource},
        {"cjkirgusource", cjkIRG_USource},
        {"cjkirgvsource", cjkIRG_VSource},
        {"cjkothernumeric", cjkOtherNumeric},
        {"cjkprimarynumeric", cjkPrimaryNumeric},
        {"cjkrsunicode", cjkRSUnicode}, {"compex", Comp_Ex},
        {"compositionexclusion", CE}, {"cwcf", CWCF}, {"cwcm", CWCM},
        {"cwkcf", CWKCF}, {"cwl", CWL}, {"cwt", CWT}, {"cwu", CWU},
        {"dash", Dash}, {"decompositionmapping", dm},
        {"decompositiontype", dt}, {"defaultignorablecodepoint", DI},
        {"dep", Dep}, {"deprecated", Dep}, {"di", DI}, {"dia", Dia},
        {"diacritic", Dia}, {"dm", dm}, {"dt", dt}, {"ea", ea},
        {"eastasianwidth", ea}, {"ebase", EBase}, {"ecomp", EComp},
        {"emod", EMod}, {"emoji", emoji},
        {"emojicomponent", emojicomponent},
        {"emojimodifier", emojimodifier},
        {"emojimodifierbase", emojimodifierbase},
        {"emojipresentation", emojipresentation}, {"epres", EPres},
        {"equideo", EqUIdeo}, {"equivalentunifiedideograph", EqUIdeo},
        {"expandsonnfc", XO_NFC}, {"expandsonnfd", XO_NFD},
        {"expandsonnfkc", XO_NFKC}, {"expandsonnfkd", XO_NFKD},
        {"ext", Ext}, {"extendedpictographic", extendedpictographic},
        {"extender", Ext}, {"extpict", ExtPict}, {"fcnfkc", FC_NFKC},
        {"fcnfkcclosure", FC_NFKC}, {"fullcompositionexclusion", Comp_Ex},
        {"g", g}, {"gc", gc}, {"gcb", GCB}, {"generalcategory", gc},
        {"graph", graph}, {"graphemebase", Gr_Base},
        {"graphemeclusterbreak", GCB}, {"graphemeextend", Gr_Ext},
        {"graphemelink", Gr_Link}, {"grbase", Gr_Base}, {"grext", Gr_Ext},
        {"grlink", Gr_Link}, {"hangulsyllabletype", hst}, {"hex", Hex},
        {"hexdigit", Hex}, {"hst", hst}, {"hyphen", Hyphen}, {"idc", IDC},
        {"idcontinue", IDC}, {"ideo", Ideo}, {"ideographic", Ideo},
        {"ids", IDS}, {"idsb", IDSB}, {"idsbinaryoperator", IDSB},
        {"idst", IDST}, {"idstart", IDS}, {"idstrinaryoperator", IDST},
        {"indicpositionalcategory", InPC}, {"indicsyllabiccategory", InSC},
        {"inpc", InPC}, {"insc", InSC}, {"isc", isc}, {"isocomment", isc},
        {"jamoshortname", JSN}, {"jg", jg}, {"joinc", Join_C},
        {"joincontrol", Join_C}, {"joininggroup", jg}, {"joiningtype", jt},
        {"jsn", JSN}, {"jt", jt},
        {"kaccountingnumeric", cjkAccountingNumeric},
        {"kcompatibilityvariant", cjkCompatibilityVariant},
        {"kiicore", cjkIICore}, {"kirggsource", cjkIRG_GSource},
        {"kirghsource", cjkIRG_HSource}, {"kirgjsource", cjkIRG_JSource},
        {"kirgkpsource", cjkIRG_KPSource}, {"kirgksource", cjkIRG_KSource},
        {"kirgmsource", cjkIRG_MSource}, {"kirgssource", cjkIRG_SSource},
        {"kirgtsource", cjkIRG_TSource}, {"kirguksource", cjkIRG_UKSource},
        {"kirgusource", cjkIRG_USource}, {"kirgvsource", cjkIRG_VSource},
        {"kothernumeric", cjkOtherNumeric},
        {"kprimarynumeric", cjkPrimaryNumeric},
        {"krsunicode", cjkRSUnicode}, {"lb", lb}, {"lc", lc},
        {"linebreak", lb}, {"loe", LOE}, {"logicalorderexception", LOE},
        {"lower", Lower}, {"lowercase", Lower}, {"lowercasemapping", lc},
        {"math", Math}, {"na", na}, {"na1", na1}, {"name", na},
        {"namealias", Name_Alias}, {"nchar", NChar}, {"nfcqc", NFC_QC},
        {"nfcquickcheck", NFC_QC}, {"nfdqc", NFD_QC},
        {"nfdquickcheck", NFD_QC}, {"nfkccasefold", NFKC_CF},
        {"nfkccf", NFKC_CF}, {"nfkcqc", NFKC_QC},
        {"nfkcquickcheck", NFKC_QC}, {"nfkdqc", NFKD_QC},
        {"nfkdquickcheck", NFKD_QC}, {"noncharactercodepoint", NChar},
        {"nt", nt}, {"numerictype", nt}, {"numericvalue", nv}, {"nv", nv},
        {"oalpha", OAlpha}, {"odi", ODI}, {"ogrext", OGr_Ext},
        {"oidc", OIDC}, {"oids", OIDS}, {"olower", OLower},
        {"omath", OMath}, {"otheralphabetic", OAlpha},
        {"otherdefaultignorablecodepoint", ODI},
        {"othergraphemeextend", OGr_Ext}, {"otheridcontinue", OIDC},
        {"otheridstart", OIDS}, {"otherlowercase", OLower},
        {"othermath", OMath}, {"otheruppercase", OUpper},
        {"oupper", OUpper}, {"patsyn", Pat_Syn}, {"patternsyntax", Pat_Syn},
        {"patternwhitespace", Pat_WS}, {"patws", Pat_WS}, {"pcm", PCM},
        {"prependedconcatenationmark", PCM}, {"print", print},
        {"qmark", QMark}, {"quotationmark", QMark}, {"radical", Radical},
        {"regionalindicator", RI}, {"ri", RI}, {"sb", SB}, {"sc", sc},
        {"scf", scf}, {"script", sc}, {"scriptextensions", scx},
        {"scx", scx}, {"sd", SD}, {"sentencebreak", SB},
        {"sentenceterminal", STerm}, {"sfc", scf},
        {"simplecasefolding", scf}, {"simplelowercasemapping", slc},
        {"simpletitlecasemapping", stc}, {"simpleuppercasemapping", suc},
        {"slc", slc}, {"softdotted", SD}, {"space", WSpace}, {"stc", stc},
        {"sterm", STerm}, {"suc", suc}, {"tc", tc}, {"term", Term},
        {"terminalpunctuation", Term}, {"titlecasemapping", tc}, {"uc", uc},
        {"uideo", UIdeo}, {"unicode1name", na1},
        {"unicoderadicalstroke", cjkRSUnicode}, {"unifiedideograph", UIdeo},
        {"upper", Upper}, {"uppercase", Upper}, {"uppercasemapping", uc},
        {"urs", cjkRSUnicode}, {"variationselector", VS},
        {"verticalorientation", vo}, {"vo", vo}, {"vs", VS}, {"w", w},
        {"wb", WB}, {"whitespace", WSpace}, {"word", word},
        {"wordbreak", WB}, {"wspace", WSpace}, {"xdigit", xdigit},
        {"xidc", XIDC}, {"xidcontinue", XIDC}, {"xids", XIDS},
        {"xidstart", XIDS}, {"xonfc", XO_NFC}, {"xonfd", XO_NFD},
        {"xonfkc", XO_NFKC}, {"xonfkd", XO_NFKD}}};
    const std::string & getPropertyEnumName(const property_t p) {
        return property_enum_name[p];
    }
    const std::string & getPropertyFullName(const property_t p) {
        return property_full_name[p];
    }
    property_t resolveProperty(std:: string & propertyIdent) {
        auto propit = alias_map.find(propertyIdent);
        if (propit == alias_map.end()) return Undefined;
        return static_cast<property_t>(propit->second);
    }
}
