
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  emoji-data
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
    namespace EMOJI_ns {
        /** Code Point Ranges for emoji
        [0023, 0023], [002a, 002a], [0030, 0039], [00a9, 00a9],
        [00ae, 00ae], [203c, 203c], [2049, 2049], [2122, 2122],
        [2139, 2139], [2194, 2199], [21a9, 21aa], [231a, 231b],
        [2328, 2328], [23cf, 23cf], [23e9, 23f3], [23f8, 23fa],
        [24c2, 24c2], [25aa, 25ab], [25b6, 25b6], [25c0, 25c0],
        [25fb, 25fe], [2600, 2604], [260e, 260e], [2611, 2611],
        [2614, 2615], [2618, 2618], [261d, 261d], [2620, 2620],
        [2622, 2623], [2626, 2626], [262a, 262a], [262e, 262f],
        [2638, 263a], [2640, 2640], [2642, 2642], [2648, 2653],
        [265f, 2660], [2663, 2663], [2665, 2666], [2668, 2668],
        [267b, 267b], [267e, 267f], [2692, 2697], [2699, 2699],
        [269b, 269c], [26a0, 26a1], [26a7, 26a7], [26aa, 26ab],
        [26b0, 26b1], [26bd, 26be], [26c4, 26c5], [26c8, 26c8],
        [26ce, 26cf], [26d1, 26d1], [26d3, 26d4], [26e9, 26ea],
        [26f0, 26f5], [26f7, 26fa], [26fd, 26fd], [2702, 2702],
        [2705, 2705], [2708, 270d], [270f, 270f], [2712, 2712],
        [2714, 2714], [2716, 2716], [271d, 271d], [2721, 2721],
        [2728, 2728], [2733, 2734], [2744, 2744], [2747, 2747],
        [274c, 274c], [274e, 274e], [2753, 2755], [2757, 2757],
        [2763, 2764], [2795, 2797], [27a1, 27a1], [27b0, 27b0],
        [27bf, 27bf], [2934, 2935], [2b05, 2b07], [2b1b, 2b1c],
        [2b50, 2b50], [2b55, 2b55], [3030, 3030], [303d, 303d],
        [3297, 3297], [3299, 3299], [1f004, 1f004], [1f0cf, 1f0cf],
        [1f170, 1f171], [1f17e, 1f17f], [1f18e, 1f18e], [1f191, 1f19a],
        [1f1e6, 1f1ff], [1f201, 1f202], [1f21a, 1f21a], [1f22f, 1f22f],
        [1f232, 1f23a], [1f250, 1f251], [1f300, 1f321], [1f324, 1f393],
        [1f396, 1f397], [1f399, 1f39b], [1f39e, 1f3f0], [1f3f3, 1f3f5],
        [1f3f7, 1f4fd], [1f4ff, 1f53d], [1f549, 1f54e], [1f550, 1f567],
        [1f56f, 1f570], [1f573, 1f57a], [1f587, 1f587], [1f58a, 1f58d],
        [1f590, 1f590], [1f595, 1f596], [1f5a4, 1f5a5], [1f5a8, 1f5a8],
        [1f5b1, 1f5b2], [1f5bc, 1f5bc], [1f5c2, 1f5c4], [1f5d1, 1f5d3],
        [1f5dc, 1f5de], [1f5e1, 1f5e1], [1f5e3, 1f5e3], [1f5e8, 1f5e8],
        [1f5ef, 1f5ef], [1f5f3, 1f5f3], [1f5fa, 1f64f], [1f680, 1f6c5],
        [1f6cb, 1f6d2], [1f6d5, 1f6d7], [1f6e0, 1f6e5], [1f6e9, 1f6e9],
        [1f6eb, 1f6ec], [1f6f0, 1f6f0], [1f6f3, 1f6fc], [1f7e0, 1f7eb],
        [1f90c, 1f93a], [1f93c, 1f945], [1f947, 1f978], [1f97a, 1f9cb],
        [1f9cd, 1f9ff], [1fa70, 1fa74], [1fa78, 1fa7a], [1fa80, 1fa86],
        [1fa90, 1faa8], [1fab0, 1fab6], [1fac0, 1fac2], [1fad0, 1fad6]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 251},
        {Mixed, 2}, {Empty, 6}, {Mixed, 1}, {Empty, 2}, {Mixed, 2},
        {Empty, 10}, {Mixed, 2}, {Empty, 4}, {Mixed, 2}, {Empty, 6},
        {Mixed, 1}, {Empty, 6}, {Mixed, 17}, {Empty, 11}, {Mixed, 1},
        {Empty, 14}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 38},
        {Mixed, 1}, {Empty, 18}, {Mixed, 1}, {Empty, 3563}, {Mixed, 1},
        {Empty, 5}, {Mixed, 1}, {Empty, 4}, {Mixed, 2}, {Empty, 2},
        {Mixed, 4}, {Empty, 5}, {Full, 1}, {Mixed, 1}, {Full, 2},
        {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 7}, {Mixed, 1}, {Full, 1},
        {Mixed, 7}, {Full, 2}, {Mixed, 1}, {Empty, 1}, {Full, 2},
        {Mixed, 2}, {Empty, 7}, {Mixed, 1}, {Empty, 8}, {Mixed, 4},
        {Full, 2}, {Mixed, 1}, {Full, 1}, {Empty, 3}, {Mixed, 4},
        {Empty, 30761}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x03ff0408, 0x00004200, 0x10000000, 0x00000200, 0x02000004,
        0x03f00000, 0x00000600, 0x0c000000, 0x00000100, 0x00008000,
        0x070ffe00, 0x00000004, 0x00400c00, 0x00000001, 0x78000000,
        0x2132401f, 0x0700c44d, 0x800fff05, 0xc8000169, 0x1afc0000,
        0x60030c83, 0x001ac130, 0x27bf0600, 0x2054bf24, 0x00180102,
        0x00b85090, 0x00000018, 0x00e00000, 0x80010002, 0x00300000,
        0x180000e0, 0x00210000, 0x20010000, 0x02800000, 0x00000010,
        0x00008000, 0xc0030000, 0x07fe4000, 0xffffffc0, 0x04000006,
        0x07fc8000, 0x00030000, 0xfffffff3, 0xcecfffff, 0xffb9ffff,
        0xbfffffff, 0x3fffffff, 0xffff7e00, 0x07f980ff, 0x00613c80,
        0x10060130, 0x700e001c, 0xfc08810a, 0x0000ffff, 0x00e7f83f,
        0x1ff91a3f, 0x00000fff, 0xfffff000, 0xf7ffffff, 0xffffffbf,
        0xfdffffff, 0xffffefff, 0x071f0000, 0xffff007f, 0x007f01ff,
        0x007f0007};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 62, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 66, 0};

        static BinaryPropertyObject property_object{emoji, std::move(codepoint_set)};
    }
PropertyObject * get_EMOJI_PropertyObject() {  return & EMOJI_ns::property_object; }
    namespace EMOJICOMPONENT_ns {
        /** Code Point Ranges for emojicomponent
        [0023, 0023], [002a, 002a], [0030, 0039], [200d, 200d],
        [20e3, 20e3], [fe0f, fe0f], [1f1e6, 1f1ff], [1f3fb, 1f3ff],
        [1f9b0, 1f9b3], [e0020, e007f]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 1}, {Mixed, 1}, {Empty, 254}, {Mixed, 1}, {Empty, 6},
        {Mixed, 1}, {Empty, 1768}, {Mixed, 1}, {Empty, 1950}, {Mixed, 1},
        {Empty, 15}, {Mixed, 1}, {Empty, 45}, {Mixed, 1}, {Empty, 24627},
        {Full, 3}, {Empty, 6140}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x03ff0408, 0x00002000, 0x00000008, 0x00008000, 0xffffffc0,
        0xf8000000, 0x000f0000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 17, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 7, 0};

        static BinaryPropertyObject property_object{emojicomponent, std::move(codepoint_set)};
    }
PropertyObject * get_EMOJICOMPONENT_PropertyObject() {  return & EMOJICOMPONENT_ns::property_object; }
    namespace EMOJIMODIFIER_ns {
        /** Code Point Ranges for emojimodifier
        [1f3fb, 1f3ff]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 3999}, {Mixed, 1}, {Empty, 30816}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0xf8000000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 1, 0};

        static BinaryPropertyObject property_object{emojimodifier, std::move(codepoint_set)};
    }
PropertyObject * get_EMOJIMODIFIER_PropertyObject() {  return & EMOJIMODIFIER_ns::property_object; }
    namespace EMOJIMODIFIERBASE_ns {
        /** Code Point Ranges for emojimodifierbase
        [261d, 261d], [26f9, 26f9], [270a, 270d], [1f385, 1f385],
        [1f3c2, 1f3c4], [1f3c7, 1f3c7], [1f3ca, 1f3cc], [1f442, 1f443],
        [1f446, 1f450], [1f466, 1f478], [1f47c, 1f47c], [1f481, 1f483],
        [1f485, 1f487], [1f48f, 1f48f], [1f491, 1f491], [1f4aa, 1f4aa],
        [1f574, 1f575], [1f57a, 1f57a], [1f590, 1f590], [1f595, 1f596],
        [1f645, 1f647], [1f64b, 1f64f], [1f6a3, 1f6a3], [1f6b4, 1f6b6],
        [1f6c0, 1f6c0], [1f6cc, 1f6cc], [1f90c, 1f90c], [1f90f, 1f90f],
        [1f918, 1f91f], [1f926, 1f926], [1f930, 1f939], [1f93c, 1f93e],
        [1f977, 1f977], [1f9b5, 1f9b6], [1f9b8, 1f9b9], [1f9bb, 1f9bb],
        [1f9cd, 1f9cf], [1f9d1, 1f9dd]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 304}, {Mixed, 1}, {Empty, 6}, {Mixed, 2}, {Empty, 3683},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 4},
        {Empty, 5}, {Mixed, 2}, {Empty, 5}, {Mixed, 1}, {Empty, 2},
        {Mixed, 2}, {Empty, 17}, {Mixed, 2}, {Empty, 1}, {Mixed, 1},
        {Empty, 1}, {Mixed, 2}, {Empty, 30769}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x20000000, 0x02000000, 0x00003c00, 0x00000020, 0x00001c9c,
        0x0001ffcc, 0x11ffffc0, 0x000280ee, 0x00000400, 0x04300000,
        0x00610000, 0x0000f8e0, 0x00700008, 0x00001001, 0xff009000,
        0x73ff0040, 0x00800000, 0x0b600000, 0x3ffee000};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 23, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 19, 0};

        static BinaryPropertyObject property_object{emojimodifierbase, std::move(codepoint_set)};
    }
PropertyObject * get_EMOJIMODIFIERBASE_PropertyObject() {  return & EMOJIMODIFIERBASE_ns::property_object; }
    namespace EMOJIPRESENTATION_ns {
        /** Code Point Ranges for emojipresentation
        [231a, 231b], [23e9, 23ec], [23f0, 23f0], [23f3, 23f3],
        [25fd, 25fe], [2614, 2615], [2648, 2653], [267f, 267f],
        [2693, 2693], [26a1, 26a1], [26aa, 26ab], [26bd, 26be],
        [26c4, 26c5], [26ce, 26ce], [26d4, 26d4], [26ea, 26ea],
        [26f2, 26f3], [26f5, 26f5], [26fa, 26fa], [26fd, 26fd],
        [2705, 2705], [270a, 270b], [2728, 2728], [274c, 274c],
        [274e, 274e], [2753, 2755], [2757, 2757], [2795, 2797],
        [27b0, 27b0], [27bf, 27bf], [2b1b, 2b1c], [2b50, 2b50],
        [2b55, 2b55], [1f004, 1f004], [1f0cf, 1f0cf], [1f18e, 1f18e],
        [1f191, 1f19a], [1f1e6, 1f1ff], [1f201, 1f201], [1f21a, 1f21a],
        [1f22f, 1f22f], [1f232, 1f236], [1f238, 1f23a], [1f250, 1f251],
        [1f300, 1f320], [1f32d, 1f335], [1f337, 1f37c], [1f37e, 1f393],
        [1f3a0, 1f3ca], [1f3cf, 1f3d3], [1f3e0, 1f3f0], [1f3f4, 1f3f4],
        [1f3f8, 1f43e], [1f440, 1f440], [1f442, 1f4fc], [1f4ff, 1f53d],
        [1f54b, 1f54e], [1f550, 1f567], [1f57a, 1f57a], [1f595, 1f596],
        [1f5a4, 1f5a4], [1f5fb, 1f64f], [1f680, 1f6c5], [1f6cc, 1f6cc],
        [1f6d0, 1f6d2], [1f6d5, 1f6d7], [1f6eb, 1f6ec], [1f6f4, 1f6fc],
        [1f7e0, 1f7eb], [1f90c, 1f93a], [1f93c, 1f945], [1f947, 1f978],
        [1f97a, 1f9cb], [1f9cd, 1f9ff], [1fa70, 1fa74], [1fa78, 1fa7a],
        [1fa80, 1fa86], [1fa90, 1faa8], [1fab0, 1fab6], [1fac0, 1fac2],
        [1fad0, 1fad6]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 280}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 15},
        {Mixed, 2}, {Empty, 1}, {Mixed, 9}, {Empty, 1}, {Mixed, 2},
        {Empty, 26}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 3621},
        {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 5}, {Mixed, 1},
        {Empty, 2}, {Mixed, 4}, {Empty, 5}, {Full, 1}, {Mixed, 1},
        {Full, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 2},
        {Full, 4}, {Mixed, 1}, {Full, 1}, {Mixed, 5}, {Empty, 1},
        {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Empty, 1}, {Full, 2},
        {Mixed, 2}, {Empty, 7}, {Mixed, 1}, {Empty, 8}, {Mixed, 4},
        {Full, 2}, {Mixed, 1}, {Full, 1}, {Empty, 3}, {Mixed, 4},
        {Empty, 30761}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x0c000000, 0x00091e00, 0x60000000, 0x00300000, 0x000fff00,
        0x80000000, 0x00080000, 0x60000c02, 0x00104030, 0x242c0400,
        0x00000c20, 0x00000100, 0x00b85000, 0x00e00000, 0x80010000,
        0x18000000, 0x00210000, 0x00000010, 0x00008000, 0x07fe4000,
        0xffffffc0, 0x04000002, 0x077c8000, 0x00030000, 0xffbfe001,
        0xdfffffff, 0x000fffff, 0x000f87ff, 0xff11ffff, 0x7fffffff,
        0xfffffffd, 0x9fffffff, 0x3fffffff, 0xffff7800, 0x040000ff,
        0x00600000, 0x00000010, 0xf8000000, 0x0000ffff, 0x00e7103f,
        0x1ff01800, 0x00000fff, 0xfffff000, 0xf7ffffff, 0xffffffbf,
        0xfdffffff, 0xffffefff, 0x071f0000, 0xffff007f, 0x007f01ff,
        0x007f0007};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 52, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 51, 0};

        static BinaryPropertyObject property_object{emojipresentation, std::move(codepoint_set)};
    }
PropertyObject * get_EMOJIPRESENTATION_PropertyObject() {  return & EMOJIPRESENTATION_ns::property_object; }
    namespace EXTENDEDPICTOGRAPHIC_ns {
        /** Code Point Ranges for extendedpictographic
        [00a9, 00a9], [00ae, 00ae], [203c, 203c], [2049, 2049],
        [2122, 2122], [2139, 2139], [2194, 2199], [21a9, 21aa],
        [231a, 231b], [2328, 2328], [2388, 2388], [23cf, 23cf],
        [23e9, 23f3], [23f8, 23fa], [24c2, 24c2], [25aa, 25ab],
        [25b6, 25b6], [25c0, 25c0], [25fb, 25fe], [2600, 2605],
        [2607, 2612], [2614, 2685], [2690, 2705], [2708, 2712],
        [2714, 2714], [2716, 2716], [271d, 271d], [2721, 2721],
        [2728, 2728], [2733, 2734], [2744, 2744], [2747, 2747],
        [274c, 274c], [274e, 274e], [2753, 2755], [2757, 2757],
        [2763, 2767], [2795, 2797], [27a1, 27a1], [27b0, 27b0],
        [27bf, 27bf], [2934, 2935], [2b05, 2b07], [2b1b, 2b1c],
        [2b50, 2b50], [2b55, 2b55], [3030, 3030], [303d, 303d],
        [3297, 3297], [3299, 3299], [1f000, 1f0ff], [1f10d, 1f10f],
        [1f12f, 1f12f], [1f16c, 1f171], [1f17e, 1f17f], [1f18e, 1f18e],
        [1f191, 1f19a], [1f1ad, 1f1e5], [1f201, 1f20f], [1f21a, 1f21a],
        [1f22f, 1f22f], [1f232, 1f23a], [1f23c, 1f23f], [1f249, 1f3fa],
        [1f400, 1f53d], [1f546, 1f64f], [1f680, 1f6ff], [1f774, 1f77f],
        [1f7d5, 1f7ff], [1f80c, 1f80f], [1f848, 1f84f], [1f85a, 1f85f],
        [1f888, 1f88f], [1f8ae, 1f8ff], [1f90c, 1f93a], [1f93c, 1f945],
        [1f947, 1faff], [1fc00, 1fffd]**/


        namespace {
        const static UnicodeSet::run_t __codepoint_set_runs[] = {
        {Empty, 5}, {Mixed, 1}, {Empty, 251}, {Mixed, 2}, {Empty, 6},
        {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 10}, {Mixed, 2},
        {Empty, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 6},
        {Mixed, 1}, {Empty, 6}, {Mixed, 4}, {Full, 3}, {Mixed, 1},
        {Full, 3}, {Mixed, 6}, {Empty, 11}, {Mixed, 1}, {Empty, 14},
        {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 38}, {Mixed, 1},
        {Empty, 18}, {Mixed, 1}, {Empty, 3563}, {Full, 8}, {Mixed, 2},
        {Empty, 1}, {Mixed, 3}, {Full, 1}, {Mixed, 4}, {Full, 12},
        {Mixed, 1}, {Full, 9}, {Mixed, 2}, {Full, 7}, {Mixed, 1},
        {Empty, 1}, {Full, 4}, {Empty, 3}, {Mixed, 1}, {Empty, 2},
        {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
        {Empty, 1}, {Mixed, 2}, {Full, 2}, {Mixed, 3}, {Full, 13},
        {Empty, 8}, {Full, 31}, {Mixed, 1}, {Empty, 30720}};
        const static UnicodeSet::bitquad_t  __codepoint_set_quads[] = {
        0x00004200, 0x10000000, 0x00000200, 0x02000004, 0x03f00000,
        0x00000600, 0x0c000000, 0x00000100, 0x00000100, 0x00008000,
        0x070ffe00, 0x00000004, 0x00400c00, 0x00000001, 0x78000000,
        0xfff7ffbf, 0xffff003f, 0x2057ff3f, 0x00180102, 0x00b85090,
        0x000000f8, 0x00e00000, 0x80010002, 0x00300000, 0x180000e0,
        0x00210000, 0x20010000, 0x02800000, 0x0000e000, 0x00008000,
        0xc003f000, 0x07fe4000, 0xffffe000, 0x0000003f, 0x0400fffe,
        0xf7fc8000, 0xfffffe00, 0x07ffffff, 0x3fffffff, 0xffffffc0,
        0x0000ffff, 0xfff00000, 0xffe00000, 0x0000f000, 0xfc00ff00,
        0x0000ff00, 0xffffc000, 0xfffff000, 0xf7ffffff, 0xffffffbf,
        0x3fffffff};
        }

        const static UnicodeSet codepoint_set{const_cast<UnicodeSet::run_t *>(__codepoint_set_runs), 64, 0, const_cast<UnicodeSet::bitquad_t *>(__codepoint_set_quads), 51, 0};

        static BinaryPropertyObject property_object{extendedpictographic, std::move(codepoint_set)};
    }
PropertyObject * get_EXTENDEDPICTOGRAPHIC_PropertyObject() {  return & EXTENDEDPICTOGRAPHIC_ns::property_object; }
}

