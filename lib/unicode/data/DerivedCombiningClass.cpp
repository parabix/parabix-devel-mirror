
/*
 *  Copyright (c) 2021 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 *  DerivedCombiningClass
 */

#include <unicode/core/unicode_set.h>
#include <unicode/data/PropertyAliases.h>
#include <unicode/data/PropertyObjects.h>
#include <unicode/data/PropertyValueAliases.h>

namespace UCD {
  namespace CCC_ns {
    const unsigned independent_prop_values = 56;
    /** Code Point Ranges for NR
    [0000, 02ff], [034f, 034f], [0370, 0482], [0488, 0590], [05be, 05be],
    [05c0, 05c0], [05c3, 05c3], [05c6, 05c6], [05c8, 060f], [061b, 064a],
    [0660, 066f], [0671, 06d5], [06dd, 06de], [06e5, 06e6], [06e9, 06e9],
    [06ee, 0710], [0712, 072f], [074b, 07ea], [07f4, 07fc], [07fe, 0815],
    [081a, 081a], [0824, 0824], [0828, 0828], [082e, 0858], [085c, 08d2],
    [08e2, 08e2], [0900, 093b], [093d, 094c], [094e, 0950], [0955, 09bb],
    [09bd, 09cc], [09ce, 09fd], [09ff, 0a3b], [0a3d, 0a4c], [0a4e, 0abb],
    [0abd, 0acc], [0ace, 0b3b], [0b3d, 0b4c], [0b4e, 0bcc], [0bce, 0c4c],
    [0c4e, 0c54], [0c57, 0cbb], [0cbd, 0ccc], [0cce, 0d3a], [0d3d, 0d4c],
    [0d4e, 0dc9], [0dcb, 0e37], [0e3b, 0e47], [0e4c, 0eb7], [0ebb, 0ec7],
    [0ecc, 0f17], [0f1a, 0f34], [0f36, 0f36], [0f38, 0f38], [0f3a, 0f70],
    [0f73, 0f73], [0f75, 0f79], [0f7e, 0f7f], [0f81, 0f81], [0f85, 0f85],
    [0f88, 0fc5], [0fc7, 1036], [1038, 1038], [103b, 108c], [108e, 135c],
    [1360, 1713], [1715, 1733], [1735, 17d1], [17d3, 17dc], [17de, 18a8],
    [18aa, 1938], [193c, 1a16], [1a19, 1a5f], [1a61, 1a74], [1a7d, 1a7e],
    [1a80, 1aaf], [1abe, 1abe], [1ac1, 1b33], [1b35, 1b43], [1b45, 1b6a],
    [1b74, 1ba9], [1bac, 1be5], [1be7, 1bf1], [1bf4, 1c36], [1c38, 1ccf],
    [1cd3, 1cd3], [1ce1, 1ce1], [1ce9, 1cec], [1cee, 1cf3], [1cf5, 1cf7],
    [1cfa, 1dbf], [1dfa, 1dfa], [1e00, 20cf], [20dd, 20e0], [20e2, 20e4],
    [20f1, 2cee], [2cf2, 2d7e], [2d80, 2ddf], [2e00, 3029], [3030, 3098],
    [309b, a66e], [a670, a673], [a67e, a69d], [a6a0, a6ef], [a6f2, a805],
    [a807, a82b], [a82d, a8c3], [a8c5, a8df], [a8f2, a92a], [a92e, a952],
    [a954, a9b2], [a9b4, a9bf], [a9c1, aaaf], [aab1, aab1], [aab5, aab6],
    [aab9, aabd], [aac0, aac0], [aac2, aaf5], [aaf7, abec], [abee, fb1d],
    [fb1f, fe1f], [fe30, 101fc], [101fe, 102df], [102e1, 10375],
    [1037b, 10a0c], [10a0e, 10a0e], [10a10, 10a37], [10a3b, 10a3e],
    [10a40, 10ae4], [10ae7, 10d23], [10d28, 10eaa], [10ead, 10f45],
    [10f51, 11045], [11047, 1107e], [11080, 110b8], [110bb, 110ff],
    [11103, 11132], [11135, 11172], [11174, 111bf], [111c1, 111c9],
    [111cb, 11234], [11237, 112e8], [112eb, 1133a], [1133d, 1134c],
    [1134e, 11365], [1136d, 1136f], [11375, 11441], [11443, 11445],
    [11447, 1145d], [1145f, 114c1], [114c4, 115be], [115c1, 1163e],
    [11640, 116b5], [116b8, 1172a], [1172c, 11838], [1183b, 1193c],
    [1193f, 11942], [11944, 119df], [119e1, 11a33], [11a35, 11a46],
    [11a48, 11a98], [11a9a, 11c3e], [11c40, 11d41], [11d43, 11d43],
    [11d46, 11d96], [11d98, 16aef], [16af5, 16b2f], [16b37, 16fef],
    [16ff2, 1bc9d], [1bc9f, 1d164], [1d16a, 1d16c], [1d173, 1d17a],
    [1d183, 1d184], [1d18c, 1d1a9], [1d1ae, 1d241], [1d245, 1dfff],
    [1e007, 1e007], [1e019, 1e01a], [1e022, 1e022], [1e025, 1e025],
    [1e02b, 1e12f], [1e137, 1e2eb], [1e2f0, 1e8cf], [1e8d7, 1e943],
    [1e94b, 10ffff]**/


    namespace {
    const static UnicodeSet::run_t __nr_Set_runs[] = {
    {Full, 24}, {Empty, 2}, {Mixed, 2}, {Full, 8}, {Mixed, 1}, {Full, 7},
    {Mixed, 3}, {Full, 1}, {Mixed, 1}, {Full, 1}, {Mixed, 2}, {Full, 2},
    {Mixed, 5}, {Full, 4}, {Mixed, 4}, {Full, 3}, {Mixed, 2}, {Full, 1},
    {Mixed, 2}, {Full, 2}, {Mixed, 3}, {Full, 1}, {Mixed, 2}, {Full, 2},
    {Mixed, 2}, {Full, 2}, {Mixed, 2}, {Full, 3}, {Mixed, 1}, {Full, 3},
    {Mixed, 1}, {Full, 2}, {Mixed, 2}, {Full, 2}, {Mixed, 2}, {Full, 3},
    {Mixed, 1}, {Full, 2}, {Mixed, 2}, {Full, 2}, {Mixed, 2}, {Full, 1},
    {Mixed, 2}, {Full, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Full, 2},
    {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 21}, {Mixed, 1}, {Full, 29},
    {Mixed, 2}, {Full, 4}, {Mixed, 1}, {Full, 6}, {Mixed, 1}, {Full, 3},
    {Mixed, 1}, {Full, 6}, {Mixed, 1}, {Full, 2}, {Mixed, 1}, {Full, 1},
    {Mixed, 2}, {Full, 2}, {Mixed, 3}, {Full, 1}, {Mixed, 1}, {Full, 1},
    {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Full, 4}, {Mixed, 2}, {Full, 6},
    {Empty, 1}, {Mixed, 1}, {Full, 22}, {Mixed, 2}, {Full, 95}, {Mixed, 1},
    {Full, 3}, {Mixed, 1}, {Full, 3}, {Empty, 1}, {Full, 17}, {Mixed, 1},
    {Full, 2}, {Mixed, 1}, {Full, 942}, {Mixed, 2}, {Full, 2}, {Mixed, 1},
    {Full, 8}, {Mixed, 2}, {Full, 4}, {Mixed, 2}, {Full, 1}, {Mixed, 2},
    {Full, 2}, {Mixed, 2}, {Full, 6}, {Mixed, 3}, {Full, 7}, {Mixed, 1},
    {Full, 632}, {Mixed, 1}, {Full, 24}, {Mixed, 1}, {Full, 29}, {Mixed, 1},
    {Full, 7}, {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Full, 52}, {Mixed, 2},
    {Full, 5}, {Mixed, 1}, {Full, 17}, {Mixed, 1}, {Full, 11}, {Mixed, 1},
    {Full, 4}, {Mixed, 1}, {Full, 7}, {Mixed, 2}, {Full, 1}, {Mixed, 1},
    {Full, 2}, {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Full, 2}, {Mixed, 1},
    {Full, 2}, {Mixed, 1}, {Full, 5}, {Mixed, 1}, {Full, 1}, {Mixed, 3},
    {Full, 6}, {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Full, 6}, {Mixed, 2},
    {Full, 2}, {Mixed, 1}, {Full, 3}, {Mixed, 1}, {Full, 3}, {Mixed, 1},
    {Full, 7}, {Mixed, 1}, {Full, 7}, {Mixed, 2}, {Full, 4}, {Mixed, 1},
    {Full, 1}, {Mixed, 2}, {Full, 1}, {Mixed, 1}, {Full, 12}, {Mixed, 1},
    {Full, 8}, {Mixed, 1}, {Full, 1}, {Mixed, 1}, {Full, 618}, {Mixed, 1},
    {Full, 1}, {Mixed, 1}, {Full, 37}, {Mixed, 1}, {Full, 612}, {Mixed, 1},
    {Full, 166}, {Mixed, 3}, {Full, 4}, {Mixed, 1}, {Full, 109}, {Mixed, 2},
    {Full, 7}, {Mixed, 1}, {Full, 13}, {Mixed, 1}, {Full, 46}, {Mixed, 1},
    {Full, 3}, {Mixed, 1}, {Full, 30901}};
    const static UnicodeSet::bitquad_t  __nr_Set_quads[] = {
    0x00008000, 0xffff0000, 0xffffff07, 0x0001ffff, 0x40000000, 0xffffff49,
    0xf800ffff, 0x000007ff, 0xfffeffff, 0x603fffff, 0xffffc260, 0xfffdffff,
    0x0000ffff, 0xfffff800, 0xdff007ff, 0x043fffff, 0xffffc110, 0xf1ffffff,
    0x0007ffff, 0x00000004, 0xefffffff, 0xffe1dfff, 0xefffffff, 0xffffdfff,
    0xbfffffff, 0xefffffff, 0xffffdfff, 0xefffffff, 0xffffdfff, 0xefffffff,
    0xffffdfff, 0xffffdfff, 0xff9fdfff, 0xefffffff, 0xffffdfff, 0xe7ffffff,
    0xffffdfff, 0xfffffbff, 0xf8ffffff, 0xfffff0ff, 0xf8ffffff, 0xfffff0ff,
    0xfcffffff, 0xfd5fffff, 0xc3e9ffff, 0xffffff22, 0xffffffbf, 0xf97fffff,
    0xffffdfff, 0x1fffffff, 0xffefffff, 0xffefffff, 0xdffbffff, 0xfffffdff,
    0xf1ffffff, 0xfe7fffff, 0x601ffffe, 0x4000ffff, 0xfffffffe, 0xffefffff,
    0xffffffef, 0xfff007ff, 0xfffff3ff, 0xfff3ffbf, 0xff7fffff, 0x0008ffff,
    0xfcefde02, 0x04000000, 0xe000ffff, 0xfffe001d, 0xfffc7fff, 0x7fffffff,
    0xffff03ff, 0xf9ffffff, 0xc00f7fff, 0x3fffffff, 0xfffcffff, 0xffffffbf,
    0xffffefff, 0xffffffef, 0xfffc0000, 0xffffc7ff, 0xfff7ffff, 0xfff7ffff,
    0xfffffffe, 0x3e62ffff, 0xfffffffd, 0xffbfffff, 0xffffdfff, 0xbfffffff,
    0xffff0000, 0xdfffffff, 0xfffffffe, 0xf83fffff, 0xffff5fff, 0x78ffffff,
    0xffffff9f, 0xffffff0f, 0xffffe7ff, 0xfffe003f, 0xffffffbf, 0x7fffffff,
    0xf9ffffff, 0xfffffff8, 0xffe7ffff, 0xfff7ffff, 0xfffffbfe, 0xff9fffff,
    0xfffff9ff, 0xe7ffffff, 0xffffdfff, 0xffe0e03f, 0xbfffffbb, 0xfffffff3,
    0x7fffffff, 0xfffffffe, 0x7fffffff, 0xff3fffff, 0xfffff7ff, 0xf9ffffff,
    0x9fffffff, 0xfffffff7, 0xfffffffe, 0xffefffff, 0xffffff7f, 0xfdffffff,
    0x7fffffff, 0xffffffcb, 0xff7fffff, 0xffe0ffff, 0xff80ffff, 0xfffcffff,
    0xbfffffff, 0x07f81c1f, 0xfffff018, 0xffffc3ff, 0xffffffe3, 0x06000080,
    0xfffff824, 0xff80ffff, 0xffff0fff, 0xff80ffff, 0xfffff80f};
    }

    const static UnicodeSet nr_Set{const_cast<UnicodeSet::run_t *>(__nr_Set_runs), 195, 0, const_cast<UnicodeSet::bitquad_t *>(__nr_Set_quads), 143, 0};

    /** Code Point Ranges for OV
    [0334, 0338], [1cd4, 1cd4], [1ce2, 1ce8], [20d2, 20d3], [20d8, 20da],
    [20e5, 20e6], [20ea, 20eb], [10a39, 10a39], [16af0, 16af4],
    [1bc9e, 1bc9e], [1d167, 1d169]**/


    namespace {
    const static UnicodeSet::run_t __ov_Set_runs[] = {
    {Empty, 25}, {Mixed, 1}, {Empty, 204}, {Mixed, 2}, {Empty, 30},
    {Mixed, 2}, {Empty, 1865}, {Mixed, 1}, {Empty, 773}, {Mixed, 1},
    {Empty, 652}, {Mixed, 1}, {Empty, 166}, {Mixed, 1}, {Empty, 31092}};
    const static UnicodeSet::bitquad_t  __ov_Set_quads[] = {
    0x01f00000, 0x00100000, 0x000001fc, 0x070c0000, 0x00000c60, 0x02000000,
    0x001f0000, 0x40000000, 0x00000380};
    }

    const static UnicodeSet ov_Set{const_cast<UnicodeSet::run_t *>(__ov_Set_runs), 15, 0, const_cast<UnicodeSet::bitquad_t *>(__ov_Set_quads), 9, 0};

    /** Code Point Ranges for HANR
    [16ff0, 16ff1]**/


    namespace {
    const static UnicodeSet::run_t __hanr_Set_runs[] = {
    {Empty, 2943}, {Mixed, 1}, {Empty, 31872}};
    const static UnicodeSet::bitquad_t  __hanr_Set_quads[] = {
    0x00030000};
    }

    const static UnicodeSet hanr_Set{const_cast<UnicodeSet::run_t *>(__hanr_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__hanr_Set_quads), 1, 0};

    /** Code Point Ranges for NK
    [093c, 093c], [09bc, 09bc], [0a3c, 0a3c], [0abc, 0abc], [0b3c, 0b3c],
    [0cbc, 0cbc], [1037, 1037], [1b34, 1b34], [1be6, 1be6], [1c37, 1c37],
    [a9b3, a9b3], [110ba, 110ba], [11173, 11173], [111ca, 111ca],
    [11236, 11236], [112e9, 112e9], [1133b, 1133c], [11446, 11446],
    [114c3, 114c3], [115c0, 115c0], [116b7, 116b7], [1183a, 1183a],
    [11943, 11943], [11d42, 11d42], [1e94a, 1e94a]**/


    namespace {
    const static UnicodeSet::run_t __nk_Set_runs[] = {
    {Empty, 73}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 11}, {Mixed, 1},
    {Empty, 27}, {Mixed, 1}, {Empty, 87}, {Mixed, 1}, {Empty, 5},
    {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 1131}, {Mixed, 1},
    {Empty, 823}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 1},
    {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 7},
    {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 11}, {Mixed, 1}, {Empty, 8},
    {Mixed, 1}, {Empty, 31}, {Mixed, 1}, {Empty, 1631}, {Mixed, 1},
    {Empty, 30901}};
    const static UnicodeSet::bitquad_t  __nk_Set_quads[] = {
    0x10000000, 0x10000000, 0x10000000, 0x10000000, 0x10000000, 0x10000000,
    0x00800000, 0x00100000, 0x00000040, 0x00800000, 0x00080000, 0x04000000,
    0x00080000, 0x00000400, 0x00400000, 0x00000200, 0x18000000, 0x00000040,
    0x00000008, 0x00000001, 0x00800000, 0x04000000, 0x00000008, 0x00000004,
    0x00000400};
    }

    const static UnicodeSet nk_Set{const_cast<UnicodeSet::run_t *>(__nk_Set_runs), 51, 0, const_cast<UnicodeSet::bitquad_t *>(__nk_Set_quads), 25, 0};

    /** Code Point Ranges for KV
    [3099, 309a]**/


    namespace {
    const static UnicodeSet::run_t __kv_Set_runs[] = {
    {Empty, 388}, {Mixed, 1}, {Empty, 34427}};
    const static UnicodeSet::bitquad_t  __kv_Set_quads[] = {
    0x06000000};
    }

    const static UnicodeSet kv_Set{const_cast<UnicodeSet::run_t *>(__kv_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__kv_Set_quads), 1, 0};

    /** Code Point Ranges for VR
    [094d, 094d], [09cd, 09cd], [0a4d, 0a4d], [0acd, 0acd], [0b4d, 0b4d],
    [0bcd, 0bcd], [0c4d, 0c4d], [0ccd, 0ccd], [0d3b, 0d3c], [0d4d, 0d4d],
    [0dca, 0dca], [0e3a, 0e3a], [0eba, 0eba], [0f84, 0f84], [1039, 103a],
    [1714, 1714], [1734, 1734], [17d2, 17d2], [1a60, 1a60], [1b44, 1b44],
    [1baa, 1bab], [1bf2, 1bf3], [2d7f, 2d7f], [a806, a806], [a82c, a82c],
    [a8c4, a8c4], [a953, a953], [a9c0, a9c0], [aaf6, aaf6], [abed, abed],
    [10a3f, 10a3f], [11046, 11046], [1107f, 1107f], [110b9, 110b9],
    [11133, 11134], [111c0, 111c0], [11235, 11235], [112ea, 112ea],
    [1134d, 1134d], [11442, 11442], [114c2, 114c2], [115bf, 115bf],
    [1163f, 1163f], [116b6, 116b6], [1172b, 1172b], [11839, 11839],
    [1193d, 1193e], [119e0, 119e0], [11a34, 11a34], [11a47, 11a47],
    [11a99, 11a99], [11c3f, 11c3f], [11d44, 11d45], [11d97, 11d97]**/


    namespace {
    const static UnicodeSet::run_t __vr_Set_runs[] = {
    {Empty, 74}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 2},
    {Empty, 3}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 3}, {Mixed, 1},
    {Empty, 6}, {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 54}, {Mixed, 2},
    {Empty, 4}, {Mixed, 1}, {Empty, 20}, {Mixed, 1}, {Empty, 6}, {Mixed, 1},
    {Empty, 2}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 139},
    {Mixed, 1}, {Empty, 980}, {Mixed, 2}, {Empty, 4}, {Mixed, 1},
    {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 8}, {Mixed, 1},
    {Empty, 7}, {Mixed, 1}, {Empty, 753}, {Mixed, 1}, {Empty, 48},
    {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 4},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 6},
    {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 3},
    {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 7}, {Mixed, 1}, {Empty, 5},
    {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 1}, {Mixed, 1}, {Empty, 12},
    {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 1}, {Mixed, 1},
    {Empty, 32531}};
    const static UnicodeSet::bitquad_t  __vr_Set_quads[] = {
    0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002000,
    0x00002000, 0x00002000, 0x18000000, 0x00002000, 0x00000400, 0x04000000,
    0x04000000, 0x00000010, 0x06000000, 0x00100000, 0x00100000, 0x00040000,
    0x00000001, 0x00000010, 0x00000c00, 0x000c0000, 0x80000000, 0x00000040,
    0x00001000, 0x00000010, 0x00080000, 0x00000001, 0x00400000, 0x00002000,
    0x80000000, 0x00000040, 0x80000000, 0x02000000, 0x00180000, 0x00000001,
    0x00200000, 0x00000400, 0x00002000, 0x00000004, 0x00000004, 0x80000000,
    0x80000000, 0x00400000, 0x00000800, 0x02000000, 0x60000000, 0x00000001,
    0x00100000, 0x00000080, 0x02000000, 0x80000000, 0x00000030, 0x00800000};
    }

    const static UnicodeSet vr_Set{const_cast<UnicodeSet::run_t *>(__vr_Set_runs), 99, 0, const_cast<UnicodeSet::bitquad_t *>(__vr_Set_quads), 54, 0};

    /** Code Point Ranges for CCC10
    [05b0, 05b0]**/


    namespace {
    const static UnicodeSet::run_t __ccc10_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc10_Set_quads[] = {
    0x00010000};
    }

    const static UnicodeSet ccc10_Set{const_cast<UnicodeSet::run_t *>(__ccc10_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc10_Set_quads), 1, 0};

    /** Code Point Ranges for CCC11
    [05b1, 05b1]**/


    namespace {
    const static UnicodeSet::run_t __ccc11_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc11_Set_quads[] = {
    0x00020000};
    }

    const static UnicodeSet ccc11_Set{const_cast<UnicodeSet::run_t *>(__ccc11_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc11_Set_quads), 1, 0};

    /** Code Point Ranges for CCC12
    [05b2, 05b2]**/


    namespace {
    const static UnicodeSet::run_t __ccc12_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc12_Set_quads[] = {
    0x00040000};
    }

    const static UnicodeSet ccc12_Set{const_cast<UnicodeSet::run_t *>(__ccc12_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc12_Set_quads), 1, 0};

    /** Code Point Ranges for CCC13
    [05b3, 05b3]**/


    namespace {
    const static UnicodeSet::run_t __ccc13_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc13_Set_quads[] = {
    0x00080000};
    }

    const static UnicodeSet ccc13_Set{const_cast<UnicodeSet::run_t *>(__ccc13_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc13_Set_quads), 1, 0};

    /** Code Point Ranges for CCC14
    [05b4, 05b4]**/


    namespace {
    const static UnicodeSet::run_t __ccc14_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc14_Set_quads[] = {
    0x00100000};
    }

    const static UnicodeSet ccc14_Set{const_cast<UnicodeSet::run_t *>(__ccc14_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc14_Set_quads), 1, 0};

    /** Code Point Ranges for CCC15
    [05b5, 05b5]**/


    namespace {
    const static UnicodeSet::run_t __ccc15_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc15_Set_quads[] = {
    0x00200000};
    }

    const static UnicodeSet ccc15_Set{const_cast<UnicodeSet::run_t *>(__ccc15_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc15_Set_quads), 1, 0};

    /** Code Point Ranges for CCC16
    [05b6, 05b6]**/


    namespace {
    const static UnicodeSet::run_t __ccc16_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc16_Set_quads[] = {
    0x00400000};
    }

    const static UnicodeSet ccc16_Set{const_cast<UnicodeSet::run_t *>(__ccc16_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc16_Set_quads), 1, 0};

    /** Code Point Ranges for CCC17
    [05b7, 05b7]**/


    namespace {
    const static UnicodeSet::run_t __ccc17_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc17_Set_quads[] = {
    0x00800000};
    }

    const static UnicodeSet ccc17_Set{const_cast<UnicodeSet::run_t *>(__ccc17_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc17_Set_quads), 1, 0};

    /** Code Point Ranges for CCC18
    [05b8, 05b8], [05c7, 05c7]**/


    namespace {
    const static UnicodeSet::run_t __ccc18_Set_runs[] = {
    {Empty, 45}, {Mixed, 2}, {Empty, 34769}};
    const static UnicodeSet::bitquad_t  __ccc18_Set_quads[] = {
    0x01000000, 0x00000080};
    }

    const static UnicodeSet ccc18_Set{const_cast<UnicodeSet::run_t *>(__ccc18_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc18_Set_quads), 2, 0};

    /** Code Point Ranges for CCC19
    [05b9, 05ba]**/


    namespace {
    const static UnicodeSet::run_t __ccc19_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc19_Set_quads[] = {
    0x06000000};
    }

    const static UnicodeSet ccc19_Set{const_cast<UnicodeSet::run_t *>(__ccc19_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc19_Set_quads), 1, 0};

    /** Code Point Ranges for CCC20
    [05bb, 05bb]**/


    namespace {
    const static UnicodeSet::run_t __ccc20_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc20_Set_quads[] = {
    0x08000000};
    }

    const static UnicodeSet ccc20_Set{const_cast<UnicodeSet::run_t *>(__ccc20_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc20_Set_quads), 1, 0};

    /** Code Point Ranges for CCC21
    [05bc, 05bc]**/


    namespace {
    const static UnicodeSet::run_t __ccc21_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc21_Set_quads[] = {
    0x10000000};
    }

    const static UnicodeSet ccc21_Set{const_cast<UnicodeSet::run_t *>(__ccc21_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc21_Set_quads), 1, 0};

    /** Code Point Ranges for CCC22
    [05bd, 05bd]**/


    namespace {
    const static UnicodeSet::run_t __ccc22_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc22_Set_quads[] = {
    0x20000000};
    }

    const static UnicodeSet ccc22_Set{const_cast<UnicodeSet::run_t *>(__ccc22_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc22_Set_quads), 1, 0};

    /** Code Point Ranges for CCC23
    [05bf, 05bf]**/


    namespace {
    const static UnicodeSet::run_t __ccc23_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 34770}};
    const static UnicodeSet::bitquad_t  __ccc23_Set_quads[] = {
    0x80000000};
    }

    const static UnicodeSet ccc23_Set{const_cast<UnicodeSet::run_t *>(__ccc23_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc23_Set_quads), 1, 0};

    /** Code Point Ranges for CCC24
    [05c1, 05c1]**/


    namespace {
    const static UnicodeSet::run_t __ccc24_Set_runs[] = {
    {Empty, 46}, {Mixed, 1}, {Empty, 34769}};
    const static UnicodeSet::bitquad_t  __ccc24_Set_quads[] = {
    0x00000002};
    }

    const static UnicodeSet ccc24_Set{const_cast<UnicodeSet::run_t *>(__ccc24_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc24_Set_quads), 1, 0};

    /** Code Point Ranges for CCC25
    [05c2, 05c2]**/


    namespace {
    const static UnicodeSet::run_t __ccc25_Set_runs[] = {
    {Empty, 46}, {Mixed, 1}, {Empty, 34769}};
    const static UnicodeSet::bitquad_t  __ccc25_Set_quads[] = {
    0x00000004};
    }

    const static UnicodeSet ccc25_Set{const_cast<UnicodeSet::run_t *>(__ccc25_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc25_Set_quads), 1, 0};

    /** Code Point Ranges for CCC26
    [fb1e, fb1e]**/


    namespace {
    const static UnicodeSet::run_t __ccc26_Set_runs[] = {
    {Empty, 2008}, {Mixed, 1}, {Empty, 32807}};
    const static UnicodeSet::bitquad_t  __ccc26_Set_quads[] = {
    0x40000000};
    }

    const static UnicodeSet ccc26_Set{const_cast<UnicodeSet::run_t *>(__ccc26_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc26_Set_quads), 1, 0};

    /** Code Point Ranges for CCC27
    [064b, 064b], [08f0, 08f0]**/


    namespace {
    const static UnicodeSet::run_t __ccc27_Set_runs[] = {
    {Empty, 50}, {Mixed, 1}, {Empty, 20}, {Mixed, 1}, {Empty, 34744}};
    const static UnicodeSet::bitquad_t  __ccc27_Set_quads[] = {
    0x00000800, 0x00010000};
    }

    const static UnicodeSet ccc27_Set{const_cast<UnicodeSet::run_t *>(__ccc27_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc27_Set_quads), 2, 0};

    /** Code Point Ranges for CCC28
    [064c, 064c], [08f1, 08f1]**/


    namespace {
    const static UnicodeSet::run_t __ccc28_Set_runs[] = {
    {Empty, 50}, {Mixed, 1}, {Empty, 20}, {Mixed, 1}, {Empty, 34744}};
    const static UnicodeSet::bitquad_t  __ccc28_Set_quads[] = {
    0x00001000, 0x00020000};
    }

    const static UnicodeSet ccc28_Set{const_cast<UnicodeSet::run_t *>(__ccc28_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc28_Set_quads), 2, 0};

    /** Code Point Ranges for CCC29
    [064d, 064d], [08f2, 08f2]**/


    namespace {
    const static UnicodeSet::run_t __ccc29_Set_runs[] = {
    {Empty, 50}, {Mixed, 1}, {Empty, 20}, {Mixed, 1}, {Empty, 34744}};
    const static UnicodeSet::bitquad_t  __ccc29_Set_quads[] = {
    0x00002000, 0x00040000};
    }

    const static UnicodeSet ccc29_Set{const_cast<UnicodeSet::run_t *>(__ccc29_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc29_Set_quads), 2, 0};

    /** Code Point Ranges for CCC30
    [0618, 0618], [064e, 064e]**/


    namespace {
    const static UnicodeSet::run_t __ccc30_Set_runs[] = {
    {Empty, 48}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 34765}};
    const static UnicodeSet::bitquad_t  __ccc30_Set_quads[] = {
    0x01000000, 0x00004000};
    }

    const static UnicodeSet ccc30_Set{const_cast<UnicodeSet::run_t *>(__ccc30_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc30_Set_quads), 2, 0};

    /** Code Point Ranges for CCC31
    [0619, 0619], [064f, 064f]**/


    namespace {
    const static UnicodeSet::run_t __ccc31_Set_runs[] = {
    {Empty, 48}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 34765}};
    const static UnicodeSet::bitquad_t  __ccc31_Set_quads[] = {
    0x02000000, 0x00008000};
    }

    const static UnicodeSet ccc31_Set{const_cast<UnicodeSet::run_t *>(__ccc31_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc31_Set_quads), 2, 0};

    /** Code Point Ranges for CCC32
    [061a, 061a], [0650, 0650]**/


    namespace {
    const static UnicodeSet::run_t __ccc32_Set_runs[] = {
    {Empty, 48}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 34765}};
    const static UnicodeSet::bitquad_t  __ccc32_Set_quads[] = {
    0x04000000, 0x00010000};
    }

    const static UnicodeSet ccc32_Set{const_cast<UnicodeSet::run_t *>(__ccc32_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc32_Set_quads), 2, 0};

    /** Code Point Ranges for CCC33
    [0651, 0651]**/


    namespace {
    const static UnicodeSet::run_t __ccc33_Set_runs[] = {
    {Empty, 50}, {Mixed, 1}, {Empty, 34765}};
    const static UnicodeSet::bitquad_t  __ccc33_Set_quads[] = {
    0x00020000};
    }

    const static UnicodeSet ccc33_Set{const_cast<UnicodeSet::run_t *>(__ccc33_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc33_Set_quads), 1, 0};

    /** Code Point Ranges for CCC34
    [0652, 0652]**/


    namespace {
    const static UnicodeSet::run_t __ccc34_Set_runs[] = {
    {Empty, 50}, {Mixed, 1}, {Empty, 34765}};
    const static UnicodeSet::bitquad_t  __ccc34_Set_quads[] = {
    0x00040000};
    }

    const static UnicodeSet ccc34_Set{const_cast<UnicodeSet::run_t *>(__ccc34_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc34_Set_quads), 1, 0};

    /** Code Point Ranges for CCC35
    [0670, 0670]**/


    namespace {
    const static UnicodeSet::run_t __ccc35_Set_runs[] = {
    {Empty, 51}, {Mixed, 1}, {Empty, 34764}};
    const static UnicodeSet::bitquad_t  __ccc35_Set_quads[] = {
    0x00010000};
    }

    const static UnicodeSet ccc35_Set{const_cast<UnicodeSet::run_t *>(__ccc35_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc35_Set_quads), 1, 0};

    /** Code Point Ranges for CCC36
    [0711, 0711]**/


    namespace {
    const static UnicodeSet::run_t __ccc36_Set_runs[] = {
    {Empty, 56}, {Mixed, 1}, {Empty, 34759}};
    const static UnicodeSet::bitquad_t  __ccc36_Set_quads[] = {
    0x00020000};
    }

    const static UnicodeSet ccc36_Set{const_cast<UnicodeSet::run_t *>(__ccc36_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc36_Set_quads), 1, 0};

    /** Code Point Ranges for CCC84
    [0c55, 0c55]**/


    namespace {
    const static UnicodeSet::run_t __ccc84_Set_runs[] = {
    {Empty, 98}, {Mixed, 1}, {Empty, 34717}};
    const static UnicodeSet::bitquad_t  __ccc84_Set_quads[] = {
    0x00200000};
    }

    const static UnicodeSet ccc84_Set{const_cast<UnicodeSet::run_t *>(__ccc84_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc84_Set_quads), 1, 0};

    /** Code Point Ranges for CCC91
    [0c56, 0c56]**/


    namespace {
    const static UnicodeSet::run_t __ccc91_Set_runs[] = {
    {Empty, 98}, {Mixed, 1}, {Empty, 34717}};
    const static UnicodeSet::bitquad_t  __ccc91_Set_quads[] = {
    0x00400000};
    }

    const static UnicodeSet ccc91_Set{const_cast<UnicodeSet::run_t *>(__ccc91_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc91_Set_quads), 1, 0};

    /** Code Point Ranges for CCC103
    [0e38, 0e39]**/


    namespace {
    const static UnicodeSet::run_t __ccc103_Set_runs[] = {
    {Empty, 113}, {Mixed, 1}, {Empty, 34702}};
    const static UnicodeSet::bitquad_t  __ccc103_Set_quads[] = {
    0x03000000};
    }

    const static UnicodeSet ccc103_Set{const_cast<UnicodeSet::run_t *>(__ccc103_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc103_Set_quads), 1, 0};

    /** Code Point Ranges for CCC107
    [0e48, 0e4b]**/


    namespace {
    const static UnicodeSet::run_t __ccc107_Set_runs[] = {
    {Empty, 114}, {Mixed, 1}, {Empty, 34701}};
    const static UnicodeSet::bitquad_t  __ccc107_Set_quads[] = {
    0x00000f00};
    }

    const static UnicodeSet ccc107_Set{const_cast<UnicodeSet::run_t *>(__ccc107_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc107_Set_quads), 1, 0};

    /** Code Point Ranges for CCC118
    [0eb8, 0eb9]**/


    namespace {
    const static UnicodeSet::run_t __ccc118_Set_runs[] = {
    {Empty, 117}, {Mixed, 1}, {Empty, 34698}};
    const static UnicodeSet::bitquad_t  __ccc118_Set_quads[] = {
    0x03000000};
    }

    const static UnicodeSet ccc118_Set{const_cast<UnicodeSet::run_t *>(__ccc118_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc118_Set_quads), 1, 0};

    /** Code Point Ranges for CCC122
    [0ec8, 0ecb]**/


    namespace {
    const static UnicodeSet::run_t __ccc122_Set_runs[] = {
    {Empty, 118}, {Mixed, 1}, {Empty, 34697}};
    const static UnicodeSet::bitquad_t  __ccc122_Set_quads[] = {
    0x00000f00};
    }

    const static UnicodeSet ccc122_Set{const_cast<UnicodeSet::run_t *>(__ccc122_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc122_Set_quads), 1, 0};

    /** Code Point Ranges for CCC129
    [0f71, 0f71]**/


    namespace {
    const static UnicodeSet::run_t __ccc129_Set_runs[] = {
    {Empty, 123}, {Mixed, 1}, {Empty, 34692}};
    const static UnicodeSet::bitquad_t  __ccc129_Set_quads[] = {
    0x00020000};
    }

    const static UnicodeSet ccc129_Set{const_cast<UnicodeSet::run_t *>(__ccc129_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc129_Set_quads), 1, 0};

    /** Code Point Ranges for CCC130
    [0f72, 0f72], [0f7a, 0f7d], [0f80, 0f80]**/


    namespace {
    const static UnicodeSet::run_t __ccc130_Set_runs[] = {
    {Empty, 123}, {Mixed, 2}, {Empty, 34691}};
    const static UnicodeSet::bitquad_t  __ccc130_Set_quads[] = {
    0x3c040000, 0x00000001};
    }

    const static UnicodeSet ccc130_Set{const_cast<UnicodeSet::run_t *>(__ccc130_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc130_Set_quads), 2, 0};

    /** Code Point Ranges for CCC132
    [0f74, 0f74]**/


    namespace {
    const static UnicodeSet::run_t __ccc132_Set_runs[] = {
    {Empty, 123}, {Mixed, 1}, {Empty, 34692}};
    const static UnicodeSet::bitquad_t  __ccc132_Set_quads[] = {
    0x00100000};
    }

    const static UnicodeSet ccc132_Set{const_cast<UnicodeSet::run_t *>(__ccc132_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc132_Set_quads), 1, 0};

    /** Code Point Ranges for ATB
    [0321, 0322], [0327, 0328], [1dd0, 1dd0]**/


    namespace {
    const static UnicodeSet::run_t __atb_Set_runs[] = {
    {Empty, 25}, {Mixed, 1}, {Empty, 212}, {Mixed, 1}, {Empty, 34577}};
    const static UnicodeSet::bitquad_t  __atb_Set_quads[] = {
    0x00000186, 0x00010000};
    }

    const static UnicodeSet atb_Set{const_cast<UnicodeSet::run_t *>(__atb_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__atb_Set_quads), 2, 0};

    /** Code Point Ranges for ATA
    [1dce, 1dce]**/


    namespace {
    const static UnicodeSet::run_t __ata_Set_runs[] = {
    {Empty, 238}, {Mixed, 1}, {Empty, 34577}};
    const static UnicodeSet::bitquad_t  __ata_Set_quads[] = {
    0x00004000};
    }

    const static UnicodeSet ata_Set{const_cast<UnicodeSet::run_t *>(__ata_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__ata_Set_quads), 1, 0};

    /** Code Point Ranges for ATAR
    [031b, 031b], [0f39, 0f39], [1d165, 1d166], [1d16e, 1d172]**/


    namespace {
    const static UnicodeSet::run_t __atar_Set_runs[] = {
    {Empty, 24}, {Mixed, 1}, {Empty, 96}, {Mixed, 1}, {Empty, 3601},
    {Mixed, 1}, {Empty, 31092}};
    const static UnicodeSet::bitquad_t  __atar_Set_quads[] = {
    0x08000000, 0x02000000, 0x0007c060};
    }

    const static UnicodeSet atar_Set{const_cast<UnicodeSet::run_t *>(__atar_Set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__atar_Set_quads), 3, 0};

    /** Code Point Ranges for BL
    [302a, 302a]**/


    namespace {
    const static UnicodeSet::run_t __bl_Set_runs[] = {
    {Empty, 385}, {Mixed, 1}, {Empty, 34430}};
    const static UnicodeSet::bitquad_t  __bl_Set_quads[] = {
    0x00000400};
    }

    const static UnicodeSet bl_Set{const_cast<UnicodeSet::run_t *>(__bl_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__bl_Set_quads), 1, 0};

    /** Code Point Ranges for B
    [0316, 0319], [031c, 0320], [0323, 0326], [0329, 0333], [0339, 033c],
    [0347, 0349], [034d, 034e], [0353, 0356], [0359, 035a], [0591, 0591],
    [0596, 0596], [059b, 059b], [05a2, 05a7], [05aa, 05aa], [05c5, 05c5],
    [0655, 0656], [065c, 065c], [065f, 065f], [06e3, 06e3], [06ea, 06ea],
    [06ed, 06ed], [0731, 0731], [0734, 0734], [0737, 0739], [073b, 073c],
    [073e, 073e], [0742, 0742], [0744, 0744], [0746, 0746], [0748, 0748],
    [07f2, 07f2], [07fd, 07fd], [0859, 085b], [08d3, 08d3], [08e3, 08e3],
    [08e6, 08e6], [08e9, 08e9], [08ed, 08ef], [08f6, 08f6], [08f9, 08fa],
    [0952, 0952], [0f18, 0f19], [0f35, 0f35], [0f37, 0f37], [0fc6, 0fc6],
    [108d, 108d], [193b, 193b], [1a18, 1a18], [1a7f, 1a7f], [1ab5, 1aba],
    [1abd, 1abd], [1abf, 1ac0], [1b6c, 1b6c], [1cd5, 1cd9], [1cdc, 1cdf],
    [1ced, 1ced], [1dc2, 1dc2], [1dca, 1dca], [1dcf, 1dcf], [1df9, 1df9],
    [1dfd, 1dfd], [1dff, 1dff], [20e8, 20e8], [20ec, 20ef], [a92b, a92d],
    [aab4, aab4], [fe27, fe2d], [101fd, 101fd], [102e0, 102e0],
    [10a0d, 10a0d], [10a3a, 10a3a], [10ae6, 10ae6], [10f46, 10f47],
    [10f4b, 10f4b], [10f4d, 10f50], [1d17b, 1d182], [1d18a, 1d18b],
    [1e8d0, 1e8d6]**/


    namespace {
    const static UnicodeSet::run_t __b_Set_runs[] = {
    {Empty, 24}, {Mixed, 3}, {Empty, 17}, {Mixed, 3}, {Empty, 3},
    {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 4},
    {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 3}, {Mixed, 2}, {Empty, 2},
    {Mixed, 1}, {Empty, 45}, {Mixed, 2}, {Empty, 4}, {Mixed, 1}, {Empty, 5},
    {Mixed, 1}, {Empty, 68}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 2},
    {Mixed, 1}, {Empty, 1}, {Mixed, 2}, {Empty, 4}, {Mixed, 1}, {Empty, 10},
    {Mixed, 2}, {Empty, 6}, {Mixed, 2}, {Empty, 23}, {Mixed, 1},
    {Empty, 1089}, {Mixed, 1}, {Empty, 11}, {Mixed, 1}, {Empty, 667},
    {Mixed, 1}, {Empty, 29}, {Mixed, 1}, {Empty, 7}, {Mixed, 1},
    {Empty, 56}, {Mixed, 2}, {Empty, 5}, {Mixed, 1}, {Empty, 34},
    {Mixed, 1}, {Empty, 1552}, {Mixed, 2}, {Empty, 185}, {Mixed, 1},
    {Empty, 30905}};
    const static UnicodeSet::bitquad_t  __b_Set_quads[] = {
    0xf3c00000, 0x1e0ffe79, 0x06786380, 0x08420000, 0x000004fc, 0x00000020,
    0x90600000, 0x00002408, 0x5b920000, 0x00000154, 0x20040000, 0x0e000000,
    0x00080000, 0x0640e248, 0x00040000, 0x03000000, 0x00a00000, 0x00000040,
    0x00002000, 0x08000000, 0x01000000, 0x80000000, 0xa7e00000, 0x00000001,
    0x00001000, 0xf3e00000, 0x00002000, 0x00008404, 0xa2000000, 0x0000f100,
    0x00003800, 0x00100000, 0x00003f80, 0x20000000, 0x00000001, 0x00002000,
    0x04000000, 0x00000040, 0x0001e8c0, 0xf8000000, 0x00000c07, 0x007f0000};
    }

    const static UnicodeSet b_Set{const_cast<UnicodeSet::run_t *>(__b_Set_runs), 61, 0, const_cast<UnicodeSet::bitquad_t *>(__b_Set_quads), 42, 0};

    /** Code Point Ranges for BR
    [059a, 059a], [05ad, 05ad], [1939, 1939], [302d, 302d]**/


    namespace {
    const static UnicodeSet::run_t __br_Set_runs[] = {
    {Empty, 44}, {Mixed, 2}, {Empty, 155}, {Mixed, 1}, {Empty, 183},
    {Mixed, 1}, {Empty, 34430}};
    const static UnicodeSet::bitquad_t  __br_Set_quads[] = {
    0x04000000, 0x00002000, 0x02000000, 0x00002000};
    }

    const static UnicodeSet br_Set{const_cast<UnicodeSet::run_t *>(__br_Set_runs), 7, 0, const_cast<UnicodeSet::bitquad_t *>(__br_Set_quads), 4, 0};

    /** Code Point Ranges for L
    [302e, 302f]**/


    namespace {
    const static UnicodeSet::run_t __l_Set_runs[] = {
    {Empty, 385}, {Mixed, 1}, {Empty, 34430}};
    const static UnicodeSet::bitquad_t  __l_Set_quads[] = {
    0x0000c000};
    }

    const static UnicodeSet l_Set{const_cast<UnicodeSet::run_t *>(__l_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__l_Set_quads), 1, 0};

    /** Code Point Ranges for R
    [1d16d, 1d16d]**/


    namespace {
    const static UnicodeSet::run_t __r_Set_runs[] = {
    {Empty, 3723}, {Mixed, 1}, {Empty, 31092}};
    const static UnicodeSet::bitquad_t  __r_Set_quads[] = {
    0x00002000};
    }

    const static UnicodeSet r_Set{const_cast<UnicodeSet::run_t *>(__r_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__r_Set_quads), 1, 0};

    /** Code Point Ranges for AL
    [05ae, 05ae], [18a9, 18a9], [1df7, 1df8], [302b, 302b]**/


    namespace {
    const static UnicodeSet::run_t __al_Set_runs[] = {
    {Empty, 45}, {Mixed, 1}, {Empty, 151}, {Mixed, 1}, {Empty, 41},
    {Mixed, 1}, {Empty, 145}, {Mixed, 1}, {Empty, 34430}};
    const static UnicodeSet::bitquad_t  __al_Set_quads[] = {
    0x00004000, 0x00000200, 0x01800000, 0x00000800};
    }

    const static UnicodeSet al_Set{const_cast<UnicodeSet::run_t *>(__al_Set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__al_Set_quads), 4, 0};

    /** Code Point Ranges for A
    [0300, 0314], [033d, 0344], [0346, 0346], [034a, 034c], [0350, 0352],
    [0357, 0357], [035b, 035b], [0363, 036f], [0483, 0487], [0592, 0595],
    [0597, 0599], [059c, 05a1], [05a8, 05a9], [05ab, 05ac], [05af, 05af],
    [05c4, 05c4], [0610, 0617], [0653, 0654], [0657, 065b], [065d, 065e],
    [06d6, 06dc], [06df, 06e2], [06e4, 06e4], [06e7, 06e8], [06eb, 06ec],
    [0730, 0730], [0732, 0733], [0735, 0736], [073a, 073a], [073d, 073d],
    [073f, 0741], [0743, 0743], [0745, 0745], [0747, 0747], [0749, 074a],
    [07eb, 07f1], [07f3, 07f3], [0816, 0819], [081b, 0823], [0825, 0827],
    [0829, 082d], [08d4, 08e1], [08e4, 08e5], [08e7, 08e8], [08ea, 08ec],
    [08f3, 08f5], [08f7, 08f8], [08fb, 08ff], [0951, 0951], [0953, 0954],
    [09fe, 09fe], [0f82, 0f83], [0f86, 0f87], [135d, 135f], [17dd, 17dd],
    [193a, 193a], [1a17, 1a17], [1a75, 1a7c], [1ab0, 1ab4], [1abb, 1abc],
    [1b6b, 1b6b], [1b6d, 1b73], [1cd0, 1cd2], [1cda, 1cdb], [1ce0, 1ce0],
    [1cf4, 1cf4], [1cf8, 1cf9], [1dc0, 1dc1], [1dc3, 1dc9], [1dcb, 1dcc],
    [1dd1, 1df5], [1dfb, 1dfb], [1dfe, 1dfe], [20d0, 20d1], [20d4, 20d7],
    [20db, 20dc], [20e1, 20e1], [20e7, 20e7], [20e9, 20e9], [20f0, 20f0],
    [2cef, 2cf1], [2de0, 2dff], [a66f, a66f], [a674, a67d], [a69e, a69f],
    [a6f0, a6f1], [a8e0, a8f1], [aab0, aab0], [aab2, aab3], [aab7, aab8],
    [aabe, aabf], [aac1, aac1], [fe20, fe26], [fe2e, fe2f], [10376, 1037a],
    [10a0f, 10a0f], [10a38, 10a38], [10ae5, 10ae5], [10d24, 10d27],
    [10eab, 10eac], [10f48, 10f4a], [10f4c, 10f4c], [11100, 11102],
    [11366, 1136c], [11370, 11374], [1145e, 1145e], [16b30, 16b36],
    [1d185, 1d189], [1d1aa, 1d1ad], [1d242, 1d244], [1e000, 1e006],
    [1e008, 1e018], [1e01b, 1e021], [1e023, 1e024], [1e026, 1e02a],
    [1e130, 1e136], [1e2ec, 1e2ef], [1e944, 1e949]**/


    namespace {
    const static UnicodeSet::run_t __a_Set_runs[] = {
    {Empty, 24}, {Mixed, 4}, {Empty, 8}, {Mixed, 1}, {Empty, 7}, {Mixed, 3},
    {Empty, 1}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 3}, {Mixed, 2},
    {Empty, 1}, {Mixed, 2}, {Empty, 4}, {Mixed, 3}, {Empty, 4}, {Mixed, 2},
    {Empty, 2}, {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 44}, {Mixed, 1},
    {Empty, 29}, {Mixed, 1}, {Empty, 35}, {Mixed, 1}, {Empty, 10},
    {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 2}, {Mixed, 1}, {Empty, 1},
    {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 10}, {Mixed, 2}, {Empty, 6},
    {Mixed, 2}, {Empty, 22}, {Mixed, 2}, {Empty, 95}, {Mixed, 1},
    {Empty, 7}, {Full, 1}, {Empty, 963}, {Mixed, 2}, {Empty, 2}, {Mixed, 1},
    {Empty, 15}, {Mixed, 1}, {Empty, 13}, {Mixed, 2}, {Empty, 666},
    {Mixed, 1}, {Empty, 41}, {Mixed, 1}, {Empty, 52}, {Mixed, 2},
    {Empty, 5}, {Mixed, 1}, {Empty, 17}, {Mixed, 1}, {Empty, 11},
    {Mixed, 1}, {Empty, 4}, {Mixed, 1}, {Empty, 13}, {Mixed, 1},
    {Empty, 18}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 694},
    {Mixed, 1}, {Empty, 818}, {Mixed, 2}, {Empty, 4}, {Mixed, 1},
    {Empty, 109}, {Mixed, 2}, {Empty, 7}, {Mixed, 1}, {Empty, 13},
    {Mixed, 1}, {Empty, 50}, {Mixed, 1}, {Empty, 30901}};
    const static UnicodeSet::bitquad_t  __a_Set_quads[] = {
    0x001fffff, 0xe0000000, 0x08871c5f, 0x0000fff8, 0x000000f8, 0xf3bc0000,
    0x00009b03, 0x00000010, 0x00ff0000, 0x6f980000, 0x9fc00000, 0x00001997,
    0xa46d0000, 0x000006ab, 0x000bf800, 0xfbc00000, 0x00003eef, 0xfff00000,
    0xf9b81db3, 0x001a0000, 0x40000000, 0x000000cc, 0xe0000000, 0x20000000,
    0x04000000, 0x00800000, 0x1fe00000, 0x181f0000, 0x000fe800, 0x0c070000,
    0x03100001, 0xfffe1bfb, 0x483fffff, 0x18f30000, 0x00010282, 0x00038000,
    0x3ff08000, 0xc0000000, 0x00030000, 0x0003ffff, 0xc18d0000, 0x00000002,
    0x0000c07f, 0x07c00000, 0x00008000, 0x01000000, 0x00000020, 0x000000f0,
    0x00001800, 0x00001700, 0x00000007, 0x001f1fc0, 0x40000000, 0x007f0000,
    0x000003e0, 0x00003c00, 0x0000001c, 0xf9ffff7f, 0x000007db, 0x007f0000,
    0x0000f000, 0x000003f0};
    }

    const static UnicodeSet a_Set{const_cast<UnicodeSet::run_t *>(__a_Set_runs), 91, 0, const_cast<UnicodeSet::bitquad_t *>(__a_Set_quads), 62, 0};

    /** Code Point Ranges for AR
    [0315, 0315], [031a, 031a], [0358, 0358], [1df6, 1df6], [302c, 302c]**/


    namespace {
    const static UnicodeSet::run_t __ar_Set_runs[] = {
    {Empty, 24}, {Mixed, 1}, {Empty, 1}, {Mixed, 1}, {Empty, 212},
    {Mixed, 1}, {Empty, 145}, {Mixed, 1}, {Empty, 34430}};
    const static UnicodeSet::bitquad_t  __ar_Set_quads[] = {
    0x04200000, 0x01000000, 0x00400000, 0x00001000};
    }

    const static UnicodeSet ar_Set{const_cast<UnicodeSet::run_t *>(__ar_Set_runs), 9, 0, const_cast<UnicodeSet::bitquad_t *>(__ar_Set_quads), 4, 0};

    /** Code Point Ranges for DB
    [035c, 035c], [035f, 035f], [0362, 0362], [1dfc, 1dfc]**/


    namespace {
    const static UnicodeSet::run_t __db_Set_runs[] = {
    {Empty, 26}, {Mixed, 2}, {Empty, 211}, {Mixed, 1}, {Empty, 34576}};
    const static UnicodeSet::bitquad_t  __db_Set_quads[] = {
    0x90000000, 0x00000004, 0x10000000};
    }

    const static UnicodeSet db_Set{const_cast<UnicodeSet::run_t *>(__db_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__db_Set_quads), 3, 0};

    /** Code Point Ranges for DA
    [035d, 035e], [0360, 0361], [1dcd, 1dcd]**/


    namespace {
    const static UnicodeSet::run_t __da_Set_runs[] = {
    {Empty, 26}, {Mixed, 2}, {Empty, 210}, {Mixed, 1}, {Empty, 34577}};
    const static UnicodeSet::bitquad_t  __da_Set_quads[] = {
    0x60000000, 0x00000003, 0x00002000};
    }

    const static UnicodeSet da_Set{const_cast<UnicodeSet::run_t *>(__da_Set_runs), 5, 0, const_cast<UnicodeSet::bitquad_t *>(__da_Set_quads), 3, 0};

    /** Code Point Ranges for IS
    [0345, 0345]**/


    namespace {
    const static UnicodeSet::run_t __is_Set_runs[] = {
    {Empty, 26}, {Mixed, 1}, {Empty, 34789}};
    const static UnicodeSet::bitquad_t  __is_Set_quads[] = {
    0x00000020};
    }

    const static UnicodeSet is_Set{const_cast<UnicodeSet::run_t *>(__is_Set_runs), 3, 0, const_cast<UnicodeSet::bitquad_t *>(__is_Set_quads), 1, 0};

    /** Code Point Ranges for CCC133
    **/


    namespace {
    const static UnicodeSet::run_t __ccc133_Set_runs[] = {
    {Empty, 34816}};
    const static UnicodeSet::bitquad_t * const __ccc133_Set_quads = nullptr;
    }

    const static UnicodeSet ccc133_Set{const_cast<UnicodeSet::run_t *>(__ccc133_Set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__ccc133_Set_quads), 0, 0};

    /** Code Point Ranges for ATBL
    **/


    namespace {
    const static UnicodeSet::run_t __atbl_Set_runs[] = {
    {Empty, 34816}};
    const static UnicodeSet::bitquad_t * const __atbl_Set_quads = nullptr;
    }

    const static UnicodeSet atbl_Set{const_cast<UnicodeSet::run_t *>(__atbl_Set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__atbl_Set_quads), 0, 0};

    static EnumeratedPropertyObject property_object
        {ccc,
        CCC_ns::independent_prop_values,
        std::move(CCC_ns::enum_names),
        std::move(CCC_ns::value_names),
        std::move(CCC_ns::aliases_only_map),{
        &nr_Set, &ov_Set, &hanr_Set, &nk_Set, &kv_Set, &vr_Set, &ccc10_Set,
        &ccc11_Set, &ccc12_Set, &ccc13_Set, &ccc14_Set, &ccc15_Set,
        &ccc16_Set, &ccc17_Set, &ccc18_Set, &ccc19_Set, &ccc20_Set,
        &ccc21_Set, &ccc22_Set, &ccc23_Set, &ccc24_Set, &ccc25_Set,
        &ccc26_Set, &ccc27_Set, &ccc28_Set, &ccc29_Set, &ccc30_Set,
        &ccc31_Set, &ccc32_Set, &ccc33_Set, &ccc34_Set, &ccc35_Set,
        &ccc36_Set, &ccc84_Set, &ccc91_Set, &ccc103_Set, &ccc107_Set,
        &ccc118_Set, &ccc122_Set, &ccc129_Set, &ccc130_Set, &ccc132_Set,
        &atb_Set, &ata_Set, &atar_Set, &bl_Set, &b_Set, &br_Set, &l_Set,
        &r_Set, &al_Set, &a_Set, &ar_Set, &db_Set, &da_Set, &is_Set,
        &ccc133_Set, &atbl_Set
        }};
    }
PropertyObject * get_CCC_PropertyObject() {  return & CCC_ns::property_object; }
}
