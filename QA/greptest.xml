
<greptest>
<datafile id="simple1">
A few lines of input
in this simple test file
provide fodder for some simple
regexp tests.
</datafile>

<datafile id="bounded_charclass">

=a;
=bb;
=ccc;
=dddd;
=eeeee;
=ffffff;
=ggggggg;
=hhhhhhhh;
=iiiiiiiii;
=jjjjjjjjjj;
=kkkkkkkkkkk;
=llllllllllll;
=mmmmmmmmmmmmm;
=nnnnnnnnnnnnnn;
=ooooooooooooooo;
=pppppppppppppppp;
=qqqqqqqqqqqqqqqqq;
=rrrrrrrrrrrrrrrrrr;
=sssssssssssssssssss;
=tttttttttttttttttttt;
=uuuuuuuuuuuuuuuuuuuuu;
=vvvvvvvvvvvvvvvvvvvvvv;
=wwwwwwwwwwwwwwwwwwwwwww;
=xxxxxxxxxxxxxxxxxxxxxxxx;
=yyyyyyyyyyyyyyyyyyyyyyyyy;
=zzzzzzzzzzzzzzzzzzzzzzzzzz;
=0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
=01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
=012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
=0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
=01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
=012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
=01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
=012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789;
</datafile>

<datafile id="RangeAltSeqMatchStarKplusWhileNotOptAny">
Dogbe hat ,/R Cat dt bt bt bt bt bat MzzzzzzzzT MaT MT McT MdT MeT M0T M1T M2T M3T M4T
Dogbe hit foffasm zza " Dog Cat 1, 4= Dog ['zxcvbnm,./R Dog MT
Dogbe hot foffasm czzb " MazazazTDogogogogog Cat 1, 4= Dog [;'zxcvbnm,./R Dogtp
Dogbe foffasm dooooc MazT" Dog Cat 1, 4= Dog [Sqwertyuiopasdfghjkl;'zxcvbnm,./R Dog Cat
Dogbe foffasm ezzzzzzzzzzzzzzt "tp Dog Cat 12, ktp 4= Dog [jkl;'zxcvbnm,./R Dogtp
Dogbe foffasm zze " Dog CatMjT , = Dog [;'zxcvbzzznm,./R Dog MazazT cat
zzcztpDogbe fofasm zazazz4z Doggg Cat 6, azzzzz= Dog [;'zxcvbonm,.R Dog TUT Dog
Natatatats Nats T M0T ed bazbzczdzt et
Dfg dc fog Nt ezt
MazazazazazazazT
</datafile>


<datafile id="StartEndAlt">
The ever-growing social networks and social media provide invaluable 
sources of information for modeling the behavior of users. High-quality 
user models enable superior services and functions for end users. In this 
talk, I will present several examples of user modeling based on social 
networks and social media. I will first describe our research in modeling 
users' information preferences on Microblogs using a novel user message 
model. I will then discuss our work on extracting users' daily activities, 
such as dining and shopping, that inherently reflect their habits, intents and preferences. 
I explain our novel transfer learning solution via a collaborative boosting 
framework comprising a text-to-activity classifier for socially connected users. 
I will also describe our research on user modeling in multiple, overlapping 
social networks in a 'composite social network' setting. I will show the benefits of 
modeling the dynamics of composite networks, where the evolution processes 
of different networks are jointly considered. Finally, I will explain our
research on finding social spammers in large social networks.
</datafile>

<datafile id="special_characters">
The ] character may appear as the first character inside character class
expressions such as []>)].
In this case, the ] character does not terminate the character class, but
stands for itself.
Similarly, the - character may appear as the first or last character
in a character class expression, such as [-] or []-].  Occurring as the
first or last character in a class means that it is a member of the
class, instead of being interpreted as a range metacharacter.
For both ] and -, occurrence as the first character could mean after
an opening [^ mark for negated character class.   That is [^]] is the
class that matches everything but ], while [^-] is the class that matches
anything but -.
----------
The above line does not match [^-].
----------
]]]]]]]]]]
^^^^^^^^^^
</datafile>

<datafile id="ips">  
201.250.180.213
236.4.20.176
137.96.194.126
245.16.96.112
245.19.58.43
131.176.131.248
248.160.22.214
156.179.88.103
174.13.62.156
256.122.123.5
16.81.78.152
177.17.24.167
32.120.25.23
138.82.66.15
4.196.8.251
101.30.211.3
209.44.105.129
56.166.31.72
247.108.224.170
124.248.83.156
113.107.178.250
189.243.10.192
184.18.189.31
48.145.33.2
188.137.131.244
49.161.61.42
14.31.211.138
24.39.39.136
146.217.131.80
205.141.18.135
159.207.166.206
96.211.62.20
23.148.44.140
109.159.129.161
183.230.172.129
48.178.63.192
224.41.190.207
144.114.56.31
151.205.132.247
161.194.12.184
87.55.69.195
214.198.102.143
173.19.17.220
197.80.158.167
121.94.119.11
208.174.42.104
124.173.96.31
112.107.215.199
162.30.140.121
227.241.9.145
6.26.111.203
106.14.115.226
107.233.237.60
153.24.163.23
197.4.54.55
111.14.253.18
43.138.139.15
125.148.160.131
173.16.80.24
30.194.250.136
173.233.196.71
</datafile>

<datafile id="emails">
danielsmithinvestment01@yahoo.com
vivian.johnp24@gmail.com
drjohnsonadamscompany@mail.com
fb43@kurtz.onmicrosoft.com
delphinehakizimana11@zipmail.com.br
mrs.swp@outlook.com
engr.saidsalem@workmail@co.za
suleadams342003@gmail.com
info.soopercredit@qq.com
aliceisdale@yahoo.com
elizabethjohnson134@hotmail.com
anikaebertus@yahoo.se
bayford_A@qq.biz
hijabfarid@hotmail.com
zaringwarkipkalya@aol.fr
monahmeddd2014@gmail.com
hijab.farid@hotmail.cam
dennis.melcher01@gmail.com
publicitycbn@gmail.com
michaelkruegerloancompany@gmail.com
michaelkruegerloancompany@gmail.co&#x0313;m
ben525387@gmail.com
dgill_pwc@mynet.com
dgill_pwc1@terra.com
tuthpala12@gmail.com
johanthony1956@e-mail.museum
christopher.white01@live.co.uk
anitaloanfirm@live.com
aliadamssolicitors@gmail.com
jonathanevans000@yahoo.com
jwatson494@yahoo.com
ec21buyer@gmail.com
sussanbien2012@gmail.com
info@pavochenkofinance.tk
honbarrijzdende@gmail.com
ernestebi699@e-mail.ua
siwei4489@yahoo.com.hk
peterkoffi.info@gmail.com
zenithbankplc106@yahoo.com
fidelitybankplc505@aim.com
kymcrox03@gmail.com
esqharsmith2015@gmail.com
facebooklottdepartment936@gmail.com
lt_industries@outlook.com
cpfi.ltd@live.nope
changying33@yahoo.com
abdoul0000hamid@gmail.com
foreign_exchange@live.co.uk
hdcliveuk@live.com
fatimahhassan1@fengv.com
mikejosephloanfirm202@gmail.com
skyebanktg@rediffmail.com
mrsbellafirm001@gmail.com
financtreasury.uk@email.com
admin@senagua.gob.ec
m2424m@live.com
stevewilliam197@gmail.com
mrmathew.martins@yahoo.com
benjaminwilliam917@gmail.com
benja&#x031C;&#x030A;minwilliam917@gmail.com
abe.shelton1@lenta.ru
owengah@live.com
dlserv01@aol.com
ee.apala@gmail.com
bbcpaydpt@live.com
undpfn20114@gmail.com
janievitek@gmail.com
creditservice@careceo.com
cying011@yahoo.com
christophe_gbeffa@hotmail.fr
christophe_gbeffa@hotmail.f&#x0301;r
christophe_gbeffa@hotmail.fr&#x0301;
maracasinter@yahoo.com
iquad94@yahoo.com
emil.jacobs@mail.com 
emil.jacob@mail.ru
mgremittance.info@yahoo.co.uk
raymondmorgan02@hotmail.com
mrs_sabahibrahim@ymail.com
drthomascole7@gmail.com
barrp.agbo@outlook.fr
mrsmorganhenlenloanfirm@gmail.com
barr.njdmdcggroup@yahoo.com
hknbddhb@gmail.com
michelfoucault@outlook.fr
micheÃÅlfoucault@outlook.fr
goldsupply@rediffmail.com
dvdmumbai2000@gmail.com
mikefinance02@gmail.com
moonstoneking@gmail.com
peterstone586@gmail.com
denis_andre_phillipe@aol.com
roberto.greco@aol.fr
mark_grant112@hotmail.com
nokiaxprizefoundationclaims@coolsite.net
claims14_88@libero.it
hon.leo.price@gmail.com
info_unicef@consultant.com
u_deliverycompany@yahoo.com
eldhabiblamah152@gmail.com
governorsanusi.lamido@yahoo.com.ph
emyjean18@zipmail.com.br
winningemail@luckymail.com
barristervictor_odo@yahoo.com.ph
nokia.global_promo@consultant.com
headoffice_cv20448bd@libero.it
ab.issah@yahoo.com
ab_issah@yahoo.com.tw
rifaatassad552@yahoo.com.hk
barrsandilekhumalo@gmail.com
gkiir@qq.nope
ibrahimahmed3@aol.fr
efccin@e-mail.ua
dheerajrelan@gmail.com
al-fardan@al-fardan-export.com
mellissa000@hotmail.com
verakones01@hotmail.com
kivaloanfinance999@gmail.com
atm.paydept00@outlook.com
claudiokristiansen@yahoo.co.za
info.kmf@gmx.com
mambojames689@yahoo.co.uk
a.salam2014bf@terra.com
vanessappillip99@yahoo.com
vanessaphillip@live.com
alshat@emirates.net.ae
</datafile>

<datafile id="floats">
9.7
16.07
27.675
86.162
189.36792
859.073357
1377.9901658
1514.73870948
2096.400730002
2551.2050637982
4615.26633110512
8438.114838435104
32036.61593959936
36346.00047312989
144826.22607192554
+3.1eE5
+4.992
+2.425E+10
9.5808eE10
9.5808e10
+0.416968e+0
-0.3162108-0
+0.03069882+0
+0.132378721eE+-0
0.43416726670
+-0.43416726669e+0
+-0.01976811464eE0
-0.0197681146402e+-0
0.02241943884633+0
+-0.004803458640268eE-0
+0.0008164744337844E+-0
0.00266694045551024E+0
+-0.0112132498185713980
0.0003485919632198585e+-0
-0.002599516682231249E+0
0.02315181236174286E+0
+0.0116575240311669+0
+-0.06536499789006515eE+-0
+20.914506804599366eE+-21
+-20.062034167562416eE+20
35.90964837611389E-1
+-2.5508584172940916E-0
0.6532888027107796eE0
+0.02530509823216493E0
-0.016818871414735502eE+-0
0.01041535031385609E+0
-0.017042043493346013eE0
-0.015882934560610525eE0
+-0.016271711916486607E+0
-1.1521320712689072e-1
0.5796638373356339+2
-6.78321804536429e+-8
+-18.6367662944200621
+20.63224902663965eE21
+-16.78193317331960417
10.049610186973338-21
64.51055985925869eE+-65
+71.7394478831031eE+115
+114.85412411903206eE-53
+150.50431315365464e116
-388.86846448777743eE+-334
+-75.50343657758405E-76
-75.50343657758405eE-151
-216.9511816984773E176
-175.798740561957eE-178
+13.25998057047805113
+3.745360060000819eE+27
-27.329937066467846E23
13.34390770072532E+35
+34.68092648862783eE+-36
+-35.6389454910375E-160
+493.90278138088945eE+-1037
1037.4462608675137+356
-356.17279137431007E+983
</datafile>

<datafile id = "CRLF">line with CRLF &#13;&#10;two lines with LFCR &#10;&#13;final line 
</datafile>

<grepcase regexp="^$" datafile="CRLF" flags="-c -Unicode-lines" grepcount="1"/>
<grepcase regexp="^$" datafile="CRLF" flags="-c -v -Unicode-lines" grepcount="3"/>
<grepcase regexp="^.*$" datafile="CRLF" flags="-c -Unicode-lines" grepcount="4"/>
<grepcase regexp="" datafile="CRLF" flags="-c -Unicode-lines" grepcount="4"/>

 <datafile id = "LU_test">
The following line has LATIN CAPITAL LETTER G WITH MACRON in single quotes.
'&#x1E20;'
</datafile>

<datafile id="4KiB-onepage">abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmnopqrstuvwxyzABCDEFGhIJKLMNOPQRstuVWXYZ
abcdefghijklmno</datafile>
<grepcase regexp="ab" datafile="StartEndAlt" greplines="2 4 9 10"/>
<grepcase regexp="a*b" datafile="StartEndAlt" greplines="2 3 4 5 6 7 9 10 12 13"/>
<grepcase regexp="ab*" datafile="StartEndAlt" greplines="2 3 4 5 6 7 8 9 10 11 12 13 14 15 16"/>
<grepcase regexp="^user|^I|our$" datafile="StartEndAlt" greplines="4 7 10 12 15"/>
<grepcase regexp="fe|si" datafile="simple1" greplines="2 3 4"/>
<grepcase regexp="le$" datafile="simple1" greplines="3 4"/>
<grepcase regexp="fe|si" datafile="." flags="-c -r -include=simpl*" grepcount="3"/>
<grepcase regexp="in" datafile="simple1" greplines="2 3"/>
<grepcase regexp="in" datafile="." flags="-c -r -include=s* -exclude=s[A-Za-hj-z]*" grepcount="2"/>
<grepcase regexp="[A-Z]" datafile="simple1" greplines="2"/>
<grepcase regexp="fodder|simple" datafile="simple1" greplines="3 4"/>
<grepcase regexp="(?g)fodder|simple" datafile="simple1" greplines="3 4"/>
<grepcase regexp="\w{4}\s+\w{4}\s+\w{4}" datafile="simple1" greplines="3"/>

<grepcase regexp="[cde]{3}" datafile="bounded_charclass" greplines="5 6 7"/>
<grepcase regexp="[f-h]{5}" datafile="bounded_charclass" greplines="8 9 10"/>
<grepcase regexp="[a-z]{5}" datafile="bounded_charclass" greplines="7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="[a-z]{5}" datafile="bounded_charclass" flags="-c -enable-pablo-s2p" greplines="7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="[a-z]{5,15}" datafile="bounded_charclass" greplines="7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="=(?:[a-z]{3}[h-w]){3};" datafile="bounded_charclass" greplines="14"/>
<grepcase regexp="=[a-z]{7,}" datafile="bounded_charclass" greplines="9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="=[a-z]{5,15};" datafile="bounded_charclass" greplines="7 8 9 10 11 12 13 14 15 16 17"/>
<grepcase regexp="=(?:[a-z]{3,5}){2,};" datafile="bounded_charclass" greplines="8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="=(?:[a-z]{4,5}){2,};" datafile="bounded_charclass" greplines="10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="(([wxy]{2}){3}){2}" datafile="bounded_charclass" greplines="25 26 27"/>
<grepcase regexp="(([wxy]{2}?){3}?){2}?" datafile="bounded_charclass" greplines="25 26 27"/>
<grepcase regexp="=([a-z][c-z])*;" datafile="bounded_charclass" greplines="6 8 10 12 14 16 18 20 22 24 26 28"/>
<grepcase regexp="[\u0061-\u007A]{6}" datafile="bounded_charclass" greplines="8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="[\o{142}-d]{2}" datafile="bounded_charclass" greplines="4 5 6"/>
<grepcase regexp="[\x61-\U0000007A]{6}" datafile="bounded_charclass" greplines="8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"/>
<grepcase regexp="(?i)[A-T]{6}" datafile="bounded_charclass" greplines="8 9 10 11 12 13 14 15 16 17 18 19 20 21 22"/>
<grepcase regexp="(?i)=S[A-T]S*;" datafile="bounded_charclass" greplines="21"/>
<grepcase regexp="=[0-9]{100};" datafile="bounded_charclass" greplines="29"/>
<grepcase regexp="=[0-9]{50,};" datafile="bounded_charclass" greplines="2 29 30 31 32 33 34 35 36"/>
<grepcase regexp="=[0-9]{107,};" datafile="bounded_charclass" greplines="2 30 31 32 33 34 35 36"/>
<grepcase regexp="=[0-9]{107,};" datafile="bounded_charclass" flags="-c -m=5" greplines="2 30 31 32 33"/>
<grepcase regexp="=0123[0-9]{107,};" datafile="bounded_charclass" greplines="2 31 32 33 34 35 36"/>
<grepcase regexp="=[0-9]{299,};" datafile="bounded_charclass" greplines="2 36"/>
<grepcase regexp="=0123[0-9]{295,};" datafile="bounded_charclass" greplines="2 36"/>
<grepcase regexp="=[0-9]{140};" datafile="bounded_charclass" greplines="33"/>
<grepcase regexp="=[0-9a-z]{12,200};" datafile="bounded_charclass" greplines="14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35"/>
<grepcase regexp="=[0-9a-z]{200,1000};" datafile="bounded_charclass" greplines="2 35 36"/>
<grepcase regexp="=[0-9]{500,1000};" datafile="bounded_charclass" greplines="2"/>
<grepcase regexp="=0123[0-9]{496,996};" datafile="bounded_charclass" greplines="2"/>
<grepcase regexp="=([a-f].{0,2})+;" datafile="bounded_charclass" greplines="3 4 5 6 7 8"/>
<grepcase regexp="=[acegikmoq](..)*;" datafile="bounded_charclass" greplines="3 5 7 9 11 13 15 17 19"/>

<grepcase regexp="^D[zabcdefoy]g" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="2 3 4 5 6 7 10"/>
<grepcase regexp="do*c|ez*t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="5 6 9 10"/>
<grepcase regexp="M(az)*T" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="2 3 4 5 7 11"/>
<grepcase regexp="ez+t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="6 10"/>
<grepcase regexp="b([a-d]z)*t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="2 9"/>
<grepcase regexp="[^D]og" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="4 10"/>
<grepcase regexp="Na?t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="9 10"/>
<grepcase regexp="h.t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="2 3 4"/>
<grepcase regexp="do*?c|ez*?t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="5 6 9 10"/>
<grepcase regexp="^.....\b" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="2 3 4 5 6 7"/>
<grepcase regexp="^\X\X\X\X\X\b" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" greplines="2 3 4 5 6 7"/>

<grepcase regexp="[]]" datafile="special_characters" greplines="2 3 4 7 10 11 12 15 17"/>
<grepcase regexp="[-]" datafile="special_characters" greplines="6 7 10 12 13 14 15 16"/>
<grepcase regexp="[-]" datafile="special_characters" flags="-c -m=4" greplines="6 7 10 12"/>
<grepcase regexp="[]^-]" datafile="special_characters" greplines="2 3 4 6 7 10 11 12 13 14 15 16 17 18"/>
<grepcase regexp="[\-\]\^]" datafile="special_characters" greplines="2 3 4 6 7 10 11 12 13 14 15 16 17 18"/>
<grepcase regexp="[^]]" datafile="special_characters" greplines="2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18"/>
<grepcase regexp="[^-]" datafile="special_characters" greplines="2 3 4 5 6 7 8 9 10 11 12 13 15 17 18"/>
<grepcase regexp="[^^]" datafile="special_characters" greplines="2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17"/>
<grepcase regexp="[^]-]" datafile="special_characters" greplines="2 3 4 5 6 7 8 9 10 11 12 13 15 18"/>
<grepcase regexp="[.]" datafile="special_characters" greplines="3 5 7 9 11 13 15"/>
<grepcase regexp=")" datafile="special_characters" greplines="3"/>

<grepcase regexp="^((([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])[.]){3})([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])$" datafile="ips" greplines="2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62"/>
<grepcase regexp="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.([a-zA-Z]{2}|com|org|net|edu|gov|mil|biz|info|mobi|name|aero|asia|jobs|museum)$" datafile="emails" greplines="2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 19 20 21 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 47 48 49 50 51 52 53 54 55 56 57 58 59 60 62 63 64 65 66 67 68 69 70 71 74 75 77 78 79 80 81 82 83 84 85 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127"/>
<!--<grepcase regexp="^(?g)[a-zA-Z0-9._%+-]+(?-g)@(?g)[a-zA-Z0-9.-]+(?-g)\.((?g)[a-zA-Z]{2}(?-g)|com|org|net|edu|gov|mil|biz|info|mobi|name|aero|asia|jobs|museum)$" datafile="emails" grepcount="120"/>-->
<grepcase regexp="^[-+]?([1-9]0?)+\.?((0*[1-9])+|0)([eE][-+]?([0-9]+)+)?$" datafile="floats" greplines="2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 21 42 51 61 65 67 69 70 75"/>


<!-- . should match a unique character, even if it is 3 bytes. -->
<grepcase regexp="'.'" datafile="LU_test" greplines="3"/>
<grepcase regexp="'...'" datafile="LU_test" greplines=""/>
<grepcase regexp="\u{1e20}" datafile="LU_test" greplines="3"/>
<grepcase regexp="\u1e20" datafile="LU_test" greplines="3"/>
<grepcase regexp="\U00001e20" datafile="LU_test" greplines="3"/>
<grepcase regexp="\o{17040}" datafile="LU_test" greplines="3"/>
<grepcase regexp="\u{1e21}" datafile="LU_test" greplines=""/>
<grepcase regexp="\u1e21" datafile="LU_test" greplines=""/>
<grepcase regexp="\U00001e21" datafile="LU_test" greplines=""/>
<grepcase regexp="\o{17041}" datafile="LU_test" greplines=""/>
<grepcase regexp="\p{Lu}" datafile="LU_test" greplines="2 3"/>
<grepcase regexp="'\p{Lu}'" datafile="LU_test" greplines="3"/>
<grepcase regexp="\p{Ll}" datafile="LU_test" greplines="2"/>

<datafile id="codepoints">
A line with 0x89 &#x89;
A line with 0x1234 &#x1234;
A line with 0x1245 &#x1245;
‰Ω†
Â•Ω
‡¶ï
‡¶ï‡ßÄ
‡¶ï‡¶ï‡ßÄ
‡¶ï‡ßÄ‡¶ï‡ßÄ
‡¶ï‡¶ï‡ßÄ‡¶ï‡¶ï‡ßÄ‡¶ï
‡¶ï‡ßÄ‡¶ï‡¶ï‡¶ï‡¶ï‡ßÄ
A plain line.
</datafile>
<grepcase regexp="[\u{1234}-\u{1245}]" datafile="codepoints" greplines="3 4"/>
<grepcase regexp="[\u{086}-\u{9A}]" datafile="codepoints" greplines="2"/>
<grepcase regexp="[‰Ω†Â•Ω]" datafile="codepoints" greplines="5 6"/>
<grepcase regexp="^\u{4F60}$" datafile="codepoints" greplines="5"/>
<grepcase regexp="(?g)^\u{4F60}$" datafile="codepoints" greplines="5"/>
<grepcase regexp="^‡¶ï$" datafile="codepoints" greplines="7"/>
<grepcase regexp="^.{3}$" datafile="codepoints" greplines="9"/>
<!-- Bad tests:
<grepcase regexp="(?g)^‡¶ï$" datafile="codepoints" grepcount="2"/>
<grepcase regexp="^‡¶ï$" datafile="codepoints" grepcount="1"/> 
<grepcase regexp="(?g)^‡¶ï+$" datafile="codepoints" grepcount="6"/>  
<grepcase regexp="^‡¶ï{1,27}$" datafile="codepoints" grepcount="1"/> 
<grepcase regexp="(?g)^‡¶ï{1,27}$" datafile="codepoints" grepcount="6"/>  
<grepcase regexp="(^‡¶ï{1,2}$)|(^‡¶ï{4,6}$)" datafile="codepoints" grepcount="1"/> 
<grepcase regexp="(?g)(^‡¶ï{1,2}$)|(^‡¶ï{4,6}$)" datafile="codepoints" grepcount="6"/> 
-->
<datafile id = "EmptyFile"/>
<grepcase regexp="ab" datafile="EmptyFile" greplines=""/> 
<datafile id = "LineBreaking">CRLF1&#13;&#10;CRLF2&#13;&#10;CRLF3&#13;&#10;
LS1&#x2028;LS2&#x2028;LS3&#x2028;PS1&#x2029;PS2&#x2029;PS3&#x2029;&#x2003;
PS4&#x2029;CRLF4&#13;&#10;LS4&#x2028;LS5&#x2028;CRLF5&#13;&#10;LS6&#x2028;&#x2003;
Unterminated</datafile>

<grepcase regexp="^.*$" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="19"/>
<grepcase regexp="^\X*$" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="19"/>
<grepcase regexp="(?g)^.*$" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="19"/>
<grepcase regexp="Unterminated$" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="1"/>
<grepcase regexp="^CRLF.$" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="5"/>
<grepcase regexp="LS[0-9]*" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="6"/>
<grepcase regexp="PS" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="4"/>
<grepcase regexp="\S" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="16"/>
<grepcase regexp="$" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="19"/>
<grepcase regexp="$" datafile="LineBreaking" greplines="1 2 3 4 5 6 7 8 9"/>
<grepcase regexp="\p{ascii}" datafile="LineBreaking" flags="-c -Unicode-lines" grepcount="16"/>

<grepcase regexp="[a-z]{20}" datafile="4KiB-onepage" greplines="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77"/>
<grepcase regexp="[a-z]{15}" datafile="4KiB-onepage" greplines="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78"/>

<!-- The following data file is produced from auxiliary/GraphemeBreakTest.txt 
  see UCD-scripts/graphemebreak.py -->
<datafile id="graphemebreaktests">&#x0020;&#x0300;
&#x0020;&#x0308;&#x0300;
&#x0020;&#x0308;&#x034F;
&#x0020;&#x0308;&#x0903;
&#x0020;&#x0308;&#x200D;
&#x0020;&#x0308;&#x0020;
&#x0020;&#x0308;&#x0378;
&#x0020;&#x0308;&#x0600;
&#x0020;&#x0308;&#x1100;
&#x0020;&#x0308;&#x1160;
&#x0020;&#x0308;&#x11A8;
&#x0020;&#x0308;&#x1F1E6;
&#x0020;&#x0308;&#x231A;
&#x0020;&#x0308;&#xAC00;
&#x0020;&#x0308;&#xAC01;
&#x0020;&#x034F;
&#x0020;&#x0903;
&#x0020;&#x200D;
&#x0020;&#x200D;&#x0646;
&#x0020;&#x0020;
&#x0020;&#x0378;
&#x0020;&#x0600;
&#x0020;&#x1100;
&#x0020;&#x1160;
&#x0020;&#x11A8;
&#x0020;&#x1F1E6;
&#x0020;&#x231A;
&#x0020;&#xAC00;
&#x0020;&#xAC01;
&#x0061;&#x0308;
&#x0061;&#x0308;&#x0062;
&#x0061;&#x0903;&#x0062;
&#x0061;&#x1F3FF;&#x1F476;&#x200D;&#x1F6D1;
&#x0061;&#x1F3FF;&#x1F476;
&#x0061;&#x200D;
&#x0061;&#x200D;&#x1F6D1;
&#x0061;&#x200D;&#x2701;
&#x0061;&#x0600;&#x0062;
&#x0061;&#x1F1E6;&#x1F1E7;&#x200D;&#x1F1E8;&#x0062;
&#x0061;&#x1F1E6;&#x1F1E7;&#x1F1E8;&#x1F1E9;&#x0062;
&#x0061;&#x1F1E6;&#x1F1E7;&#x1F1E8;&#x0062;
&#x0061;&#x1F1E6;&#x200D;&#x1F1E7;&#x1F1E8;&#x0062;
&#x0300;&#x0300;
&#x0300;&#x0308;&#x0300;
&#x0300;&#x0308;&#x034F;
&#x0300;&#x0308;&#x0903;
&#x0300;&#x0308;&#x200D;
&#x0300;&#x0308;&#x0020;
&#x0300;&#x0308;&#x0378;
&#x0300;&#x0308;&#x0600;
&#x0300;&#x0308;&#x1100;
&#x0300;&#x0308;&#x1160;
&#x0300;&#x0308;&#x11A8;
&#x0300;&#x0308;&#x1F1E6;
&#x0300;&#x0308;&#x231A;
&#x0300;&#x0308;&#xAC00;
&#x0300;&#x0308;&#xAC01;
&#x0300;&#x034F;
&#x0300;&#x0903;
&#x0300;&#x200D;
&#x0300;&#x0020;
&#x0300;&#x0378;
&#x0300;&#x0600;
&#x0300;&#x1100;
&#x0300;&#x1160;
&#x0300;&#x11A8;
&#x0300;&#x1F1E6;
&#x0300;&#x231A;
&#x0300;&#xAC00;
&#x0300;&#xAC01;
&#x034F;&#x0300;
&#x034F;&#x0308;&#x0300;
&#x034F;&#x0308;&#x034F;
&#x034F;&#x0308;&#x0903;
&#x034F;&#x0308;&#x200D;
&#x034F;&#x0308;&#x0020;
&#x034F;&#x0308;&#x0378;
&#x034F;&#x0308;&#x0600;
&#x034F;&#x0308;&#x1100;
&#x034F;&#x0308;&#x1160;
&#x034F;&#x0308;&#x11A8;
&#x034F;&#x0308;&#x1F1E6;
&#x034F;&#x0308;&#x231A;
&#x034F;&#x0308;&#xAC00;
&#x034F;&#x0308;&#xAC01;
&#x034F;&#x034F;
&#x034F;&#x0903;
&#x034F;&#x200D;
&#x034F;&#x0020;
&#x034F;&#x0378;
&#x034F;&#x0600;
&#x034F;&#x1100;
&#x034F;&#x1160;
&#x034F;&#x11A8;
&#x034F;&#x1F1E6;
&#x034F;&#x231A;
&#x034F;&#xAC00;
&#x034F;&#xAC01;
&#x0378;&#x0300;
&#x0378;&#x0308;&#x0300;
&#x0378;&#x0308;&#x034F;
&#x0378;&#x0308;&#x0903;
&#x0378;&#x0308;&#x200D;
&#x0378;&#x0308;&#x0020;
&#x0378;&#x0308;&#x0378;
&#x0378;&#x0308;&#x0600;
&#x0378;&#x0308;&#x1100;
&#x0378;&#x0308;&#x1160;
&#x0378;&#x0308;&#x11A8;
&#x0378;&#x0308;&#x1F1E6;
&#x0378;&#x0308;&#x231A;
&#x0378;&#x0308;&#xAC00;
&#x0378;&#x0308;&#xAC01;
&#x0378;&#x034F;
&#x0378;&#x0903;
&#x0378;&#x200D;
&#x0378;&#x0020;
&#x0378;&#x0378;
&#x0378;&#x0600;
&#x0378;&#x1100;
&#x0378;&#x1160;
&#x0378;&#x11A8;
&#x0378;&#x1F1E6;
&#x0378;&#x231A;
&#x0378;&#xAC00;
&#x0378;&#xAC01;
&#x0600;&#x0020;
&#x0600;&#x0300;
&#x0600;&#x0308;&#x0300;
&#x0600;&#x0308;&#x034F;
&#x0600;&#x0308;&#x0903;
&#x0600;&#x0308;&#x200D;
&#x0600;&#x0308;&#x0020;
&#x0600;&#x0308;&#x0378;
&#x0600;&#x0308;&#x0600;
&#x0600;&#x0308;&#x1100;
&#x0600;&#x0308;&#x1160;
&#x0600;&#x0308;&#x11A8;
&#x0600;&#x0308;&#x1F1E6;
&#x0600;&#x0308;&#x231A;
&#x0600;&#x0308;&#xAC00;
&#x0600;&#x0308;&#xAC01;
&#x0600;&#x034F;
&#x0600;&#x0378;
&#x0600;&#x0600;
&#x0600;&#x0903;
&#x0600;&#x1100;
&#x0600;&#x1160;
&#x0600;&#x11A8;
&#x0600;&#x1F1E6;
&#x0600;&#x200D;
&#x0600;&#x231A;
&#x0600;&#xAC00;
&#x0600;&#xAC01;
&#x0646;&#x200D;&#x0020;
&#x0903;&#x0300;
&#x0903;&#x0308;&#x0300;
&#x0903;&#x0308;&#x034F;
&#x0903;&#x0308;&#x0903;
&#x0903;&#x0308;&#x200D;
&#x0903;&#x0308;&#x0020;
&#x0903;&#x0308;&#x0378;
&#x0903;&#x0308;&#x0600;
&#x0903;&#x0308;&#x1100;
&#x0903;&#x0308;&#x1160;
&#x0903;&#x0308;&#x11A8;
&#x0903;&#x0308;&#x1F1E6;
&#x0903;&#x0308;&#x231A;
&#x0903;&#x0308;&#xAC00;
&#x0903;&#x0308;&#xAC01;
&#x0903;&#x034F;
&#x0903;&#x0903;
&#x0903;&#x200D;
&#x0903;&#x0020;
&#x0903;&#x0378;
&#x0903;&#x0600;
&#x0903;&#x1100;
&#x0903;&#x1160;
&#x0903;&#x11A8;
&#x0903;&#x1F1E6;
&#x0903;&#x231A;
&#x0903;&#xAC00;
&#x0903;&#xAC01;
&#x1100;&#x0300;
&#x1100;&#x0308;&#x0300;
&#x1100;&#x0308;&#x034F;
&#x1100;&#x0308;&#x0903;
&#x1100;&#x0308;&#x200D;
&#x1100;&#x0308;&#x0020;
&#x1100;&#x0308;&#x0378;
&#x1100;&#x0308;&#x0600;
&#x1100;&#x0308;&#x1100;
&#x1100;&#x0308;&#x1160;
&#x1100;&#x0308;&#x11A8;
&#x1100;&#x0308;&#x1F1E6;
&#x1100;&#x0308;&#x231A;
&#x1100;&#x0308;&#xAC00;
&#x1100;&#x0308;&#xAC01;
&#x1100;&#x034F;
&#x1100;&#x0903;
&#x1100;&#x1100;
&#x1100;&#x1160;
&#x1100;&#x200D;
&#x1100;&#xAC00;
&#x1100;&#xAC01;
&#x1100;&#x0020;
&#x1100;&#x0378;
&#x1100;&#x0600;
&#x1100;&#x11A8;
&#x1100;&#x1F1E6;
&#x1100;&#x231A;
&#x1160;&#x0300;
&#x1160;&#x0308;&#x0300;
&#x1160;&#x0308;&#x034F;
&#x1160;&#x0308;&#x0903;
&#x1160;&#x0308;&#x200D;
&#x1160;&#x0308;&#x0020;
&#x1160;&#x0308;&#x0378;
&#x1160;&#x0308;&#x0600;
&#x1160;&#x0308;&#x1100;
&#x1160;&#x0308;&#x1160;
&#x1160;&#x0308;&#x11A8;
&#x1160;&#x0308;&#x1F1E6;
&#x1160;&#x0308;&#x231A;
&#x1160;&#x0308;&#xAC00;
&#x1160;&#x0308;&#xAC01;
&#x1160;&#x034F;
&#x1160;&#x0903;
&#x1160;&#x1160;
&#x1160;&#x11A8;
&#x1160;&#x200D;
&#x1160;&#x0020;
&#x1160;&#x0378;
&#x1160;&#x0600;
&#x1160;&#x1100;
&#x1160;&#x1F1E6;
&#x1160;&#x231A;
&#x1160;&#xAC00;
&#x1160;&#xAC01;
&#x11A8;&#x0300;
&#x11A8;&#x0308;&#x0300;
&#x11A8;&#x0308;&#x034F;
&#x11A8;&#x0308;&#x0903;
&#x11A8;&#x0308;&#x200D;
&#x11A8;&#x0308;&#x0020;
&#x11A8;&#x0308;&#x0378;
&#x11A8;&#x0308;&#x0600;
&#x11A8;&#x0308;&#x1100;
&#x11A8;&#x0308;&#x1160;
&#x11A8;&#x0308;&#x11A8;
&#x11A8;&#x0308;&#x1F1E6;
&#x11A8;&#x0308;&#x231A;
&#x11A8;&#x0308;&#xAC00;
&#x11A8;&#x0308;&#xAC01;
&#x11A8;&#x034F;
&#x11A8;&#x0903;
&#x11A8;&#x11A8;
&#x11A8;&#x200D;
&#x11A8;&#x0020;
&#x11A8;&#x0378;
&#x11A8;&#x0600;
&#x11A8;&#x1100;
&#x11A8;&#x1160;
&#x11A8;&#x1F1E6;
&#x11A8;&#x231A;
&#x11A8;&#xAC00;
&#x11A8;&#xAC01;
&#x1F1E6;&#x0300;
&#x1F1E6;&#x0308;&#x0300;
&#x1F1E6;&#x0308;&#x034F;
&#x1F1E6;&#x0308;&#x0903;
&#x1F1E6;&#x0308;&#x200D;
&#x1F1E6;&#x0308;&#x0020;
&#x1F1E6;&#x0308;&#x0378;
&#x1F1E6;&#x0308;&#x0600;
&#x1F1E6;&#x0308;&#x1100;
&#x1F1E6;&#x0308;&#x1160;
&#x1F1E6;&#x0308;&#x11A8;
&#x1F1E6;&#x0308;&#x1F1E6;
&#x1F1E6;&#x0308;&#x231A;
&#x1F1E6;&#x0308;&#xAC00;
&#x1F1E6;&#x0308;&#xAC01;
&#x1F1E6;&#x034F;
&#x1F1E6;&#x0903;
&#x1F1E6;&#x1F1E6;
&#x1F1E6;&#x1F1E7;&#x1F1E8;&#x0062;
&#x1F1E6;&#x200D;
&#x1F1E6;&#x0020;
&#x1F1E6;&#x0378;
&#x1F1E6;&#x0600;
&#x1F1E6;&#x1100;
&#x1F1E6;&#x1160;
&#x1F1E6;&#x11A8;
&#x1F1E6;&#x231A;
&#x1F1E6;&#xAC00;
&#x1F1E6;&#xAC01;
&#x1F476;&#x1F3FF;&#x0308;&#x200D;&#x1F476;&#x1F3FF;
&#x1F476;&#x1F3FF;&#x1F476;
&#x1F6D1;&#x200D;&#x1F6D1;
&#x200D;&#x0300;
&#x200D;&#x0308;&#x0300;
&#x200D;&#x0308;&#x034F;
&#x200D;&#x0308;&#x0903;
&#x200D;&#x0308;&#x200D;
&#x200D;&#x0308;&#x0020;
&#x200D;&#x0308;&#x0378;
&#x200D;&#x0308;&#x0600;
&#x200D;&#x0308;&#x1100;
&#x200D;&#x0308;&#x1160;
&#x200D;&#x0308;&#x11A8;
&#x200D;&#x0308;&#x1F1E6;
&#x200D;&#x0308;&#x231A;
&#x200D;&#x0308;&#xAC00;
&#x200D;&#x0308;&#xAC01;
&#x200D;&#x034F;
&#x200D;&#x0903;
&#x200D;&#x200D;
&#x200D;&#x0020;
&#x200D;&#x0378;
&#x200D;&#x0600;
&#x200D;&#x1100;
&#x200D;&#x1160;
&#x200D;&#x11A8;
&#x200D;&#x1F1E6;
&#x200D;&#x231A;
&#x200D;&#xAC00;
&#x200D;&#xAC01;
&#x231A;&#x0300;
&#x231A;&#x0308;&#x0300;
&#x231A;&#x0308;&#x034F;
&#x231A;&#x0308;&#x0903;
&#x231A;&#x0308;&#x200D;
&#x231A;&#x0308;&#x0020;
&#x231A;&#x0308;&#x0378;
&#x231A;&#x0308;&#x0600;
&#x231A;&#x0308;&#x1100;
&#x231A;&#x0308;&#x1160;
&#x231A;&#x0308;&#x11A8;
&#x231A;&#x0308;&#x1F1E6;
&#x231A;&#x0308;&#x231A;
&#x231A;&#x0308;&#xAC00;
&#x231A;&#x0308;&#xAC01;
&#x231A;&#x034F;
&#x231A;&#x0903;
&#x231A;&#x200D;
&#x231A;&#x0020;
&#x231A;&#x0378;
&#x231A;&#x0600;
&#x231A;&#x1100;
&#x231A;&#x1160;
&#x231A;&#x11A8;
&#x231A;&#x1F1E6;
&#x231A;&#x231A;
&#x231A;&#xAC00;
&#x231A;&#xAC01;
&#x2701;&#x200D;&#x2701;
&#xAC00;&#x0300;
&#xAC00;&#x0308;&#x0300;
&#xAC00;&#x0308;&#x034F;
&#xAC00;&#x0308;&#x0903;
&#xAC00;&#x0308;&#x200D;
&#xAC00;&#x0308;&#x0020;
&#xAC00;&#x0308;&#x0378;
&#xAC00;&#x0308;&#x0600;
&#xAC00;&#x0308;&#x1100;
&#xAC00;&#x0308;&#x1160;
&#xAC00;&#x0308;&#x11A8;
&#xAC00;&#x0308;&#x1F1E6;
&#xAC00;&#x0308;&#x231A;
&#xAC00;&#x0308;&#xAC00;
&#xAC00;&#x0308;&#xAC01;
&#xAC00;&#x034F;
&#xAC00;&#x0903;
&#xAC00;&#x1160;
&#xAC00;&#x11A8;
&#xAC00;&#x11A8;&#x1100;
&#xAC00;&#x200D;
&#xAC00;&#x0020;
&#xAC00;&#x0378;
&#xAC00;&#x0600;
&#xAC00;&#x1100;
&#xAC00;&#x1F1E6;
&#xAC00;&#x231A;
&#xAC00;&#xAC00;
&#xAC00;&#xAC01;
&#xAC01;&#x0300;
&#xAC01;&#x0308;&#x0300;
&#xAC01;&#x0308;&#x034F;
&#xAC01;&#x0308;&#x0903;
&#xAC01;&#x0308;&#x200D;
&#xAC01;&#x0308;&#x0020;
&#xAC01;&#x0308;&#x0378;
&#xAC01;&#x0308;&#x0600;
&#xAC01;&#x0308;&#x1100;
&#xAC01;&#x0308;&#x1160;
&#xAC01;&#x0308;&#x11A8;
&#xAC01;&#x0308;&#x1F1E6;
&#xAC01;&#x0308;&#x231A;
&#xAC01;&#x0308;&#xAC00;
&#xAC01;&#x0308;&#xAC01;
&#xAC01;&#x034F;
&#xAC01;&#x0903;
&#xAC01;&#x11A8;
&#xAC01;&#x11A8;&#x1100;
&#xAC01;&#x200D;
&#xAC01;&#x0020;
&#xAC01;&#x0378;
&#xAC01;&#x0600;
&#xAC01;&#x1100;
&#xAC01;&#x1160;
&#xAC01;&#x1F1E6;
&#xAC01;&#x231A;
&#xAC01;&#xAC00;
&#xAC01;&#xAC01;
</datafile>

<grepcase regexp="^\u{AC00}\B{g}\u{0308}\b{g}\u{1F1E6}\b{g}$" datafile="graphemebreaktests" greplines="368"/>
<grepcase regexp="\u{AC00}\u{0308}\u{1F1E6}\B{g}$" datafile="graphemebreaktests" greplines=""/>
<grepcase regexp="^\u{AC00}\B{g}\u{0308}\b{g}\u{231A}\b{g}$" datafile="graphemebreaktests" greplines="369"/>
<grepcase regexp="\u{AC00}\b{g}\u{0308}\u{231A}$" datafile="graphemebreaktests" greplines=""/>
<grepcase regexp="^\u{AC00}\B{g}\u{0308}\b{g}\u{AC00}\b{g}$" datafile="graphemebreaktests" greplines="370"/>
<grepcase regexp="\u{AC00}\u{0308}\u{AC00}\B{g}$" datafile="graphemebreaktests" greplines=""/>
<grepcase regexp="^\u{AC00}\B{g}\u{0308}\b{g}\u{AC01}\b{g}$" datafile="graphemebreaktests" greplines="371"/>
<grepcase regexp="\u{AC00}\u{0308}\B{g}\u{AC01}$" datafile="graphemebreaktests" greplines=""/>
<grepcase regexp="^\u{AC01}\b{g}\u{AC01}\b{g}$" datafile="graphemebreaktests" greplines="414"/>
<grepcase regexp="\u{AC01}\B{g}\u{AC01}$" datafile="graphemebreaktests" greplines=""/>
<grepcase regexp="^\X$" datafile="graphemebreaktests" greplines="1 2 3 4 5 16 17 18 30 35 43 44 45 46 47 58 59 60 71 72 73 74 75 86 87 88 99 100 101 102 103 114 115 116 127 128 129 130 131 132 143 144 145 146 147 148 149 150 151 152 153 154 156 157 158 159 160 171 172 173 184 185 186 187 188 199 200 201 202 203 204 205 212 213 214 215 216 227 228 229 230 231 240 241 242 243 244 255 256 257 258 268 269 270 271 272 283 284 285 287 297 299 300 301 302 303 304 315 316 317 328 329 330 331 332 343 344 345 356 357 358 359 360 361 372 373 374 375 377 386 387 388 389 390 401 402 403 405"/>
<grepcase regexp="^\X\X$" datafile="graphemebreaktests" greplines="6 7 8 9 10 11 12 13 14 15 19 20 21 22 23 24 25 26 27 28 29 31 32 33 34 36 37 38 48 49 50 51 52 53 54 55 56 57 61 62 63 64 65 66 67 68 69 70 76 77 78 79 80 81 82 83 84 85 89 90 91 92 93 94 95 96 97 98 104 105 106 107 108 109 110 111 112 113 117 118 119 120 121 122 123 124 125 126 133 134 135 136 137 138 139 140 141 142 155 161 162 163 164 165 166 167 168 169 170 174 175 176 177 178 179 180 181 182 183 189 190 191 192 193 194 195 196 197 198 206 207 208 209 210 211 217 218 219 220 221 222 223 224 225 226 232 233 234 235 236 237 238 239 245 246 247 248 249 250 251 252 253 254 259 260 261 262 263 264 265 266 267 273 274 275 276 277 278 279 280 281 282 288 289 290 291 292 293 294 295 296 298 305 306 307 308 309 310 311 312 313 314 318 319 320 321 322 323 324 325 326 327 333 334 335 336 337 338 339 340 341 342 346 347 348 349 350 351 352 353 354 355 362 363 364 365 366 367 368 369 370 371 376 378 379 380 381 382 383 384 385 391 392 393 394 395 396 397 398 399 400 404 406 407 408 409 410 411 412 413 414"/>
<grepcase regexp="^\X\X\X$" datafile="graphemebreaktests" greplines="286"/>
<grepcase regexp="^\X\X\X\X$" datafile="graphemebreaktests" greplines="39 40 41 42"/>

<datafile id="hira_border">aa ba ca
&#x3096;&#x309d;&#x002d;&#x3088;&#x308a;a
&#x3096;a
&#x3096; &#x3096;
</datafile>
<datafile id="hiragana_and_katakana">&#x3042;&#x3044;
&#x3046;&#x3048;
&#x304a;
&#x30a2;&#x30a4;
&#x30a6;&#x30a8;&#x30aa;
</datafile>
<datafile id="upper_lower_greek">&#x0391;&#x03b1;&#x0392;&#x03b2;&#x0393;&#x03b3;
&#x0391;&#x0392;&#x0393;
&#x03b1;&#x03b2;&#x03b3;
</datafile>

<grepcase regexp="\b{script=hira}a" datafile="hira_border" greplines="2 3"/>
<grepcase regexp="\b{script=hira}" datafile="hira_border" greplines="2 3 4"/>
<grepcase regexp="\p{script=/Hir./}" datafile="hira_border" greplines="2 3 4"/>
<grepcase regexp="\p{script=/.*Hir.*/}" datafile="hira_border" greplines="2 3 4"/>
<grepcase regexp="\p{script=/Hir.gana/}" datafile="hiragana_and_katakana" greplines="1 2 3"/>
<grepcase regexp="\p{script=/Kat.kana/}" datafile="hiragana_and_katakana" greplines="4 5"/>
<grepcase regexp="\p{script=/(Kata|Hira).ana/}" datafile="hiragana_and_katakana" greplines="1 2 3 4 5"/>
<grepcase regexp="\p{script=/(kata|Hira).ana/}" datafile="hiragana_and_katakana" greplines="1 2 3"/>
<grepcase regexp="(?:\p{greek}\p{greek}\p{greek})" datafile="upper_lower_greek" greplines="1 2 3"/>
<grepcase regexp="\P{slc=@lc@}" datafile="../All_good" greplines="272"/>
<grepcase regexp="\P{lc=@slc@}" datafile="../All_good" greplines="272"/>


<grepcase regexp="\p{name=/AIRPLANE/}" datafile="../All_good" flags="-c -enable-object-cache=0 -thread-num=2" greplines="9958 126660 126661 126662 126663 126664 126665 126666"/>
<grepcase regexp="\xc4[\x80-\x85]" datafile="../All_good" greplines="224 225 226 227 228 229"/>
<grepcase regexp="[\N{GREEK CAPITAL LETTER ALPHA}-\N{Greek capital letter UPSILON with DIALYTIKA}]" datafile="../All_good" greplines="881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907"/>

<datafile id = "Unterminated7">7</datafile>
<grepcase regexp="[0-9]" datafile="Unterminated7" greplines="1"/>
<datafile id="Unterminateddatafile>
<grepcase regexp="[0-9]" datafile="Unterminated6000" greplines="1"/>

<datafile id="7777">7777
</datafile>
<datafile id="7890">7890
</datafile>
<!--
<grepcase regexp="7{4}" datafile="." flags="-include=7* -l -r" grepcount="7777"/>
<grepcase regexp="7{4}" datafile="." flags="-include=7* -L -r" grepcount="7890"/>
-->

<grepcase regexp="[AI].*(?i:[AI])" datafile="simple1" greplines="2"/>
</greptest>

